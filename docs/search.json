[
  {
    "objectID": "syllabus/syllabus.html",
    "href": "syllabus/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Semester\nSpring 2024\n\n\nSection\nPSYC 166, Sect-01\n\n\nDay Time\nThursday 2:45 - 05:30PM (Pacific)\n\n\nLocation\nLocation: Roberts North, 105\n\n\nOffice Hours\nT: 1-2pm\n\n\nInstructor\nGabriel I. Cook\n\n\nContact\nDiscord (preferred) or Email: gcook@CMC.edu (please put ’PSYC 166 in subject line)\n\n\nCredit\n3 hours; 1 credits"
  },
  {
    "objectID": "syllabus/syllabus.html#course-description",
    "href": "syllabus/syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nThis course introduces students to R, a programming language for statistical computing and graphics. Students will learn how to clean, manipulate, transform, join, and tidy data sets to prepare for statistical modeling. Supervised (e.g., regression) and unsupervised (e.g., clustering) approaches will be applied to understand simple and complex relationships between cognitive and non-cognitive variables (e.g., biology, aging, education, socioeconomic, health, etc.). Students will apply their skills to wrangle, explore, and model relevant data sets for a hands-on project for local scholars, offices, organizations, or industry participants. Data sets and relevant readings will change depending on semester.\nPrerequisite: PSYC109 CM or equivalent; recommended a course in Cognitive Psychology or Cognitive Science; or permission of instructor; not open to students who have completed CSCI 36 or any other introductory course in foundation of data science.\n\nCourse Specific Learning Goals\n\nUnderstand various forms of cognitive functioning, how they are measured, and how those abilities relate with other variables\nLearn how to use R and RStudio to answer real‐word questions with data\nUse the dplyr and tidyr libraries to clean data prior to statistical analysis\nLearn how to import, clean, manipulate, tidy, and summarize data\nExamine relationships among cognitive and non-cognitive variables by applying statistical methods and models to data\nPractice using statistical probability and inference\nLearn how to examine relationships among variables and apply statistical methods and models to data (e.g., supervised or unsupervised machine‐learning methods)\nVisualize data and/or model parameters\nLearn how to manage local and remote projects and collaborate with others\nPractice scientific writing integrating data with theory\nCreate dynamic and reproducible reports with R Markdown\n\nThe following departmental learning goals will also be met: 1. Knowledge of major concepts in cognitive psychology; 2. Understanding of research methods in psychology, including research design, data analysis and interpretation; 3. Development of critical-thinking skills and use of the scientific approach to solve problems related to behavior and mental processes; 4. Oral and written communication skills."
  },
  {
    "objectID": "syllabus/syllabus.html#courses-at-cmc",
    "href": "syllabus/syllabus.html#courses-at-cmc",
    "title": "Syllabus",
    "section": "Courses at CMC",
    "text": "Courses at CMC\n\nFaculty Handbook 5.4.2 Work Load in Classes\n“Courses should involve approximately equal workloads. Generally, students should expect to spend from 6 to 8 hours per week, over and above the time spent in classroom, on each course.” – CMC Faculty Handbook\nIf you do the math, including class time of 2½ hours, you should expect to allocate 8 ½ to 10 ½ hours per week for courses at CMC. “Per week” is a key phrase; courses are not designed for nondistributed cramming."
  },
  {
    "objectID": "syllabus/syllabus.html#course-materials-and-textbook",
    "href": "syllabus/syllabus.html#course-materials-and-textbook",
    "title": "Syllabus",
    "section": "Course Materials and Textbook",
    "text": "Course Materials and Textbook\nAll of the course materials will be available on this course website .\nLink to the course website: https://slicesofdata.github.io/fods24\n\nRequired Equipment:\nComputer: current Mac (macOS) or PC (Windows or Linux) with high-speed internet connection, capable of running R and RStudio\n\n\nRequired Software:\nR and RStudio: Students will be required to use R and RStudio software. Note: Install Version will be provided. Before installing RStudio, you must also download and install the base R software at https://www.r-project.org/ that is appropriate for your computer’s operating system. RStudio can be downloaded for free at https://www.rstudio.com. You are expected to install R and RStudio on your personal computer by downloading the software from the links above. You will also have to install appropriate libraries throughout the course. Further instructions will be provided.\n\n\nReading Materials/Textbook(s)\nReadings will be taken from different sources and will appear in each topic module.\n\n[R4DS] Grolemund and Wickham (2016): R for Data Science. Electronic version.\n[FODS] Huber (2020): Foundations of Data Science.\nNordmann, E. & DeBruine, L. (2023). Applied Data Skills: Processing & Presenting Data (2023) . https://psyteachr.github.io/ads-v2\n[DSRR] Data Skills for Reproducible Research: Electronic version.\nCognition readings for project topics will be available on Canvas/Sakai\n\nThese textbooks are free and open-source."
  },
  {
    "objectID": "syllabus/syllabus.html#overview",
    "href": "syllabus/syllabus.html#overview",
    "title": "Syllabus",
    "section": "Overview",
    "text": "Overview\nStudents will read materials covering data-set relevant cognitive functions or abilities and tasks or tools used to measure those abilities. They will also will learn about coding in R, data validation and wrangling, and support their current knowledge of statistical probability and inference.\nCoding for Data Science: Students will be introduced to functional programming using R, application of models, and use of popular data-science libraries, (e.g., dplyr, ggplot, stringr, etc.). Students would learn elements of programming (e.g., assignment, functions, function arguments, operators, objects, passing objects, control flow, etc.).\nData Validation and Wrangling: Students will learn how to wrangle raw data, clean, and manipulate data. The course would involve both data wrangling and data cleaning. Students would learn main concepts of data sanitation of messy data, for example, how to clean, recode, de-dup, fix structural errors and typos, standardize data, etc. in service of applying machine-learning models.\nStatistical Probability & Inference: Students may not have much experience with formal statistics so they would learn about probability, error, confidence intervals, and frequentist inference in order to interpret data. They would also have to specify models for machine learning, for example, multiple regression.\nMachine Learning: The goal is to introduce students to supervised and unsupervised machine learning applications in order to understand relationships among variables and for classifying and segmenting. For example, supervised learning (e.g., correlation, regression, multiple regression, and if time support-vector machines for nonlinear classification) would be used for understanding relationships among cognitive variables, non-cognitive variables, and to identify groups. Unsupervised learning (e.g., hierarchical clustering, dimension reduction) would be used to understand to data segmentation.\nProject Management: Projects for academics and industry involve collaboration as well as organization of code and materials. Students will learn about and maintain a project with an organized directory structure both locally and remotely with collaborators using Git and GitHub.\nAcademic Integrity. Although you may find yourself working on assignments with a partner or discussing them with classmates, all assignments should be your one original work. You are not to share materials with other students if that material has the potential of being copied, even if your intention is not to allow a classmate to copy your work. Any signs of academic dishonesty will be submitted to the Academic Standards Committee for review. Although I do not anticipate any events of academic dishonesty, any form of dishonestly of any form will not be tolerated.\nMany students are unclear of the definition of plagiarism and for that reason I have posted some CMC links to information that I believe will clarify the issue. In addition, any work completed for another course, past or present, may not be submitted for a grade for this course. http://registrar.academic.claremontmckenna.edu/acpolicy/default.asp\nCourse Modules. This course will be split into modules, allocating various weeks depending on the scope of the module."
  },
  {
    "objectID": "syllabus/syllabus.html#course-structure",
    "href": "syllabus/syllabus.html#course-structure",
    "title": "Syllabus",
    "section": "Course Structure",
    "text": "Course Structure\nThe assumption is that students possess varying levels of skills related to programming. Nevertheless, students are expected to attend class prepared to engage with and practice concepts related to readings and lectures. Prior to class, students should have completed readings (e.g., modules or readings referenced therein) and watched any associated lectures on the material. Class time will involve answering questions raised by students, a mining lecture, and coding activities that will inform the final project (note, concepts build). Homework assignments will also involved engagement with the project data. Class time will be spent engaging in a variety of tasks and activities, including lectures, group-work, applied coding activities, presentations, and discussions."
  },
  {
    "objectID": "syllabus/syllabus.html#course-schedule",
    "href": "syllabus/syllabus.html#course-schedule",
    "title": "Syllabus",
    "section": "Course Schedule",
    "text": "Course Schedule\n\n\n\n\n\n\n\n\n\n\n\nDate\nWeek\nModule\nTopic\n\n\n\n\n01-18\n1\n1\nIntroduction to R, RStudio, and R Markdown\n\n\n01-25\n2\n2\nData Mise en Place (Project Management), Git & GitHub\n\n\n02-01\n3\n3\nFunctions, Parameters, Arguments, and Scripts\n\n\n\n3\n4\nVectors and Data Frame Basics\n\n\n02-08\n4\n5\nImporting and Exporting Data\n\n\n\n4\n6\nVariables and Measures of Cognition\n\n\n02-15\n5\n7\nManipulating Data Frames\n\n\n\n5\n8\nWorking with Cognitive Task Data\n\n\n02-22\n6\n9\nSummarizing Data\n\n\n\n6\n10\nSummarizing Cognitive Task Data\n\n\n03-01\n7\n11\nVisualizing Data\n\n\n\n7\n12\nExamining Relationships in Variables of Cognition\n\n\n03-07\n8\n13\nStrings and Factors\n\n\n03-14\n9\n-\nSpring Break (no class)\n\n\n03-21\n10\n-\nMid-Term Presentation\n\n\n03-29\n11\n15\nJoining Relational Data\n\n\n\n11\n16\nJoining Project Data\n\n\n04-04\n12\n17\nDiscuss Appropriate Models Related to Cognition Readings\n\n\n\n12\n18\nCont.\n\n\n04-11\n13\n19\nLinear Model Testing\n\n\n04-18\n14\n20\nExploratory Data Analysis\n\n\n\n14\n21\nCont.\n\n\n04-18\n15\n-\nProject Week\n\n\n04-25\n16\n-\nProject Week\n\n\n05-01\n17\n-\nPresentation (Last day of Instruction)"
  },
  {
    "objectID": "syllabus/syllabus.html#assignments-and-grading",
    "href": "syllabus/syllabus.html#assignments-and-grading",
    "title": "Syllabus",
    "section": "Assignments and Grading",
    "text": "Assignments and Grading\nThis is an engagement and skills-acquisition based course. At the beginning of the course and throughout, students will be given instruction on building and maintaining a website using quarto and github pages. Each week students will contribute blog posts and other content to their websites in response to module assignments. Students will be expected to submit URL links to their blogs using Blackboard. Students are expected to attend and participate in each class. The final project includes conducting, communicating, and preserving a reproducible data analysis project.\n\nEvaluation and Grading\n\n\n\n\n\nItem\nTotal Points (%)\n\n\n\n\nKnowledge Assessments\n10%\n\n\nWeekly Conceptual and Programming\n30%\n\n\nMidterm Presentation\n20%\n\n\nFinal Project (Pres and Report)\n40%\n\n\n\n\n\nPercentage grades are converted to letter grades according to the following rubric.\n\n\n\n\n\nLetter\nPoint Range\n\n\n\n\nA\n94 - 100\n\n\nA-\n90 - 93.99\n\n\nB+\n87 - 89.99\n\n\nB\n84 - 86.99\n\n\nB-\n80 - 83.99\n\n\nC+\n77 - 79.99\n\n\nC\n74 - 76.99\n\n\nC-\n70 - 73.99\n\n\nD+\n67 - 69.99\n\n\nD\n64 - 66.99\n\n\nD-\n60 - 63.99\n\n\nF\n0 - 59.99"
  },
  {
    "objectID": "syllabus/syllabus.html#attendance",
    "href": "syllabus/syllabus.html#attendance",
    "title": "Syllabus",
    "section": "Attendance",
    "text": "Attendance\nStudents are expected to attend and participate in each class."
  },
  {
    "objectID": "syllabus/syllabus.html#course-policies",
    "href": "syllabus/syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course Policies",
    "text": "Course Policies\n\nDue dates\nDue dates are suggestions for completing coursework on a weekly basis. You may be able to work ahead, but you are not encouraged to fall behind.\nYou should email me if you have an exceptional circumstance preventing you from taking an assessment during an assessment week.\n\n\nChanges to the syllabus\nThe syllabus may be updated for clarity or to make adjustments for pedagogical purposes. The most current version of the syllabus is always available from the course website.\n\n\nAccessibility\nIn order to receive disability-related academic accommodations students must first be registered with the Center for Student Disability Services. Students who have a documented disability or suspect they may have a disability are invited to set up an appointment with the Director of the Center for Student Disability Services, at 718-951-5538. If you have already registered with the Center for Student Disability Services, please provide your professor with the course accommodation form and discuss your specific accommodation with him/her.\n\n\n\nEmail Correspondence\nI will regularly use e-mail but you should contact me on the Discord channel, which is where I will post announcements, changes in the syllabus, reminders, etc. You are responsible for monitoring Discord and e-mail regularly.\nIf you have questions, please message me on Discord. If you need to e-mail me:\n\nAlways add ’PSYC 166” to the subject line\nemail me at: gcook@cmc.edu"
  },
  {
    "objectID": "syllabus/syllabus.html#universitys-policy-on-academic-integrity",
    "href": "syllabus/syllabus.html#universitys-policy-on-academic-integrity",
    "title": "Syllabus",
    "section": "University’s policy on Academic Integrity",
    "text": "University’s policy on Academic Integrity\nThe faculty and administration of Claremont McKenna College support an environment free from cheating and plagiarism. Each student is responsible for being aware of what constitutes cheating and plagiarism and for avoiding both.\n\nViolations of Academic integrity\nEach student is responsible for understanding and acting in accordance with the College’s policy on Academic Integrity, described below.\n\n\nAcademic Integrity\nAlthough you may find yourself working on assignments with a partner or discussing them with classmates, all assignments should be your one original work. You are not to share materials with other students if that material has the potential of being copied, even if your intention is not to allow a classmate to copy your work. Any signs of academic dishonesty, even those raised by concerned peers, will be submitted to the Academic Standards Committee for review. Although I do not anticipate any events of academic dishonesty, any form of dishonestly of any form will not be tolerated. Many students are unclear of the definition of plagiarism so I have posted some CMC links to information that I believe will clarify the issue. In addition, any work completed for another course, past or present, may not be submitted for a grade for this course and would be a violation of integrity. http://registrar.academic.claremontmckenna.edu/acpolicy/default.asp\n\nStatement of Reasonable Accommodations\nYour experience in this class is important to me. If you have already established accommodations with Disability & Accessibility Services at CMC, please communicate your approved accommodations to me during the first week of the semester so we can discuss your needs in this course ASAP. You can start this conversation by forwarding me your accommodation letter. If you have not yet established accommodations through Accessibility Services but have a temporary health condition or permanent disability (conditions include but are not limited to: mental health, attention-related, learning, vision, hearing, physical or health), you are encouraged to contact Assistant Dean for Disability Services & Academic Success, Kari Rood, at AccessibilityServices@cmc.edu to ask questions and/or begin the process. General information and accommodations request information be found at the CMC DOS Accessibility Service’s website. Please note that arrangements must be made with advance notice in order to access the reasonable accommodations. You are able to request accommodations from CMC Accessibility Services at any point in the semester. Be mindful that this process may take some time to complete and accommodations are not retroactive. I would err on the side of caution and make sure your accommodations are sent to me even if you do not believe you need them as some students only learn they may need time after completing assessment. The Americans With Disabilities Act (ADA) and Section 504 of the Rehabilitation Act do not make accommodations retroactive. If you are approved for extra testing time for example, you must do so before an electronic assessment is posted in order for it to be integrated into the assessment. Claremont McKenna College values creating inclusive and accessible learning environments consistent with federal and state law. If you are not a CMC student, please connect with the Disability & Accessibility Services Coordinator on your campus regarding a similar process.\n\n\n\nFYI on cheating etc.\nRemember, you are responsible for not cheating or violating CMC’s Academic Integrity Policy. You are responsible for understanding that policy, and for conducting yourself in a manner such that you do not violate the policy.\nThe above link lists many examples of cheating and plagiarism that are not allowed. There are many more specific acts that you should NOT do. Here is an additional list of activities that will be sufficient cause for immediate failure in the course.\n\nDo not take pictures of exam or quiz questions and share them with other students\nDo not give other students answers during an exam or quiz, or any other assignment that is an individual assignment\nDo not copy work from another source and submit it as your own\nDo not copy and paste text from the internet and submit it as your own words\nDo not copy and paste text and slightly alter wording to pass the work off as your own\nDo not hire someone else to do the coursework for you\nDo not copy and paste text into a paraphrasing app, and then submit the output of the paraphrasing app as your own work\nDo not copy random words from the internet that have nothing to do with the assignment and submit them as your own work.\nDo not work on individual assignments with other students, share answers or other material, and then all hand in versions of the same thing that are slightly different.\nDo not plagiarize yourself by submitting work that you have previously completed in another class.\n\n\n\nMandate to report violations\nIf a faculty member suspects a violation of academic integrity and, upon investigation, confirms that violation, or if the student admits the violation, the faculty member MUST report the violation. Students should be aware that faculty may use plagiarism detection software.\nThere is no excuse for cheating. Students who are caught cheating may receive a failing grade for the entire course. All students found to have violated the academic integrity will be sanctioned by the Academic Standards Committee."
  },
  {
    "objectID": "syllabus/syllabus.html#faq",
    "href": "syllabus/syllabus.html#faq",
    "title": "Syllabus",
    "section": "FAQ",
    "text": "FAQ\nIf you have questions about the syllabus, let’s talk about it in class, and/or please create a thread to discuss the question on Discord."
  },
  {
    "objectID": "slides/sample.html#step-1",
    "href": "slides/sample.html#step-1",
    "title": "Sample Presentation",
    "section": "Step 1",
    "text": "Step 1\n\nSplit slides up with level 2 headers: ## Heading 2\nAdd some markdown + text and/or some R/Python code"
  },
  {
    "objectID": "slides/sample.html#some-r-code",
    "href": "slides/sample.html#some-r-code",
    "title": "Sample Presentation",
    "section": "Some R Code",
    "text": "Some R Code\n\n2 + 2\n\n[1] 4\n\n# comment"
  },
  {
    "objectID": "slides/sample.html#slide-title",
    "href": "slides/sample.html#slide-title",
    "title": "Sample Presentation",
    "section": "Slide Title",
    "text": "Slide Title\n\none\ntwo"
  },
  {
    "objectID": "slides/sample.html#make-this-slide-red",
    "href": "slides/sample.html#make-this-slide-red",
    "title": "Sample Presentation",
    "section": "Make this slide Red",
    "text": "Make this slide Red"
  },
  {
    "objectID": "slides/sample.html#making-a-slide-incremental",
    "href": "slides/sample.html#making-a-slide-incremental",
    "title": "Sample Presentation",
    "section": "Making a Slide Incremental",
    "text": "Making a Slide Incremental\nSay you want to reveal the content of slide piecemeal without rewriting separate slides with previous content.\n\nThen add some content…\n\n\nThen some more content"
  },
  {
    "objectID": "slides/sample.html#omit-this-slide-visibility-hidden",
    "href": "slides/sample.html#omit-this-slide-visibility-hidden",
    "title": "Sample Presentation",
    "section": "Omit This Slide {visibility = “hidden”}",
    "text": "Omit This Slide {visibility = “hidden”}"
  },
  {
    "objectID": "slides/sample.html#add-links",
    "href": "slides/sample.html#add-links",
    "title": "Sample Presentation",
    "section": "Add links",
    "text": "Add links\n\ncmc\n\n\n\nFirst item\nSecond item"
  },
  {
    "objectID": "slides/sample.html#fragments",
    "href": "slides/sample.html#fragments",
    "title": "Sample Presentation",
    "section": "Fragments",
    "text": "Fragments\n\nFade in\n\n\nFade out\n\n\nHighlight red\n\n\nFade in, then out"
  },
  {
    "objectID": "slides/sample.html#fragments-nesting",
    "href": "slides/sample.html#fragments-nesting",
    "title": "Sample Presentation",
    "section": "Fragments, nesting",
    "text": "Fragments, nesting\n\n\n\nFade in &gt; Turn red &gt; Semi fade out"
  },
  {
    "objectID": "slides/sample.html#fragments-spans",
    "href": "slides/sample.html#fragments-spans",
    "title": "Sample Presentation",
    "section": "Fragments, spans",
    "text": "Fragments, spans\nThis is an important sentence!\nMind the gap when riding the rail!"
  },
  {
    "objectID": "slides/sample.html#column-layout",
    "href": "slides/sample.html#column-layout",
    "title": "Sample Presentation",
    "section": "Column layout",
    "text": "Column layout\n\n\ncontents…s\n\ncontents…"
  },
  {
    "objectID": "slides/sample.html#output-location",
    "href": "slides/sample.html#output-location",
    "title": "Sample Presentation",
    "section": "Output Location",
    "text": "Output Location\n\n\nlibrary(ggplot2)\n\nmtcars |&gt; \n  ggplot(aes(x = disp, y = mpg)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", formula = \"y~x\")"
  },
  {
    "objectID": "slides/023_git.html#version-control",
    "href": "slides/023_git.html#version-control",
    "title": "Git and GitHub",
    "section": "Version Control",
    "text": "Version Control\n\n\nWhat is version control?\n\nProject backup\nSee specific changes inside files\nUndo changes (time machine)\n\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/023_git.html#version-control-git-workflow-basics",
    "href": "slides/023_git.html#version-control-git-workflow-basics",
    "title": "Git and GitHub",
    "section": "Version Control: Git Workflow Basics",
    "text": "Version Control: Git Workflow Basics\nThere are three main parts to Git Workflow:\n\n\nVersion control for files (not empty directories)\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nVersion Control Workflow Basics"
  },
  {
    "objectID": "slides/023_git.html#connecting-git-to-github-the-rstudio-terminal",
    "href": "slides/023_git.html#connecting-git-to-github-the-rstudio-terminal",
    "title": "Git and GitHub",
    "section": "Connecting Git to GitHub: The RStudio Terminal",
    "text": "Connecting Git to GitHub: The RStudio Terminal\n\n\nConfigure Git and GitHub in RStudio Terminal\nCreate token\nSet token\nCan use the RStudio Gui (clunky though)"
  },
  {
    "objectID": "slides/023_git.html#configuring-git-and-github-with-usethis",
    "href": "slides/023_git.html#configuring-git-and-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Configuring Git and GitHub with {usethis}",
    "text": "Configuring Git and GitHub with {usethis}\n\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "slides/023_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "href": "slides/023_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Creating a Personal Access Token (PAT) for GitHub with {usethis}",
    "text": "Creating a Personal Access Token (PAT) for GitHub with {usethis}\n\n\nusethis::create_github_token()\nCreate token and copy to your clipboard"
  },
  {
    "objectID": "slides/023_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "href": "slides/023_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "title": "Git and GitHub",
    "section": "Setting your Git Credentials (using PAT) with {gitcreds}",
    "text": "Setting your Git Credentials (using PAT) with {gitcreds}\n\n\ngitcreds::gitcreds_set()\nChoose option to either set or replace\nAt ? Enter new password or token, paste PAT to set\ngh::gh_whoami() to check if set"
  },
  {
    "objectID": "slides/023_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "slides/023_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Git and GitHub",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\n\nMake a change to a file\nCheck status of project for changes\nStage change\nCommit all changes\nPush changes\nCommit a specific change\nPull changes down from repo (downloads and integrates changes)\nFetch downloads new data (does not change your working copy)"
  },
  {
    "objectID": "slides/023_git.html#checking-the-status-of-local-file-changes",
    "href": "slides/023_git.html#checking-the-status-of-local-file-changes",
    "title": "Git and GitHub",
    "section": "Checking the status of local file changes",
    "text": "Checking the status of local file changes\nAt the Terminal in RStudio\n\n$ git status"
  },
  {
    "objectID": "slides/023_git.html#staging-changes-adding-changes",
    "href": "slides/023_git.html#staging-changes-adding-changes",
    "title": "Git and GitHub",
    "section": "Staging Changes (Adding Changes)",
    "text": "Staging Changes (Adding Changes)\n\n\nStaging and Committing\n\nUntracked vs. tracked files\nTo have tracked by Git, you need to add"
  },
  {
    "objectID": "slides/023_git.html#staging-a-specific-change",
    "href": "slides/023_git.html#staging-a-specific-change",
    "title": "Git and GitHub",
    "section": "Staging a Specific Change",
    "text": "Staging a Specific Change\n\n\n$ git add &lt;file&gt;... such that &lt;file&gt; refers to the file name\nfile might be in a directory, e.g., r/\n$ git add r/yourname.R\nTab to auto-complete, e.g., git add r/you{TAB}"
  },
  {
    "objectID": "slides/023_git.html#staging-all-changes",
    "href": "slides/023_git.html#staging-all-changes",
    "title": "Git and GitHub",
    "section": "Staging All Changes",
    "text": "Staging All Changes\n\n$ git add ."
  },
  {
    "objectID": "slides/023_git.html#committing-the-changes",
    "href": "slides/023_git.html#committing-the-changes",
    "title": "Git and GitHub",
    "section": "Committing the Change(s)",
    "text": "Committing the Change(s)\n\n\ngit commit is used to commit the changes\nadd -m to tell git you want a message (e.g., \"my message here\")\n\n$ git commit -m \"added my first .R file\""
  },
  {
    "objectID": "slides/023_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "href": "slides/023_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Push (publish) the change(s) from your branch to the remote repository",
    "text": "Push (publish) the change(s) from your branch to the remote repository\n\n\n$ git push\nPushing changes"
  },
  {
    "objectID": "slides/023_git.html#pulls-changes-from-the-remote-repository",
    "href": "slides/023_git.html#pulls-changes-from-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Pulls change(s) from the remote repository",
    "text": "Pulls change(s) from the remote repository\n\n\n$ git pull\nIf you make changes that other will need, let them know to pull"
  },
  {
    "objectID": "slides/023_git.html#fetch-changes",
    "href": "slides/023_git.html#fetch-changes",
    "title": "Git and GitHub",
    "section": "Fetch changes",
    "text": "Fetch changes"
  },
  {
    "objectID": "slides/023_git.html#video-tutorials",
    "href": "slides/023_git.html#video-tutorials",
    "title": "Git and GitHub",
    "section": "Video Tutorials",
    "text": "Video Tutorials\n\n\nGitKraken Git Client examples\nfor more, see: this video"
  },
  {
    "objectID": "slides/023_git.html#videos-of-many-things-you-can-do",
    "href": "slides/023_git.html#videos-of-many-things-you-can-do",
    "title": "Git and GitHub",
    "section": "Videos of many things you can do",
    "text": "Videos of many things you can do\nIf interested, see gittower YouTube"
  },
  {
    "objectID": "project/index.html",
    "href": "project/index.html",
    "title": "Project",
    "section": "",
    "text": "For the project, your team will write code in order to analyze data and create data visualizations in order to communicate a story that would address the question(s) proposed by the participating body about cognitive functioning. Given the constraints of data to inform this specific question, the project may involve data exploration to tell a story about relationships between variables.\nAny exploratory component allows for a healthy dose of flexibility in team creativity. This open element will also allow teams to develop ideas independently, thereby producing stories that will likely diverge wildly from each other, making the project an exciting foray into data storytelling for many students."
  },
  {
    "objectID": "project/index.html#project-description",
    "href": "project/index.html#project-description",
    "title": "Project",
    "section": "",
    "text": "For the project, your team will write code in order to analyze data and create data visualizations in order to communicate a story that would address the question(s) proposed by the participating body about cognitive functioning. Given the constraints of data to inform this specific question, the project may involve data exploration to tell a story about relationships between variables.\nAny exploratory component allows for a healthy dose of flexibility in team creativity. This open element will also allow teams to develop ideas independently, thereby producing stories that will likely diverge wildly from each other, making the project an exciting foray into data storytelling for many students."
  },
  {
    "objectID": "project/index.html#team-membership-and-roles",
    "href": "project/index.html#team-membership-and-roles",
    "title": "Project",
    "section": "Team Membership and Roles",
    "text": "Team Membership and Roles\nA team of students will work with a project liaison to develop the project and work together to produce the midterm and final deliverables. Rather than having all students in charge of all duties, team members should consider delegating tasks and various types of workloads to students who are best equipped to handle them either because of ability or because of interest and desire. Teams are to meet weekly and members are to complete individual worklog reports, which are used for final grading."
  },
  {
    "objectID": "project/index.html#deliverables",
    "href": "project/index.html#deliverables",
    "title": "Project",
    "section": "Deliverables",
    "text": "Deliverables\n\nMidterm Presentation\nFinal Presentation\nFinal R Markdown Report\nWorklogs/GitHub commits"
  },
  {
    "objectID": "project/index.html#project-evaluation",
    "href": "project/index.html#project-evaluation",
    "title": "Project",
    "section": "Project Evaluation",
    "text": "Project Evaluation\nThe project has different components representing it at various stages (e.g., midterm presentation, final presentation and report). See those sections specifically but the following general items will be important to consider.\n\nQuality of project deliverable documents (e.g., organization, coherence, story, coding clarity/organization, plots, etc.)\nProfessionalism (e.g., liaison meeting etiquette and responsibility, timely discord communication, non-tardy attendance at weekly team meeting, weekly worklogs, feedback from liaison, etc.)\nPeer evaluation (e.g., contributions, team player, etc.)\n\nNote: Liaison’s will also participate in evaluating all teams. The team with the most impressive project (e.g., most clear, most useful and actionable, most interesting, most thought provoking, etc.) will receive bonus points.\n\nPresentation Characteristics\nSee the midterm and final presentation guidelines for more detail and rubric but in general, the following characteristics will be evaluated.\n\nClarity: well-explained; easy to follow/understand; ability to communicate points effectively\nOrganization: structured logically; ability to walk audience through the data journey and communicate a story interpretation about data\nThoroughness: all relevant issues discussed thoroughly\nPresentation Style: degree of preparedness and polish in presentation; smooth and rehearsed; minimum of reading; well-paced; slide quality"
  },
  {
    "objectID": "project/index.html#weekly-worklogreport",
    "href": "project/index.html#weekly-worklogreport",
    "title": "Project",
    "section": "Weekly Worklog/Report",
    "text": "Weekly Worklog/Report\nTracking individual and team goals weekly ensures progress toward the goal, commitment to the project, accountability for oneself, and a record of accomplishments.\nThe Project Manager should inquire with the team about the best way to submit worklogs or transparency and review. This could be a Google Doc File, a spreadsheet, or even a Google From that contains questions to answer, which then get dumped into a Google Spreadsheet for all to review.\n\nFrequency of Worklog\nWorklogs are to be completed by end-of-day following the team meeting, after communicating future goals (distributed equally) to other team members. Please make public for me to review. Meetings should be physical to facilitate team cohesion and conversation, and limit silly technical issues that just waste meeting time.\n\n\nContents of Worklog\nWorklogs should contain information about the reporting date, the team member reporting, that member’s previous week accomplishments, and that member’s future week goals\n\nFor the past week, I accomplished the following specific goals for my team:\n\n\nThis…\nThat…\nAnd the other…\n\n\nFor this past week, the number of hours allocated toward those goals was: ___\nFor this coming week, my specific goals for the team include:\n\n\nThis…\nThat…\nAnd the other…\n\n\nIf relevant, any items to discuss with liaison."
  },
  {
    "objectID": "project/08_project_final.html",
    "href": "project/08_project_final.html",
    "title": "Final presentation",
    "section": "",
    "text": "Overview\nThe final written report for the project will be delivered to me and to your liaison. I can provide a color-printed copy for you to distrubtue to the liaison and for their offices.\n\n\nElements to Focus On\n\n\nPresentation Medium\nYou can use any slide-presentation tool you wish. You will just need to provide me with: * a printed version of the slide deck for class time and * an electronic pdf of the slide deck before or after the presentation.\n\n\nStakeholders\nIdentify the stakeholders for your project. For example, include you liaison, professor, athletic director, college, etc. for whom the final work will be submitted.\n\n\nEvaluation and Generalized Rubric\nMore detail will be added here similar to the Midterm Presentation.\n\nQuality of project deliverable documents (e.g., organization, coherence, story, coding clarity/organization, plots, etc.)\nProfessionalism (e.g., liaison meeting etiquette and responsibility, timely discord communication, non-tardy attendance at weekly team meeting, weekly worklogs, feedback from liaison, etc.)\nPeer evaluation (e.g., contributions, team player, etc.)\n\nNote: Liaison’s will also participate in evaluating all teams. The team with the most impressive project (e.g., most clear, most useful and actionable, most interesting, most thought provoking, etc.) will receive bonus points.\n\n\nPresentation Tips\nMay be moved to a new sidebar link due to redundancy with Midterm Presentation."
  },
  {
    "objectID": "project/02_project_team_roles.html",
    "href": "project/02_project_team_roles.html",
    "title": "Team membership and roles",
    "section": "",
    "text": "Project roles help streamline events, assist delegation, allow for some accountability, and reduce workload overlap. Project roles are designed to help keep the project organized and reduce confusion about what project elements team members are taking on. Team roles should be decided upon in a way that maximizes member ability so that task demands are equal across team members. These roles provide some guidelines but do not obviate members from contributing to and participating in other tasks subsumed under specific roles. In other words, when the Project Manager falls ill, another team member should step up to facilitate any necessary communication between the liaison of me. Likewise, the Coding Lead would step in to help the Writing Lead revise writing when necessary. Similarly, the Writing Lead or Project Manager should help the Coding Lead with organizing code when appropriate. All team members have have the same goal, which is to develop, code, and communicate the project to the liaison. All members will code, organize, and write and may take lead on sections with which they are most familiar or most qualified in addressing.\nIf the team decides to create roles different from those suggested below, please just let me know.\nSuggested Roles:\n\n\n\nCommunicating with course faculty and liaison(s);\nScheduling and reminding the team meetings and meetings with liaison;\nAssigning tasks to team members (with help from course professor is needed) and based on the project requirements;\nMonitoring and keeping track of each member’s project progress;\nMotivating the team members on their task completion and future goals;\nDealing with any conflicts within the team and updating any concerns with course professor;\nCoordinating team activities such as presentation dry runs;\nHelping maintain equity of tasks across all team members, inclusion the PM;\nThe Project Manager is not responsible to reminding team members to complete their tasks or complete worklogs.\n\n\n\n\n\n1 or 2 members\nPlanning, guiding, and leading report writing;\nDoing background/external research on topic as relevant;\nAssigning sections/chapters of documents to appropriate members;\nKeeping track of the written progress;\nHelping develop a data visualization story line;\nFormatting, text, images, inline code (R code embedded in text), and tables on final document (RMarkdown for final report);\nProofreading/editing deliverable documents like slide presentation, written report, etc.;\nThe Reporting Team is not responsible to all writing.\n\n\n\n\n\n1 or 2 members\nCreating and maintaining organization of the project code (e.g., directories, sourced scripts, etc.)\nLeading coding and code documenting;\nAssigning technical tasks to other team members;\nKeeping track of the progress of the technical tasks;\nHelping other team members troubleshoot code (see also TA and course professor);\nCommunicating with PM, liaison (during liaison meetings), and course professor regarding any technical needs and concerns;\nCommunicating with RL regarding messaging of coded results;\nMaintaining GitHub repo (recommended, please see course professor for assistance);\nThe Coding Team is not responsible for all coding.\n\nBased on abilities and interests of team members, the team should determine how many individuals to assign to a given role, or determine other appropriate roles given the abilities of the team members. There should be unanimity in these decisions. I will not assign you to roles."
  },
  {
    "objectID": "project/02_project_team_roles.html#team-roles",
    "href": "project/02_project_team_roles.html#team-roles",
    "title": "Team membership and roles",
    "section": "",
    "text": "Project roles help streamline events, assist delegation, allow for some accountability, and reduce workload overlap. Project roles are designed to help keep the project organized and reduce confusion about what project elements team members are taking on. Team roles should be decided upon in a way that maximizes member ability so that task demands are equal across team members. These roles provide some guidelines but do not obviate members from contributing to and participating in other tasks subsumed under specific roles. In other words, when the Project Manager falls ill, another team member should step up to facilitate any necessary communication between the liaison of me. Likewise, the Coding Lead would step in to help the Writing Lead revise writing when necessary. Similarly, the Writing Lead or Project Manager should help the Coding Lead with organizing code when appropriate. All team members have have the same goal, which is to develop, code, and communicate the project to the liaison. All members will code, organize, and write and may take lead on sections with which they are most familiar or most qualified in addressing.\nIf the team decides to create roles different from those suggested below, please just let me know.\nSuggested Roles:\n\n\n\nCommunicating with course faculty and liaison(s);\nScheduling and reminding the team meetings and meetings with liaison;\nAssigning tasks to team members (with help from course professor is needed) and based on the project requirements;\nMonitoring and keeping track of each member’s project progress;\nMotivating the team members on their task completion and future goals;\nDealing with any conflicts within the team and updating any concerns with course professor;\nCoordinating team activities such as presentation dry runs;\nHelping maintain equity of tasks across all team members, inclusion the PM;\nThe Project Manager is not responsible to reminding team members to complete their tasks or complete worklogs.\n\n\n\n\n\n1 or 2 members\nPlanning, guiding, and leading report writing;\nDoing background/external research on topic as relevant;\nAssigning sections/chapters of documents to appropriate members;\nKeeping track of the written progress;\nHelping develop a data visualization story line;\nFormatting, text, images, inline code (R code embedded in text), and tables on final document (RMarkdown for final report);\nProofreading/editing deliverable documents like slide presentation, written report, etc.;\nThe Reporting Team is not responsible to all writing.\n\n\n\n\n\n1 or 2 members\nCreating and maintaining organization of the project code (e.g., directories, sourced scripts, etc.)\nLeading coding and code documenting;\nAssigning technical tasks to other team members;\nKeeping track of the progress of the technical tasks;\nHelping other team members troubleshoot code (see also TA and course professor);\nCommunicating with PM, liaison (during liaison meetings), and course professor regarding any technical needs and concerns;\nCommunicating with RL regarding messaging of coded results;\nMaintaining GitHub repo (recommended, please see course professor for assistance);\nThe Coding Team is not responsible for all coding.\n\nBased on abilities and interests of team members, the team should determine how many individuals to assign to a given role, or determine other appropriate roles given the abilities of the team members. There should be unanimity in these decisions. I will not assign you to roles."
  },
  {
    "objectID": "modules/18_exploratory_data_analysis.html",
    "href": "modules/18_exploratory_data_analysis.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/18_exploratory_data_analysis.html#readings-and-preparation",
    "href": "modules/18_exploratory_data_analysis.html#readings-and-preparation",
    "title": "Exploratory Data Analysis",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/18_exploratory_data_analysis.html#supplementary-readings",
    "href": "modules/18_exploratory_data_analysis.html#supplementary-readings",
    "title": "Exploratory Data Analysis",
    "section": "Supplementary Readings",
    "text": "Supplementary Readings\n\nExploratory Data Analysis"
  },
  {
    "objectID": "modules/18_exploratory_data_analysis.html#libraries",
    "href": "modules/18_exploratory_data_analysis.html#libraries",
    "title": "Exploratory Data Analysis",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management"
  },
  {
    "objectID": "modules/16_joining_project_data.html",
    "href": "modules/16_joining_project_data.html",
    "title": "Joining Project Data",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/16_joining_project_data.html#supplementary-readings",
    "href": "modules/16_joining_project_data.html#supplementary-readings",
    "title": "Joining Project Data",
    "section": "Supplementary Readings",
    "text": "Supplementary Readings\n\nR Workflow Basics"
  },
  {
    "objectID": "modules/16_joining_project_data.html#task",
    "href": "modules/16_joining_project_data.html#task",
    "title": "Joining Project Data",
    "section": "Task",
    "text": "Task"
  },
  {
    "objectID": "modules/16_joining_project_data.html#libraries",
    "href": "modules/16_joining_project_data.html#libraries",
    "title": "Joining Project Data",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management\n{readr} 2.1.4: for reading .csv, .tsv, and .fwf files\n{openxlsx} 4.2.5.2: for reading Excel spreadsheets from a URL and writing Excel files\n{haven} 2.5.4: for reading SPSS, Stata, and SAS files (e.g., .sav, .dta, .sas7bdat, etc. )\n{rio} 1.0.1: a Swiss-Army knife for data I/O\n\nRelated:\n\n{readxl} 1.4.3: for reading Excel spreadsheets"
  },
  {
    "objectID": "modules/14_strings_and_factors.html",
    "href": "modules/14_strings_and_factors.html",
    "title": "Strings and Factors",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/14_strings_and_factors.html#readings-and-preparation",
    "href": "modules/14_strings_and_factors.html#readings-and-preparation",
    "title": "Strings and Factors",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/14_strings_and_factors.html#libraries",
    "href": "modules/14_strings_and_factors.html#libraries",
    "title": "Strings and Factors",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management\n{readr} 2.1.4: for reading .csv, .tsv, and .fwf files\n{openxlsx} 4.2.5.2: for reading Excel spreadsheets from a URL and writing Excel files\n{haven} 2.5.4: for reading SPSS, Stata, and SAS files (e.g., .sav, .dta, .sas7bdat, etc. )\n{rio} 1.0.1: a Swiss-Army knife for data I/O\n\nRelated:\n\n{readxl} 1.4.3: for reading Excel spreadsheets"
  },
  {
    "objectID": "modules/12_visualizing_data.html",
    "href": "modules/12_visualizing_data.html",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/12_visualizing_data.html#readings-and-preparation",
    "href": "modules/12_visualizing_data.html#readings-and-preparation",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/12_visualizing_data.html#supplemental-readings",
    "href": "modules/12_visualizing_data.html#supplemental-readings",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Supplemental Readings",
    "text": "Supplemental Readings\n\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Introduction\n\nOptional (more on the grammar):\n\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Build a plot layer by layer"
  },
  {
    "objectID": "modules/12_visualizing_data.html#load-libraries",
    "href": "modules/12_visualizing_data.html#load-libraries",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Load libraries",
    "text": "Load libraries\n\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "modules/12_visualizing_data.html#external-functions",
    "href": "modules/12_visualizing_data.html#external-functions",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "External Functions",
    "text": "External Functions\nProvided in class:\nview_html(): for viewing data frames in html format, from /r/my_functions.R\nYou can use this in your own workspace but I am having a challenge rendering this of the website, so I’ll default to print() on occasion.\n\nsource(here::here(\"r\", \"my_functions.R\"))"
  },
  {
    "objectID": "modules/12_visualizing_data.html#ggplot-plot-composition",
    "href": "modules/12_visualizing_data.html#ggplot-plot-composition",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "{ggplot} Plot Composition",
    "text": "{ggplot} Plot Composition\nThere are five mapping components:\n\nLayer containing geometric elements and statistical transformations:\n\n\nData a tidy data frame, most typically in long/narrow format\nMapping defining how vector variables are visualized (e.g., aesthetics like shape, color, position, hue, etc.)\nStatistical Transformation (stat) representing some summarizing of data (e.g., sums, fitted curves, etc.)\nGeometric object (geom) controlling the type of visualization\nPosition Adjustment (position) controlling where visual elements are positioned\n\n\nScales that map values in the data space to values in aesthetic space\nA Coordinate System for mapping coordinates to the plane of a graphic\nA Facet for arranging the data into a grid; plotting subsets of data\nA Theme controlling the niceties of the plot, like font, background, grids, axes, typeface etc.\n\nThe grammar does not:\n\nMake suggestions about what graphics to use\nDescribe interactivity with a graphic; {ggplot2} graphics are static images, though they can be animated"
  },
  {
    "objectID": "modules/12_visualizing_data.html#initializing-the-plot-object",
    "href": "modules/12_visualizing_data.html#initializing-the-plot-object",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Initializing the Plot Object",
    "text": "Initializing the Plot Object\nWhat is a ?ggplot object? Review the docs first. Let’s apply the base layer using ggplot(). This function takes a data set and simply initializes the plot object so that you can build other components on top of it. By default, data = NULL so, you will need to pass some data argument. There is also a mapping parameter for mapping the aesthetics of the plot, by default, mapping = aes(). If you don’t pass a data frame to data, what happens?\n\nggplot()\n\n\n\n\nAn object is created but it contains no data. The default is some rectangle in space."
  },
  {
    "objectID": "modules/12_visualizing_data.html#passing-the-data-to-ggplot",
    "href": "modules/12_visualizing_data.html#passing-the-data-to-ggplot",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Passing the Data to ggplot()",
    "text": "Passing the Data to ggplot()\nYou cannot have a plot without data, so we need some data in a tidy format. We can read in a data set or create one.\n\nSWIM &lt;- readr::read_csv(here::here(\"data\", \"cleaned-cms-top-all-time-2023-swim.csv\"))\n\nRows: 440 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): name, year, event, team\ndbl (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nDATA &lt;- data.frame(\n A = c(1, 2, 3, 4), \n B = c(2, 5, 3, 8), \n C = c(10, 15, 32, 28), \n D = c(\"Task A\", \"Task A\", \"Task B\", \"Task B\"),\n E = c(\"circle\", \"circle\", \"square\", \"square\")\n)\n\nLet’s also quickly change the variable names to titlecase() so that the first letter is capitalize.\n\nnames(SWIM) &lt;- tools::toTitleCase(names(SWIM))\n\nNow we can pass this data frame to data.\n\nggplot(data = SWIM)\n\n\n\n\nOK, so still nothing. That’s because we haven’t told ggplot() what visual properties or aesthetics to include in the plot. Importantly, you do not have to provide this information in a base layer. {ggplot2} is flexible insofar as you can pass data in different places depending what data you want to use and at which layer on how you will use it.\nIf you set data = SWIM, the subsequent layers of the plot will inherit that data frame if you do not pass the argument in a different layer. However, you are not limited to passing only one data set. You might wish to plot the aesthetics of one data frame in one layer and then add another layer of aesthetics taken from a different data frame. TLDR; you can pass data, or not pass data, in the initialization of the base layer."
  },
  {
    "objectID": "modules/12_visualizing_data.html#scalingscale-transformation",
    "href": "modules/12_visualizing_data.html#scalingscale-transformation",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Scaling/Scale Transformation",
    "text": "Scaling/Scale Transformation\n\nprint(SWIM)\n\n# A tibble: 440 × 5\n    Time Name             Year  Event   Team  \n   &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n 1  1409 Jocelyn Crawford 2019  50 FREE Athena\n 2  1411 Ava Sealander    2022  50 FREE Athena\n 3  1429 Kelly Ngo        2016  50 FREE Athena\n 4  1451 Helen Liu        2014  50 FREE Athena\n 5  1456 Michele Kee      2014  50 FREE Athena\n 6  1457 Natalia Orbach-M 2020  50 FREE Athena\n 7  1457 Suzia Starzyk    2020  50 FREE Athena\n 8  1467 Katie Bilotti    2010  50 FREE Athena\n 9  1473 Jenni Rinker     2011  50 FREE Athena\n10  1442 Annika Sharma    2023  50 FREE Athena\n# ℹ 430 more rows\n\n\nLooking at the data, we have a tidy file composed of columns and rows. Looking at the data frame, you see the ‘identity’ of each case. This term is important to {ggplot}. By identity we mean variables are a numeric value, character, or factor. What you see in the data frame is the identity of the variables. Of course, we can change the identity of a variable in some way by transforming the values to z scores, log values, or each average them together to take their count and then plot any of those data. But those transformations do not represent true identities as they appear in a data set.\nIn order to take the data units in the data frame so that they can be represented as physical units on a plot (e.g., points, bars, lines, etc.), there needs to be some scaling transformation. The plot function needs to understand how many pixels high and wide to create a plot and the plot needs to know the limits of the axes for example. Similarly, the plot function needs to know what shapes to present, how many, etc. By default, the statistical transformation is an ‘identity’ transformation, or one that just takes the values and plots them as their appear in the data (their identity). More on this when we start plotting."
  },
  {
    "objectID": "modules/12_visualizing_data.html#choosing-a-coordinate-system",
    "href": "modules/12_visualizing_data.html#choosing-a-coordinate-system",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Choosing a Coordinate System",
    "text": "Choosing a Coordinate System\nAll we have now is the base layer that is taking on some coordinates. For example, where are the points plotted on the plot? The system can follow the Cartesian coordinate system or a Polar coordinate system. An example of this will follow later. For now, the default is chosen for you. What might you think it is?"
  },
  {
    "objectID": "modules/12_visualizing_data.html#adding-aesthetic-mappings",
    "href": "modules/12_visualizing_data.html#adding-aesthetic-mappings",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Adding Aesthetic Mappings",
    "text": "Adding Aesthetic Mappings\nIf you wanted your plot geometry (the geom() you add later) to inherit properties of the initialized base layer, you could pass aesthetics to the mapping argument mapping = aes() in the ggplot() function. Notice that the argument that we pass to mapping is another function, aes().\nFor example:\n\nggplot(data = SWIM, mapping = aes())\n\n\n\n\nBut this still does not present anything you can see. You might have guessed that the reason you do not see anything is because nothing was passed to aes(). Here is where you map data to aesthetics by specifying the variable information and passing them to aes(). Looking at ?aes, we see that aes() maps how properties of the data connect to, or map, onto with the features of the visualization (e.g., axis position, color, size, etc.). The aesthetics are the visual properties of the visualization, so they are essential to map by passing arguments to aes().\nHow many and what variables do pass? Looking at ?aes, you see that x and y are needed.\nBecause we passed data = SWIM in ggplot(), we can reference the variables by their column names without specifying the data frame.\nIf x = Year and y = Time:\n\nggplot(data = SWIM, \n       mapping = aes(x = Year, y = Time)\n       )\n\n\n\n\nOK, now we can see something. Although this is progress, what is visible is rather empty and ugly. We can see that the aesthetic layer now applied to the plot scales the data to present Year along the x-axis with a range from lowest to highest value from that vector. Similarly, the mapping presents Time along the y-axis with a range from lowest to highest value in the vector. Also, the aesthetics include the variable name as a the label for the x and y axes. Of course, you can change these details later in a layer as well. More on that later.\nYou might have been tempted to pass the variable names a quoted strings (e.g., “A” and “B) but if you do that, you’ll get something different.\n\nggplot(data = SWIM, \n       mapping = aes(x = \"Year\", y = \"Time\")\n       )\n\n\n\n\nIf we want to plot the data as they are in the data frame, we would apply the ‘identity’ transformation. Again, by identity, we just need to instruct ggplot() to use the data values in the data frame. If you wanted to plot the means, frequency count, or something else, we would need to tell ggplot() how to transform the data. We are not at that point yet though."
  },
  {
    "objectID": "modules/12_visualizing_data.html#adding-plot-geometries",
    "href": "modules/12_visualizing_data.html#adding-plot-geometries",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Adding Plot Geometries",
    "text": "Adding Plot Geometries\nWe do not yet have any geometries, or geoms, added. All geom functions will take the form geom_*(). As you will see, geoms can take many forms, including, points, lines, bars, text, etc. If we want the values in Year and Time to be plotted as x and y coordinates representing points on the plot, we can add a point geometry using geom_point().\nBy adding a layer, {ggplot2} really means add, as in +. We will take the initialize plot object that contains some data along with some mapping of variables to x an y coordinates and add to it a geometry. Combined, these functions will display data which adheres to some statistical transformation at some position along some scale an in some theme.\n\nggplot(data = SWIM, \n       mapping = aes(x = Year, y = Time)\n       ) +\n  geom_point()\n\n\n\n\nAt some point, you will want to assign the plot to an object. When you do, the plot will not actually render for you to view.\n\nmy_first_plot &lt;- ggplot(data = SWIM, \n       mapping = aes(x = Year, y = Time)\n       ) +\n  geom_point()\n\nThen:\n\nmy_first_plot\n\n\n\n\nPro Tip: You would need to call the plot to render it as illustrated above … unless you wrap it in ().\n\n(my_first_plot &lt;- ggplot(data = SWIM, \n       mapping = aes(x = Year, y = Time)\n       ) +\n  geom_point())\n\n\n\n\nYou now have a data visualization! The points geometry, geom_point(), inherits the aesthetic mapping from above and plots them as points."
  },
  {
    "objectID": "modules/12_visualizing_data.html#how-and-where-to-map-aesthetics",
    "href": "modules/12_visualizing_data.html#how-and-where-to-map-aesthetics",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "How and Where to Map Aesthetics?",
    "text": "How and Where to Map Aesthetics?\nYou might be wondering how you map these aesthetic properties so that when you attempt to do so, you don’t get a bunch of errors. There are two places you can map aesthetics:\nEither in the initialized plot object:\n\nggplot(data = data, mapping = aes(x, y)) + geom_point()\n\nOr in the geometry:\n\nggplot() +geom_point(data = data, mapping = aes(x, y))\n\nWe can map aesthetics in the initialized plot object by also assigning this to an object named map just so we can reference it as need.\nWhen we do this mapping:\n\nmap &lt;- ggplot(data = SWIM, \n              mapping = aes(Year, Time))\n\nThe aesthetics are inherited by the geometries that follow, which then do not require any mapping of their own…\n\nmap + \n  geom_point() + \n  geom_line()\n\n\n\n\nBut when aesthetics are NOT mapped in initialized plot:\n\nmap &lt;- ggplot() \n\nThere are no aesthetics to be inherited by the plot geometry functions because they are not passed to the ggplot() object. In this case they must be mapped as arguments the geometries themselves.\nPlot points:\n\nmap + \n  geom_point(data = SWIM, \n             mapping = aes(Year, Time)) \n\n\n\n\nPlot a line:\n\nmap + \n  geom_line(data = SWIM, \n            mapping = aes(x = Year, y = Time))\n\n\n\n\nIn a later section, we will differentiate between setting and mapping aesthetic attributes."
  },
  {
    "objectID": "modules/12_visualizing_data.html#mapping-a-variable-as-is-from-the-data-frame",
    "href": "modules/12_visualizing_data.html#mapping-a-variable-as-is-from-the-data-frame",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Mapping a variable as-is from the data frame`",
    "text": "Mapping a variable as-is from the data frame`\nggplot() defines the data as well as variables in aes(). You can easily map the x or y variable to the geom_*().\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = Year))"
  },
  {
    "objectID": "modules/12_visualizing_data.html#mapping-a-variable-that-differs-from-whats-in-the-data-frame",
    "href": "modules/12_visualizing_data.html#mapping-a-variable-that-differs-from-whats-in-the-data-frame",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Mapping a variable that differs from what’s in the data frame",
    "text": "Mapping a variable that differs from what’s in the data frame\nYou can also change a variable type in the scope of the plot without modifying it in the data frame. Let’s change Year to numeric to see what happens:\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = as.numeric(Year)))\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\n\n\n\n\nSimilarly, if we had a numeric variable and wanted to make a factor():\n\nSWIM &lt;- SWIM %&gt;%\n  mutate(., Year2 = as.numeric(Year))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Year2 = as.numeric(Year)`.\nCaused by warning:\n! NAs introduced by coercion\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = as.factor(Year2)))\n\n\n\n\nOr make a character:\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = as.character(Year2)))\n\n\n\n\nYou may have noticed that when mapped variables are numeric, the aesthetics are applied continuously and when they are character (e.g., categorical, factors), they are applied discretely. Here is a good example of mapping variable Year not as itself but by changing it to a as.numeric() or changing numeric variables to either a factor() or a character vector. You might notice that the content in the legend is messy now. Fixing this is something we will work on as we progress."
  },
  {
    "objectID": "modules/12_visualizing_data.html#mapping-a-variable-that-is-not-defined-in-the-aes-mapping-of-ggplot",
    "href": "modules/12_visualizing_data.html#mapping-a-variable-that-is-not-defined-in-the-aes-mapping-of-ggplot",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Mapping a variable that is not defined in the aes() mapping of ggplot()",
    "text": "Mapping a variable that is not defined in the aes() mapping of ggplot()\nSometimes you may wish to map a variable that is not defined in ggplot(). We can map a variable that is neither x nor y:\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = Team))\n\n\n\n\nThis is no problem because Team exists in the SWIM data passed to data in the ggplot() object."
  },
  {
    "objectID": "modules/12_visualizing_data.html#setting-and-mapping-combinations",
    "href": "modules/12_visualizing_data.html#setting-and-mapping-combinations",
    "title": "Visualizing Data: {ggplot} and the grammar of graphics",
    "section": "Setting and Mapping Combinations",
    "text": "Setting and Mapping Combinations\nWe can also combine setting aesthetics and mapping them as long as the mapping takes place outside inside aes() and the setting takes place outside.\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(color = \"maroon\", aes(shape = Team))\n\n\n\n\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(color = \"blue\", aes(size = Time))\n\n\n\n\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(shape = 21, aes(color = Event))\n\n\n\n\nImportantly, just as you cannot pass constant values as aesthetics in aes(), you cannot pass a variable to an aesthetic in the geom_*() outside of aes().\nFor example, passing color = Team outside of aes() in this instance will throw an error.\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n     geom_point(color = Team)\n\nError: object 'Team' not found\nIn summary, when you want to set an aesthetic to a constant value, do so in the geom_*() function, otherwise pass an aesthetic to aes() inside the geometry function. Color options can be discovered using colors(). Linetype has fewer options. To make the color more or less transparent, adjust alpha transparency (from 0 = invisible to 1).\n\nggplot(SWIM, aes(x = Year, y = Time)) +\n  geom_point() +\n  geom_line(linetype = \"dashed\",\n            color = \"red\",\n            alpha = .3)"
  },
  {
    "objectID": "modules/10_summarizing_data.html",
    "href": "modules/10_summarizing_data.html",
    "title": "Summarizing Data",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/10_summarizing_data.html#readings-and-preparation",
    "href": "modules/10_summarizing_data.html#readings-and-preparation",
    "title": "Summarizing Data",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/10_summarizing_data.html#supplemental-readings",
    "href": "modules/10_summarizing_data.html#supplemental-readings",
    "title": "Summarizing Data",
    "section": "Supplemental Readings",
    "text": "Supplemental Readings\n\nData Transformation"
  },
  {
    "objectID": "modules/10_summarizing_data.html#libraries",
    "href": "modules/10_summarizing_data.html#libraries",
    "title": "Summarizing Data",
    "section": "Libraries",
    "text": "Libraries\n\n{here}: 1.0.1: for path management\n{dplyr} 1.1.4: for selecting, filtering, and mutating\n{magrittr} 2.0.3: for code clarity and piping data frame objects"
  },
  {
    "objectID": "modules/10_summarizing_data.html#external-functions",
    "href": "modules/10_summarizing_data.html#external-functions",
    "title": "Summarizing Data",
    "section": "External Functions",
    "text": "External Functions\nProvided in class:\nview_html(): for viewing data frames in html format, from /r/my_functions.R\nYou can use this function in your own workspace but I am having a challenge rendering this to the website, so I’ll default to print() on occasion.\n\nsource(here::here(\"r\", \"my_functions.R\"))"
  },
  {
    "objectID": "modules/10_summarizing_data.html#libraries-1",
    "href": "modules/10_summarizing_data.html#libraries-1",
    "title": "Summarizing Data",
    "section": "Libraries",
    "text": "Libraries\nWe will work with a few different libraries for data manipulation. Let’s load them into our work space using library().\n\nlibrary(magrittr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union"
  },
  {
    "objectID": "modules/10_summarizing_data.html#creating-a-new-variable",
    "href": "modules/10_summarizing_data.html#creating-a-new-variable",
    "title": "Summarizing Data",
    "section": "Creating a new variable",
    "text": "Creating a new variable\nWe will pass the data frame into mutate() and then specify a name-value variable pair. When using %&gt;%, the data frame piped into the function will be represented as .. This . is not needed but serves as a good reminder that the data frame that is passed into mutate() is from the previous line of code. In order to keep the print out manageable, we will also use the slice() function.\nmutate(data_frame, \n    new_variable_name = variable\n    )\nCreate new variables that are set to a constant number or string:\n\nDAT %&gt;%\n  slice(., 1:5) %&gt;%   # rows 1 through 5\n  mutate(., newvar1 = 9999) %&gt;%\n  mutate(., newvar2 = \"Student\") \n\n   time             name year   event   team newvar1 newvar2\n1 23.29 Jocelyn Crawford 2019 50 FREE Athena    9999 Student\n2 23.31    Ava Sealander 2022 50 FREE Athena    9999 Student\n3 23.49        Kelly Ngo 2016 50 FREE Athena    9999 Student\n4 23.71        Helen Liu 2014 50 FREE Athena    9999 Student\n5 23.76      Michele Kee 2014 50 FREE Athena    9999 Student\n\n\nYou can see that each row in the data frame will take on the paired value."
  },
  {
    "objectID": "modules/10_summarizing_data.html#modifying-a-new-variable",
    "href": "modules/10_summarizing_data.html#modifying-a-new-variable",
    "title": "Summarizing Data",
    "section": "Modifying a new variable",
    "text": "Modifying a new variable\nNew variables are modified using the same name-value pairing approach. When you modify a variable, you are taking an existing variable to setting it to another value.\n\nSet an existing variable equal to a constant\nJust use an existing variable name (left of = in name-value pair).\n\nDAT %&gt;%\n  slice(., 1:5) %&gt;%   # rows 1 through 5\n  mutate(., time = 1) %&gt;%\n  mutate(., name = \"0\") \n\n  time name year   event   team\n1    1    0 2019 50 FREE Athena\n2    1    0 2022 50 FREE Athena\n3    1    0 2016 50 FREE Athena\n4    1    0 2014 50 FREE Athena\n5    1    0 2014 50 FREE Athena\n\n\nOK, that’s not very helpful. We just replaced our existing variables with nothing useful. You can see that name is still a &lt;chr&gt; type.\n\n\nSet an existing variable equal to another value\nAs long as {dplyr} can result the character elements of the vector, as.numeric() will convert the character strings to numbers. For example:\n\nas.numeric(c(\"1\", \"3.2\", \"6.99\"))\n\n[1] 1.00 3.20 6.99\n\n\nWe can illustrate in a data frame by creating character value that will serve as the constant, and use as.numeric() just to illustrate this example.\n\nDAT %&gt;%\n  slice(., 1:5) %&gt;%   # rows 1 through 5\n  mutate(., name = as.numeric(\"0\")) \n\n   time name year   event   team\n1 23.29    0 2019 50 FREE Athena\n2 23.31    0 2022 50 FREE Athena\n3 23.49    0 2016 50 FREE Athena\n4 23.71    0 2014 50 FREE Athena\n5 23.76    0 2014 50 FREE Athena\n\n\nAnd now name is a &lt;dbl&gt;, which is a type of numeric. We can see this by selecting columns from the data frame where() the variable is.numeric().\n\nDAT %&gt;%\n  slice(., 1:5) %&gt;%   # rows 1 through 5\n  mutate(., name = as.numeric(\"0\")) %&gt;%\n  select(., where(~is.numeric(.)))\n\n  name\n1    0\n2    0\n3    0\n4    0\n5    0\n\n\nBut if we try to convert time to numeric this way, you will see that the complex numbers will be converted to NAs, or missing.\n\nas.numeric(DAT$time)\n\nWarning: NAs introduced by coercion\n\n\n  [1] 23.29 23.31 23.49 23.71 23.76 23.77 23.77 23.87 23.93 24.02 51.05 51.24\n [13] 51.41 51.56 51.56 51.88 52.05 52.05 52.14 52.17    NA    NA    NA    NA\n [25]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [37]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [49]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [61] 55.66 55.67 55.91 56.11 56.74 56.83 57.18 57.36 57.47 57.56    NA    NA\n [73]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [85]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [97]    NA    NA    NA    NA 54.76 54.92 54.93 55.23 55.74 56.04 56.27 56.42\n[109] 56.47 56.56    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[121]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA 22.69 22.92\n[133] 22.93 22.95 23.27 23.31 23.33 23.38 23.45 23.47 50.65 50.67 50.92 51.19\n[145] 51.27 51.28 51.29 51.37 51.45 51.56    NA    NA    NA    NA    NA    NA\n[157]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[169]    NA    NA 25.94 26.22 26.28 26.57 26.82 26.90 27.14 27.14 27.16 27.17\n[181] 28.33 28.96 29.05 29.06 29.09 29.09 29.24 29.26 29.46 29.55 24.05 24.28\n[193] 24.58 24.59 24.65 24.85 25.05 25.08 25.24 25.34 54.65 54.81 54.91 55.11\n[205] 55.13 55.25 55.27 55.45 55.62 56.21    NA    NA    NA    NA    NA    NA\n[217]    NA    NA    NA    NA 19.98 20.21 20.22 20.36 20.51 20.65 20.69 20.71\n[229] 20.79 20.82 44.06 44.21 44.73 44.94 45.24 45.31 45.32 45.45 45.50 45.50\n[241]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[253]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[265]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[277]    NA    NA    NA    NA 46.99 47.57 49.32 49.97 50.03 50.29 50.35 50.41\n[289] 50.51 50.59    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[301] 54.88 55.80 55.92 56.03 56.27 56.35 56.36 56.45 56.49 56.49    NA    NA\n[313]    NA    NA    NA    NA    NA    NA    NA    NA 47.45 47.56 47.80 48.74\n[325] 48.91 49.26 49.31 49.34 49.68 49.74    NA    NA    NA    NA    NA    NA\n[337]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[349]    NA    NA 19.47 19.63 19.96 20.08 20.10 20.14 20.18 20.22 20.25 20.28\n[361] 43.28 43.69 43.74 44.43 44.57 44.59 44.81 44.81 44.83 44.87    NA    NA\n[373]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[385]    NA    NA    NA    NA    NA    NA 22.32 22.50 22.84 23.00 23.24 23.45\n[397] 23.72 23.74 23.85 23.87 24.73 24.81 24.88 25.10 25.20 25.47 25.55 25.63\n[409] 26.01 26.05 20.60 21.38 21.48 21.58 21.60 21.81 21.83 22.00 22.06 22.07\n[421] 47.01 47.72 48.39 48.50 48.54 48.82 49.00 49.45 49.52 49.60 54.52 55.15\n[433] 55.21 55.47 55.62 56.04 56.13 56.19 56.35 56.48\n\n\nThe problem we have is that the data are not in a clean form. In this data frame, some elements of time are composed of numbers, decimals, and colons (e.g., x.xx, xx:xx.xx, etc.). which all make up elements that would be numbers.\n\n\nConverting variables that are time related using {lubridate}\n{lubridate} is a library for dealing with dates and times. It is also part of the tidyverse} ecosystem.\nThe period_to_seconds() function will convert periods to seconds depending on the period format. We need to pass to it an object that equates to a period of seconds.\nFor time, the format is: hour minute second (e.g., hms). And there is a hms() function to handle this. Let’s see how it works before modifying the data frame. Load the library if it is not loaded.\nWe will pass a single character string and convert it to hms with hms() and then convert that to seconds using period_to_seconds(). Because 60 minutes and 1 hour is the same number of seconds, we should end up with the same values. We can also use ms() to convert the format into minutes and seconds and pass to period_to_seconds(). Following the examples, we will apply to the vector in the data frame.\nlubridate::period_to_seconds(lubridate::ms())\nlubridate::period_to_seconds(lubridate::hms())\nSixty minutes and one hour to hms:\n\nlubridate::hms(\"00:60:00\")\n\n[1] \"60M 0S\"\n\nlubridate::hms(\"01:00:00\")\n\n[1] \"1H 0M 0S\"\n\n\nOne day to hms:\n\nhms(\"24:00:00\")\n\n[1] \"24H 0M 0S\"\n\n\nSixty minutes and one hour to hms to seconds:\n\nlubridate::period_to_seconds(lubridate::hms(\"00:60:00\"))\n\n[1] 3600\n\nlubridate::period_to_seconds(lubridate::hms(\"01:00:00\"))\n\n[1] 3600\n\n\nOK, good. So let’s see if we can convert time. Because hms() is passed into period_to_seconds(), we first need to verify that hms() can handle it.\n\nhms(DAT$time)\n\nWarning in .parse_hms(..., order = \"HMS\", quiet = quiet): Some strings failed\nto parse\n\n\n  [1] NA            NA            NA            NA            NA           \n  [6] NA            NA            NA            NA            NA           \n [11] NA            NA            NA            NA            NA           \n [16] NA            NA            NA            NA            NA           \n [21] \"1H 50M 30S\"  \"1H 51M 89S\"  \"1H 52M 40S\"  \"1H 52M 55S\"  \"1H 52M 57S\" \n [26] \"1H 52M 67S\"  \"1H 52M 80S\"  \"1H 52M 83S\"  \"1H 52M 88S\"  \"1H 52M 89S\" \n [31] \"4H 57M 37S\"  \"4H 59M 22S\"  \"4H 59M 78S\"  \"5H 0M 6S\"    \"5H 0M 21S\"  \n [36] \"5H 0M 47S\"   \"5H 1M 17S\"   \"5H 1M 99S\"   \"5H 2M 16S\"   \"5H 2M 23S\"  \n [41] \"10H 14M 33S\" \"10H 15M 40S\" \"10H 22M 59S\" \"10H 22M 84S\" \"10H 24M 14S\"\n [46] \"10H 24M 82S\" \"10H 26M 34S\" \"10H 26M 89S\" \"10H 33M 15S\" \"10H 36M 60S\"\n [51] \"16H 58M 48S\" \"17H 3M 21S\"  \"17H 6M 78S\"  \"17H 9M 9S\"   \"17H 9M 26S\" \n [56] \"17H 12M 18S\" \"17H 12M 46S\" \"17H 13M 58S\" \"17H 21M 98S\" \"17H 24M 49S\"\n [61] NA            NA            NA            NA            NA           \n [66] NA            NA            NA            NA            NA           \n [71] \"1H 59M 91S\"  \"2H 2M 10S\"   \"2H 3M 73S\"   \"2H 3M 85S\"   \"2H 3M 92S\"  \n [76] \"2H 5M 10S\"   \"2H 5M 56S\"   \"2H 5M 71S\"   \"2H 5M 76S\"   \"2H 6M 13S\"  \n [81] \"1H 1M 84S\"   \"1H 3M 28S\"   \"1H 3M 51S\"   \"1H 3M 91S\"   \"1H 4M 16S\"  \n [86] \"1H 4M 19S\"   \"1H 4M 65S\"   \"1H 4M 66S\"   \"1H 4M 77S\"   \"1H 4M 94S\"  \n [91] \"2H 14M 83S\"  \"2H 15M 62S\"  \"2H 18M 99S\"  \"2H 19M 6S\"   \"2H 19M 78S\" \n [96] \"2H 20M 1S\"   \"2H 21M 17S\"  \"2H 21M 77S\"  \"2H 22M 34S\"  \"2H 22M 83S\" \n[101] NA            NA            NA            NA            NA           \n[106] NA            NA            NA            NA            NA           \n[111] \"2H 1M 84S\"   \"2H 2M 58S\"   \"2H 3M 80S\"   \"2H 4M 5S\"    \"2H 4M 42S\"  \n[116] \"2H 4M 81S\"   \"2H 6M 40S\"   \"2H 7M 12S\"   \"2H 7M 33S\"   \"2H 7M 42S\"  \n[121] \"2H 0M 69S\"   \"2H 3M 59S\"   \"2H 3M 79S\"   \"2H 4M 74S\"   \"2H 5M 41S\"  \n[126] \"2H 6M 82S\"   \"2H 7M 12S\"   \"2H 7M 14S\"   \"2H 7M 81S\"   \"2H 7M 94S\"  \n[131] NA            NA            NA            NA            NA           \n[136] NA            NA            NA            NA            NA           \n[141] NA            NA            NA            NA            NA           \n[146] NA            NA            NA            NA            NA           \n[151] \"1H 50M 91S\"  \"1H 50M 98S\"  \"1H 51M 39S\"  \"1H 51M 41S\"  \"1H 51M 56S\" \n[156] \"1H 51M 64S\"  \"1H 51M 95S\"  \"1H 52M 53S\"  \"1H 52M 78S\"  \"1H 53M 4S\"  \n[161] \"4H 15M 73S\"  \"4H 27M 18S\"  \"4H 30M 33S\"  \"4H 30M 77S\"  \"4H 31M 96S\" \n[166] \"4H 32M 45S\"  \"4H 32M 57S\"  \"4H 32M 68S\"  \"4H 34M 16S\"  \"4H 34M 27S\" \n[171] NA            NA            NA            NA            NA           \n[176] NA            NA            NA            NA            NA           \n[181] NA            NA            NA            NA            NA           \n[186] NA            NA            NA            NA            NA           \n[191] NA            NA            NA            NA            NA           \n[196] NA            NA            NA            NA            NA           \n[201] NA            NA            NA            NA            NA           \n[206] NA            NA            NA            NA            NA           \n[211] \"1H 1M 10S\"   \"1H 2M 88S\"   \"1H 2M 89S\"   \"1H 3M 67S\"   \"1H 4M 10S\"  \n[216] \"1H 4M 16S\"   \"1H 4M 24S\"   \"1H 4M 26S\"   \"1H 4M 35S\"   \"1H 4M 43S\"  \n[221] NA            NA            NA            NA            NA           \n[226] NA            NA            NA            NA            NA           \n[231] NA            NA            NA            NA            NA           \n[236] NA            NA            NA            NA            NA           \n[241] \"1H 38M 35S\"  \"1H 38M 88S\"  \"1H 39M 7S\"   \"1H 39M 35S\"  \"1H 39M 63S\" \n[246] \"1H 39M 80S\"  \"1H 39M 82S\"  \"1H 40M 30S\"  \"1H 40M 31S\"  \"1H 40M 50S\" \n[251] \"4H 25M 67S\"  \"4H 28M 11S\"  \"4H 28M 89S\"  \"4H 29M 32S\"  \"4H 31M 64S\" \n[256] \"4H 32M 52S\"  \"4H 32M 65S\"  \"4H 32M 94S\"  \"4H 32M 98S\"  \"4H 34M 70S\" \n[261] \"9H 14M 11S\"  \"9H 24M 43S\"  \"9H 35M 78S\"  \"9H 36M 64S\"  \"9H 39M 27S\" \n[266] \"9H 40M 2S\"   \"9H 41M 48S\"  \"9H 45M 72S\"  \"9H 46M 63S\"  \"9H 47M 9S\"  \n[271] \"15H 17M 24S\" \"15H 32M 19S\" \"15H 45M 57S\" \"15H 47M 40S\" \"15H 52M 94S\"\n[276] \"15H 53M 75S\" \"15H 56M 57S\" \"15H 57M 89S\" \"16H 2M 45S\"  \"16H 3M 38S\" \n[281] NA            NA            NA            NA            NA           \n[286] NA            NA            NA            NA            NA           \n[291] \"1H 45M 5S\"   \"1H 45M 67S\"  \"1H 46M 51S\"  \"1H 48M 84S\"  \"1H 49M 1S\"  \n[296] \"1H 49M 38S\"  \"1H 50M 32S\"  \"1H 50M 43S\"  \"1H 51M 7S\"   \"1H 51M 57S\" \n[301] NA            NA            NA            NA            NA           \n[306] NA            NA            NA            NA            NA           \n[311] \"1H 59M 90S\"  \"2H 1M 18S\"   \"2H 1M 45S\"   \"2H 1M 60S\"   \"2H 1M 66S\"  \n[316] \"2H 1M 77S\"   \"2H 1M 78S\"   \"2H 2M 89S\"   \"2H 3M 19S\"   \"2H 3M 23S\"  \n[321] NA            NA            NA            NA            NA           \n[326] NA            NA            NA            NA            NA           \n[331] \"1H 43M 96S\"  \"1H 48M 70S\"  \"1H 49M 24S\"  \"1H 49M 95S\"  \"1H 49M 96S\" \n[336] \"1H 50M 34S\"  \"1H 50M 47S\"  \"1H 50M 49S\"  \"1H 50M 51S\"  \"1H 50M 76S\" \n[341] \"1H 46M 97S\"  \"1H 48M 74S\"  \"1H 49M 74S\"  \"1H 50M 51S\"  \"1H 50M 78S\" \n[346] \"1H 51M 11S\"  \"1H 51M 24S\"  \"1H 51M 48S\"  \"1H 51M 82S\"  \"1H 51M 83S\" \n[351] NA            NA            NA            NA            NA           \n[356] NA            NA            NA            NA            NA           \n[361] NA            NA            NA            NA            NA           \n[366] NA            NA            NA            NA            NA           \n[371] \"1H 37M 98S\"  \"1H 38M 49S\"  \"1H 39M 9S\"   \"1H 39M 19S\"  \"1H 39M 66S\" \n[376] \"1H 40M 21S\"  \"1H 40M 22S\"  \"1H 40M 44S\"  \"1H 40M 70S\"  \"1H 40M 70S\" \n[381] \"3H 55M 61S\"  \"3H 56M 68S\"  \"3H 56M 88S\"  \"3H 59M 2S\"   \"3H 59M 13S\" \n[386] \"3H 59M 17S\"  \"4H 0M 63S\"   \"4H 1M 14S\"   \"4H 2M 38S\"   \"4H 2M 99S\"  \n[391] NA            NA            NA            NA            NA           \n[396] NA            NA            NA            NA            NA           \n[401] NA            NA            NA            NA            NA           \n[406] NA            NA            NA            NA            NA           \n[411] NA            NA            NA            NA            NA           \n[416] NA            NA            NA            NA            NA           \n[421] NA            NA            NA            NA            NA           \n[426] NA            NA            NA            NA            NA           \n[431] NA            NA            NA            NA            NA           \n[436] NA            NA            NA            NA            NA           \n\n\nYikes! Note the warning and look at the output. Some strings failed and turned to NA. Looking and the time vector again, we see that contains both values like 1:52.83 and 23.87. If there is only one :, we should be able to use ms().\n\nms(DAT$time)\n\n  [1] \"23M 29S\"    \"23M 31S\"    \"23M 49S\"    \"23M 71S\"    \"23M 76S\"   \n  [6] \"23M 77S\"    \"23M 77S\"    \"23M 87S\"    \"23M 93S\"    \"24M 2S\"    \n [11] \"51M 5S\"     \"51M 24S\"    \"51M 41S\"    \"51M 56S\"    \"51M 56S\"   \n [16] \"51M 88S\"    \"52M 5S\"     \"52M 5S\"     \"52M 14S\"    \"52M 17S\"   \n [21] \"1M 50.3S\"   \"1M 51.89S\"  \"1M 52.4S\"   \"1M 52.55S\"  \"1M 52.57S\" \n [26] \"1M 52.67S\"  \"1M 52.8S\"   \"1M 52.83S\"  \"1M 52.88S\"  \"1M 52.89S\" \n [31] \"4M 57.37S\"  \"4M 59.22S\"  \"4M 59.78S\"  \"5M 0.06S\"   \"5M 0.21S\"  \n [36] \"5M 0.47S\"   \"5M 1.17S\"   \"5M 1.99S\"   \"5M 2.16S\"   \"5M 2.23S\"  \n [41] \"10M 14.33S\" \"10M 15.4S\"  \"10M 22.59S\" \"10M 22.84S\" \"10M 24.14S\"\n [46] \"10M 24.82S\" \"10M 26.34S\" \"10M 26.89S\" \"10M 33.15S\" \"10M 36.6S\" \n [51] \"16M 58.48S\" \"17M 3.21S\"  \"17M 6.78S\"  \"17M 9.09S\"  \"17M 9.26S\" \n [56] \"17M 12.18S\" \"17M 12.46S\" \"17M 13.58S\" \"17M 21.98S\" \"17M 24.49S\"\n [61] \"55M 66S\"    \"55M 67S\"    \"55M 91S\"    \"56M 11S\"    \"56M 74S\"   \n [66] \"56M 83S\"    \"57M 18S\"    \"57M 36S\"    \"57M 47S\"    \"57M 56S\"   \n [71] \"1M 59.91S\"  \"2M 2.1S\"    \"2M 3.73S\"   \"2M 3.85S\"   \"2M 3.92S\"  \n [76] \"2M 5.1S\"    \"2M 5.56S\"   \"2M 5.71S\"   \"2M 5.76S\"   \"2M 6.13S\"  \n [81] \"1M 1.84S\"   \"1M 3.28S\"   \"1M 3.51S\"   \"1M 3.91S\"   \"1M 4.16S\"  \n [86] \"1M 4.19S\"   \"1M 4.65S\"   \"1M 4.66S\"   \"1M 4.77S\"   \"1M 4.94S\"  \n [91] \"2M 14.83S\"  \"2M 15.62S\"  \"2M 18.99S\"  \"2M 19.06S\"  \"2M 19.78S\" \n [96] \"2M 20.01S\"  \"2M 21.17S\"  \"2M 21.77S\"  \"2M 22.34S\"  \"2M 22.83S\" \n[101] \"54M 76S\"    \"54M 92S\"    \"54M 93S\"    \"55M 23S\"    \"55M 74S\"   \n[106] \"56M 4S\"     \"56M 27S\"    \"56M 42S\"    \"56M 47S\"    \"56M 56S\"   \n[111] \"2M 1.84S\"   \"2M 2.58S\"   \"2M 3.8S\"    \"2M 4.05S\"   \"2M 4.42S\"  \n[116] \"2M 4.81S\"   \"2M 6.4S\"    \"2M 7.12S\"   \"2M 7.33S\"   \"2M 7.42S\"  \n[121] \"2M 0.69S\"   \"2M 3.59S\"   \"2M 3.79S\"   \"2M 4.74S\"   \"2M 5.41S\"  \n[126] \"2M 6.82S\"   \"2M 7.12S\"   \"2M 7.14S\"   \"2M 7.81S\"   \"2M 7.94S\"  \n[131] \"22M 69S\"    \"22M 92S\"    \"22M 93S\"    \"22M 95S\"    \"23M 27S\"   \n[136] \"23M 31S\"    \"23M 33S\"    \"23M 38S\"    \"23M 45S\"    \"23M 47S\"   \n[141] \"50M 65S\"    \"50M 67S\"    \"50M 92S\"    \"51M 19S\"    \"51M 27S\"   \n[146] \"51M 28S\"    \"51M 29S\"    \"51M 37S\"    \"51M 45S\"    \"51M 56S\"   \n[151] \"1M 50.91S\"  \"1M 50.98S\"  \"1M 51.39S\"  \"1M 51.41S\"  \"1M 51.56S\" \n[156] \"1M 51.64S\"  \"1M 51.95S\"  \"1M 52.53S\"  \"1M 52.78S\"  \"1M 53.04S\" \n[161] \"4M 15.73S\"  \"4M 27.18S\"  \"4M 30.33S\"  \"4M 30.77S\"  \"4M 31.96S\" \n[166] \"4M 32.45S\"  \"4M 32.57S\"  \"4M 32.68S\"  \"4M 34.16S\"  \"4M 34.27S\" \n[171] \"25M 94S\"    \"26M 22S\"    \"26M 28S\"    \"26M 57S\"    \"26M 82S\"   \n[176] \"26M 90S\"    \"27M 14S\"    \"27M 14S\"    \"27M 16S\"    \"27M 17S\"   \n[181] \"28M 33S\"    \"28M 96S\"    \"29M 5S\"     \"29M 6S\"     \"29M 9S\"    \n[186] \"29M 9S\"     \"29M 24S\"    \"29M 26S\"    \"29M 46S\"    \"29M 55S\"   \n[191] \"24M 5S\"     \"24M 28S\"    \"24M 58S\"    \"24M 59S\"    \"24M 65S\"   \n[196] \"24M 85S\"    \"25M 5S\"     \"25M 8S\"     \"25M 24S\"    \"25M 34S\"   \n[201] \"54M 65S\"    \"54M 81S\"    \"54M 91S\"    \"55M 11S\"    \"55M 13S\"   \n[206] \"55M 25S\"    \"55M 27S\"    \"55M 45S\"    \"55M 62S\"    \"56M 21S\"   \n[211] \"1M 1.1S\"    \"1M 2.88S\"   \"1M 2.89S\"   \"1M 3.67S\"   \"1M 4.1S\"   \n[216] \"1M 4.16S\"   \"1M 4.24S\"   \"1M 4.26S\"   \"1M 4.35S\"   \"1M 4.43S\"  \n[221] \"19M 98S\"    \"20M 21S\"    \"20M 22S\"    \"20M 36S\"    \"20M 51S\"   \n[226] \"20M 65S\"    \"20M 69S\"    \"20M 71S\"    \"20M 79S\"    \"20M 82S\"   \n[231] \"44M 6S\"     \"44M 21S\"    \"44M 73S\"    \"44M 94S\"    \"45M 24S\"   \n[236] \"45M 31S\"    \"45M 32S\"    \"45M 45S\"    \"45M 50S\"    \"45M 50S\"   \n[241] \"1M 38.35S\"  \"1M 38.88S\"  \"1M 39.07S\"  \"1M 39.35S\"  \"1M 39.63S\" \n[246] \"1M 39.8S\"   \"1M 39.82S\"  \"1M 40.3S\"   \"1M 40.31S\"  \"1M 40.5S\"  \n[251] \"4M 25.67S\"  \"4M 28.11S\"  \"4M 28.89S\"  \"4M 29.32S\"  \"4M 31.64S\" \n[256] \"4M 32.52S\"  \"4M 32.65S\"  \"4M 32.94S\"  \"4M 32.98S\"  \"4M 34.7S\"  \n[261] \"9M 14.11S\"  \"9M 24.43S\"  \"9M 35.78S\"  \"9M 36.64S\"  \"9M 39.27S\" \n[266] \"9M 40.02S\"  \"9M 41.48S\"  \"9M 45.72S\"  \"9M 46.63S\"  \"9M 47.09S\" \n[271] \"15M 17.24S\" \"15M 32.19S\" \"15M 45.57S\" \"15M 47.4S\"  \"15M 52.94S\"\n[276] \"15M 53.75S\" \"15M 56.57S\" \"15M 57.89S\" \"16M 2.45S\"  \"16M 3.38S\" \n[281] \"46M 99S\"    \"47M 57S\"    \"49M 32S\"    \"49M 97S\"    \"50M 3S\"    \n[286] \"50M 29S\"    \"50M 35S\"    \"50M 41S\"    \"50M 51S\"    \"50M 59S\"   \n[291] \"1M 45.05S\"  \"1M 45.67S\"  \"1M 46.51S\"  \"1M 48.84S\"  \"1M 49.01S\" \n[296] \"1M 49.38S\"  \"1M 50.32S\"  \"1M 50.43S\"  \"1M 51.07S\"  \"1M 51.57S\" \n[301] \"54M 88S\"    \"55M 80S\"    \"55M 92S\"    \"56M 3S\"     \"56M 27S\"   \n[306] \"56M 35S\"    \"56M 36S\"    \"56M 45S\"    \"56M 49S\"    \"56M 49S\"   \n[311] \"1M 59.9S\"   \"2M 1.18S\"   \"2M 1.45S\"   \"2M 1.6S\"    \"2M 1.66S\"  \n[316] \"2M 1.77S\"   \"2M 1.78S\"   \"2M 2.89S\"   \"2M 3.19S\"   \"2M 3.23S\"  \n[321] \"47M 45S\"    \"47M 56S\"    \"47M 80S\"    \"48M 74S\"    \"48M 91S\"   \n[326] \"49M 26S\"    \"49M 31S\"    \"49M 34S\"    \"49M 68S\"    \"49M 74S\"   \n[331] \"1M 43.96S\"  \"1M 48.7S\"   \"1M 49.24S\"  \"1M 49.95S\"  \"1M 49.96S\" \n[336] \"1M 50.34S\"  \"1M 50.47S\"  \"1M 50.49S\"  \"1M 50.51S\"  \"1M 50.76S\" \n[341] \"1M 46.97S\"  \"1M 48.74S\"  \"1M 49.74S\"  \"1M 50.51S\"  \"1M 50.78S\" \n[346] \"1M 51.11S\"  \"1M 51.24S\"  \"1M 51.48S\"  \"1M 51.82S\"  \"1M 51.83S\" \n[351] \"19M 47S\"    \"19M 63S\"    \"19M 96S\"    \"20M 8S\"     \"20M 10S\"   \n[356] \"20M 14S\"    \"20M 18S\"    \"20M 22S\"    \"20M 25S\"    \"20M 28S\"   \n[361] \"43M 28S\"    \"43M 69S\"    \"43M 74S\"    \"44M 43S\"    \"44M 57S\"   \n[366] \"44M 59S\"    \"44M 81S\"    \"44M 81S\"    \"44M 83S\"    \"44M 87S\"   \n[371] \"1M 37.98S\"  \"1M 38.49S\"  \"1M 39.09S\"  \"1M 39.19S\"  \"1M 39.66S\" \n[376] \"1M 40.21S\"  \"1M 40.22S\"  \"1M 40.44S\"  \"1M 40.7S\"   \"1M 40.7S\"  \n[381] \"3M 55.61S\"  \"3M 56.68S\"  \"3M 56.88S\"  \"3M 59.02S\"  \"3M 59.13S\" \n[386] \"3M 59.17S\"  \"4M 0.63S\"   \"4M 1.14S\"   \"4M 2.38S\"   \"4M 2.99S\"  \n[391] \"22M 32S\"    \"22M 50S\"    \"22M 84S\"    \"23M 0S\"     \"23M 24S\"   \n[396] \"23M 45S\"    \"23M 72S\"    \"23M 74S\"    \"23M 85S\"    \"23M 87S\"   \n[401] \"24M 73S\"    \"24M 81S\"    \"24M 88S\"    \"25M 10S\"    \"25M 20S\"   \n[406] \"25M 47S\"    \"25M 55S\"    \"25M 63S\"    \"26M 1S\"     \"26M 5S\"    \n[411] \"20M 60S\"    \"21M 38S\"    \"21M 48S\"    \"21M 58S\"    \"21M 60S\"   \n[416] \"21M 81S\"    \"21M 83S\"    \"22M 0S\"     \"22M 6S\"     \"22M 7S\"    \n[421] \"47M 1S\"     \"47M 72S\"    \"48M 39S\"    \"48M 50S\"    \"48M 54S\"   \n[426] \"48M 82S\"    \"49M 0S\"     \"49M 45S\"    \"49M 52S\"    \"49M 60S\"   \n[431] \"54M 52S\"    \"55M 15S\"    \"55M 21S\"    \"55M 47S\"    \"55M 62S\"   \n[436] \"56M 4S\"     \"56M 13S\"    \"56M 19S\"    \"56M 35S\"    \"56M 48S\"   \n\n\nGreat! All elements are in the form of \"xxM XXs\". But does {lubridate} also convert seconds to a numeric value when using period_to_seconds()? If loaded, we can also remove the name of the library when calling the functions.\n\nis.numeric(period_to_seconds(ms(DAT$time)))\n\n[1] TRUE\n\n\nSo let’s go ahead and modify the character vector named time to a numeric vector representing seconds.\n\nperiod_to_seconds(ms(DAT$time))\n\n  [1] 1409.00 1411.00 1429.00 1451.00 1456.00 1457.00 1457.00 1467.00 1473.00\n [10] 1442.00 3065.00 3084.00 3101.00 3116.00 3116.00 3148.00 3125.00 3125.00\n [19] 3134.00 3137.00  110.30  111.89  112.40  112.55  112.57  112.67  112.80\n [28]  112.83  112.88  112.89  297.37  299.22  299.78  300.06  300.21  300.47\n [37]  301.17  301.99  302.16  302.23  614.33  615.40  622.59  622.84  624.14\n [46]  624.82  626.34  626.89  633.15  636.60 1018.48 1023.21 1026.78 1029.09\n [55] 1029.26 1032.18 1032.46 1033.58 1041.98 1044.49 3366.00 3367.00 3391.00\n [64] 3371.00 3434.00 3443.00 3438.00 3456.00 3467.00 3476.00  119.91  122.10\n [73]  123.73  123.85  123.92  125.10  125.56  125.71  125.76  126.13   61.84\n [82]   63.28   63.51   63.91   64.16   64.19   64.65   64.66   64.77   64.94\n [91]  134.83  135.62  138.99  139.06  139.78  140.01  141.17  141.77  142.34\n[100]  142.83 3316.00 3332.00 3333.00 3323.00 3374.00 3364.00 3387.00 3402.00\n[109] 3407.00 3416.00  121.84  122.58  123.80  124.05  124.42  124.81  126.40\n[118]  127.12  127.33  127.42  120.69  123.59  123.79  124.74  125.41  126.82\n[127]  127.12  127.14  127.81  127.94 1389.00 1412.00 1413.00 1415.00 1407.00\n[136] 1411.00 1413.00 1418.00 1425.00 1427.00 3065.00 3067.00 3092.00 3079.00\n[145] 3087.00 3088.00 3089.00 3097.00 3105.00 3116.00  110.91  110.98  111.39\n[154]  111.41  111.56  111.64  111.95  112.53  112.78  113.04  255.73  267.18\n[163]  270.33  270.77  271.96  272.45  272.57  272.68  274.16  274.27 1594.00\n[172] 1582.00 1588.00 1617.00 1642.00 1650.00 1634.00 1634.00 1636.00 1637.00\n[181] 1713.00 1776.00 1745.00 1746.00 1749.00 1749.00 1764.00 1766.00 1786.00\n[190] 1795.00 1445.00 1468.00 1498.00 1499.00 1505.00 1525.00 1505.00 1508.00\n[199] 1524.00 1534.00 3305.00 3321.00 3331.00 3311.00 3313.00 3325.00 3327.00\n[208] 3345.00 3362.00 3381.00   61.10   62.88   62.89   63.67   64.10   64.16\n[217]   64.24   64.26   64.35   64.43 1238.00 1221.00 1222.00 1236.00 1251.00\n[226] 1265.00 1269.00 1271.00 1279.00 1282.00 2646.00 2661.00 2713.00 2734.00\n[235] 2724.00 2731.00 2732.00 2745.00 2750.00 2750.00   98.35   98.88   99.07\n[244]   99.35   99.63   99.80   99.82  100.30  100.31  100.50  265.67  268.11\n[253]  268.89  269.32  271.64  272.52  272.65  272.94  272.98  274.70  554.11\n[262]  564.43  575.78  576.64  579.27  580.02  581.48  585.72  586.63  587.09\n[271]  917.24  932.19  945.57  947.40  952.94  953.75  956.57  957.89  962.45\n[280]  963.38 2859.00 2877.00 2972.00 3037.00 3003.00 3029.00 3035.00 3041.00\n[289] 3051.00 3059.00  105.05  105.67  106.51  108.84  109.01  109.38  110.32\n[298]  110.43  111.07  111.57 3328.00 3380.00 3392.00 3363.00 3387.00 3395.00\n[307] 3396.00 3405.00 3409.00 3409.00  119.90  121.18  121.45  121.60  121.66\n[316]  121.77  121.78  122.89  123.19  123.23 2865.00 2876.00 2900.00 2954.00\n[325] 2971.00 2966.00 2971.00 2974.00 3008.00 3014.00  103.96  108.70  109.24\n[334]  109.95  109.96  110.34  110.47  110.49  110.51  110.76  106.97  108.74\n[343]  109.74  110.51  110.78  111.11  111.24  111.48  111.82  111.83 1187.00\n[352] 1203.00 1236.00 1208.00 1210.00 1214.00 1218.00 1222.00 1225.00 1228.00\n[361] 2608.00 2649.00 2654.00 2683.00 2697.00 2699.00 2721.00 2721.00 2723.00\n[370] 2727.00   97.98   98.49   99.09   99.19   99.66  100.21  100.22  100.44\n[379]  100.70  100.70  235.61  236.68  236.88  239.02  239.13  239.17  240.63\n[388]  241.14  242.38  242.99 1352.00 1370.00 1404.00 1380.00 1404.00 1425.00\n[397] 1452.00 1454.00 1465.00 1467.00 1513.00 1521.00 1528.00 1510.00 1520.00\n[406] 1547.00 1555.00 1563.00 1561.00 1565.00 1260.00 1298.00 1308.00 1318.00\n[415] 1320.00 1341.00 1343.00 1320.00 1326.00 1327.00 2821.00 2892.00 2919.00\n[424] 2930.00 2934.00 2962.00 2940.00 2985.00 2992.00 3000.00 3292.00 3315.00\n[433] 3321.00 3347.00 3362.00 3364.00 3373.00 3379.00 3395.00 3408.00\n\n\nPerfect! Let’s mutate() that variable in the data frame.\n\nDAT %&gt;%\n  slice(., 1:5) %&gt;%   # rows 1 through 5\n  mutate(., time = period_to_seconds(ms(time)))  \n\n  time             name year   event   team\n1 1409 Jocelyn Crawford 2019 50 FREE Athena\n2 1411    Ava Sealander 2022 50 FREE Athena\n3 1429        Kelly Ngo 2016 50 FREE Athena\n4 1451        Helen Liu 2014 50 FREE Athena\n5 1456      Michele Kee 2014 50 FREE Athena\n\n\nLet’s look at DAT now and see those seconds. You can look at the entire data frame if you wish rather than its head().\n\nhead(DAT)\n\n   time             name year   event   team\n1 23.29 Jocelyn Crawford 2019 50 FREE Athena\n2 23.31    Ava Sealander 2022 50 FREE Athena\n3 23.49        Kelly Ngo 2016 50 FREE Athena\n4 23.71        Helen Liu 2014 50 FREE Athena\n5 23.76      Michele Kee 2014 50 FREE Athena\n6 23.77 Natalia Orbach-M 2020 50 FREE Athena\n\n\nThe data frame has not changed. The final step is to assign assign the returned data frame to an object. Remove the slice() so we get the entire data frame.\n\nDAT &lt;- DAT %&gt;%\n  mutate(., time = period_to_seconds(ms(time)))  \n\nNow let’s write this to /data. But we don’t want to overwrite this file. {here} won’t be as effective but we can concatenate the file_name string object with a prefix like \"cleaned\" using the paste() function in base R. We will add a hyphen, -, by passing it to the sep argument.\n\npaste(\"cleaned\", file_name, sep = \"-\")\n\n[1] \"cleaned-cms-top-all-time-2023-swim.xlsx\"\n\n\nWhen paired with here::here(), does the full file path look right?\n\nhere::here(\"data\", paste(\"cleaned\", file_name, sep = \"-\"))\n\n[1] \"C:/Users/gcook/Sync/git/fods24/data/cleaned-cms-top-all-time-2023-swim.xlsx\"\n\n\nWe also want to write a .csv file. Let’s use gsub() to look or the string pattern \".xlxs\" and replace it with \".csv\" for the file path string.\n\nnew_name &lt;- gsub(pattern = \".xlsx\", \n                 replacement = \".csv\", \n                 x = here::here(\"data\", paste(\"cleaned\", file_name, sep = \"-\"))\n                 )\n\nGot our new file name! Let’s write!\n\nreadr::write_csv(DAT, new_name)\n\nDone!"
  },
  {
    "objectID": "modules/10_summarizing_data.html#summarize-across-by-numeric-variables",
    "href": "modules/10_summarizing_data.html#summarize-across-by-numeric-variables",
    "title": "Summarizing Data",
    "section": "Summarize across by numeric variables:",
    "text": "Summarize across by numeric variables:\n\nDAT %&gt;%\n  summarise(., across(.cols = where(is.numeric), \n                      .fns  = ~mean(.x, na.rm = TRUE))\n            )\n\n      time\n1 1309.388\n\n\nWell, that’s now actually impressive because there is only one numeric variable. What if we had more that were piped to summarize()?\n\nDAT %&gt;%\n  mutate(., \n         num1 = time,\n         num2 = time,\n         num3 = time\n         ) %&gt;%\n  summarise(., across(.cols = where(is.numeric), \n                      .fns  = ~mean(.x, na.rm = TRUE))\n            )\n\n      time     num1     num2     num3\n1 1309.388 1309.388 1309.388 1309.388\n\n\nThat was easy.\nBecause across() is so powerful, let’s just add another variable to the data frame for using in examples. You might also wish to reorder the position of variables in the data frame so that they are grouped in some way. We can use dplyr::relocate() to accomplish this. We will move the time column to the position .before one of the new variables using relocate(., time, .before = min).\nDoing so will also show you some ways to create variables.\n\nDAT &lt;- DAT %&gt;%\n  mutate(., \n         sec = time,  # will be redundant with time but named accurately\n         min  = time/60,\n         hour = time/(60*60)\n         ) %&gt;%\n  relocate(., time, .before = sec)\n\nTake a look:\n\nhead(DAT)\n\n              name year   event   team time  sec      min      hour\n1 Jocelyn Crawford 2019 50 FREE Athena 1409 1409 23.48333 0.3913889\n2    Ava Sealander 2022 50 FREE Athena 1411 1411 23.51667 0.3919444\n3        Kelly Ngo 2016 50 FREE Athena 1429 1429 23.81667 0.3969444\n4        Helen Liu 2014 50 FREE Athena 1451 1451 24.18333 0.4030556\n5      Michele Kee 2014 50 FREE Athena 1456 1456 24.26667 0.4044444\n6 Natalia Orbach-M 2020 50 FREE Athena 1457 1457 24.28333 0.4047222\n\n\nVariable names created with across() is controlled using the .names argument. The default is equivalent to .names = {.col}, which means that the name(s) are inherited from the .cols argument; the names are a stand-in for the name specification. If you wish to have control over the names, you can pass a string that that either appends (e.g.,\"{.col}suffix\") or prepends (e.g.,\"prefix{.col}\") a string to each column name. This string looks odd because it’s a special glue specification that glues together with a string with an object. We will use this concept later when using the {glue} library.\nWhen modifying .names, include a character like \"_\" (e.g.,\"{.col}_suffix\") so that the column names and the appended text are separated, making the name easily legible. If you summarize to create means, a good suggestion is something like (e.g.,\"{.col}_mean\" or (e.g.,\"{.col}_mn\")) so that you know the variable is a mean. If you prefer the function name first, you can use a prefix (e.g.,\"mean_{.col}\").\n\nDAT %&gt;%\n  summarise(., across(.cols = c(\"sec\", \"min\", \"hour\"), \n                      .fns  = ~mean(.x, na.rm = TRUE),\n                      .names = \"{.col}_mean\"\n                      )\n            )\n\n  sec_mean min_mean hour_mean\n1 1309.388 21.82313 0.3637189\n\n\nYou can see how all variables in the summary end in \"_mean\".\nYou can also glue the function and the column names together by passing .names = \"{.col}_{.fn}\".\n\nDAT %&gt;%\n  summarise(., across(.cols = c(\"sec\", \"min\", \"hour\"), \n                      .fns  = ~mean(.x, na.rm = TRUE),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            )\n\n     sec_1    min_1    hour_1\n1 1309.388 21.82313 0.3637189\n\n\nYou you will see there is a number that is appended to the variable name. This is because there is only one function passed to .fns. You can pass more using a special object called a list (see ?list). Unlike vectors, elements of lists need not be the same kind. Elements of lists can combinations of characters, numbers, data frames, functions, etc."
  },
  {
    "objectID": "modules/10_summarizing_data.html#passing-multiple-functions-from-a-list-in-across",
    "href": "modules/10_summarizing_data.html#passing-multiple-functions-from-a-list-in-across",
    "title": "Summarizing Data",
    "section": "Passing multiple functions from a list() in across()",
    "text": "Passing multiple functions from a list() in across()\nPassing functions as a list requires a little fancy coding. We will pass two functions as a list so that we can calculate both the mean() and the sd() on the variables passed to across().\nA list is a special object (e.g., container) for which its elements can be different types of objects. Whereas elements of vectors can be only character or only numeric, elements of lists can hold different object. One element can be a numeric vector, another element a data frame, another element a character vector, etc. Many functions used in R will actually return lists for which elements contain different types of objects.\nOK back to two or more functions. If you pass a list() with arguments for the mean and the sd (e.g., list(mean, sd), you can summarize by both. If you want to prevent errors (yes you do) and want to keep the summaries separate (probably so), you can modify .names to pass both the column and the function (e.g., \"{.col}_{.fn}\"). The underscore is not needed here; it only helps with readability of the variables so that you don’t end up with variable names like var1mean but instead var1_mean.\nLet’s pass the summary procedures as a list to include measures of mean and standard deviation for the variables.\n\nDAT %&gt;%\n  summarise(., across(.cols  = c(\"sec\", \"min\", \"hour\"), \n                      .fns   = list(mean, sd),\n                      .names = \"{.col}_{.fn}\")\n            )\n\n     sec_1    sec_2    min_1    min_2    hour_1    hour_2\n1 1309.388 1225.964 21.82313 20.43274 0.3637189 0.3405456\n\n\nWell those are not exactly the names we want but it illustrates how names are created. Because we have two summary functions for each column variable passed to across(), they are enumerated according to the order in the list (e.g., mean then standard deviation).\n\nFixing .names when passing lists to .cols in across()\nEnumeration is not helpful for remembering variable names. There are different ways to do fix this problem, some of which may be better under certain scenarios. You have to determine what approach is best but I’ll lay out some limitations. If you pass only the functions into the list, then when you pass {.fn} to .names, the variable names in the returned data frame will take on a numeric value representing the order/element position of the functions as you entered them in the list. In this coding instance, means would be named with\"_1\" and standard deviation names with \"_2\". This approach, however, leads to confusing variable names because you have to remember which is 1 and which is 2 and of course explain this to anyone with whom you share the data. Let’s take a look.\nA better approach could be to assign the mean and sd functions their own names in the list() function call. By doing so, the name is appended and the new variable is named meaningfully.\nLet’s modify what we pass to .fns by passing a list containing 3 functions (e.g., mean(), sd(), and length()) and give each there name. I know this part is confusing because the () are dropped inside the list. This is just how R works. Don’t blame the messenger.\n\nDAT %&gt;%\n  summarise(., across(.cols = c(\"sec\", \"min\", \"hour\"), \n                      .fns  = list(mean = mean, \n                                   sd = sd,\n                                   n = length\n                                   ),\n                      .names = \"{.col}_{.fn}\")\n            )\n\n  sec_mean   sec_sd sec_n min_mean   min_sd min_n hour_mean   hour_sd hour_n\n1 1309.388 1225.964   440 21.82313 20.43274   440 0.3637189 0.3405456    440\n\n\nImportantly, however, certain functions like mean() will operate in ways you might not expect. One one hand, it does what we expect when all elements can be used to calculate the mean.\n\nmean(DAT$time)\n\n[1] 1309.388\n\n\nOn the other hand, if there is a missing value, it does not computer the mean but instead something else. Let’s add an NA to the vector using c() to see what happens.\n\nmean(c(DAT$time, NA))\n\n[1] NA\n\n\n\nUnderstanding NAs when passing lists to .cols in across()\nThe mean() function returns NA rather than a mean. If there is just one NA, mean() returns NA. By design this is actually good.\nLet’s also try sd() for the standard deviation of a vector:\n\nsd(c(DAT$time, NA))\n\n[1] NA\n\n\nThe median of a vector, median():\n\nmedian(c(DAT$time, NA))\n\n[1] NA\n\n\nThe length of a vector, length():\n\nlength(c(DAT$time, NA))\n\n[1] 441\n\n\nWell, that’s interesting. By default length() will return the number of elements of the vector including NAs but by default mean() will not return the mean of a vector with NAs because na.rm = FALSE by default. If you wish to calculate the mean by removing the NAs, pass na.rm = TRUE.\n\nmean(c(DAT$time, NA), na.rm = T)\n\n[1] 1309.388\n\n\nMake note, however, that the length of this vector without NAs is shorter than the length with NAs. We can test this hypothesis on a vector with and without the NA by using na.omit() to omit any of them. Using our vector we added an NA, let’s omit it.\n\nna.omit(c(DAT$time, NA))\n\n  [1] 1409.00 1411.00 1429.00 1451.00 1456.00 1457.00 1457.00 1467.00 1473.00\n [10] 1442.00 3065.00 3084.00 3101.00 3116.00 3116.00 3148.00 3125.00 3125.00\n [19] 3134.00 3137.00  110.30  111.89  112.40  112.55  112.57  112.67  112.80\n [28]  112.83  112.88  112.89  297.37  299.22  299.78  300.06  300.21  300.47\n [37]  301.17  301.99  302.16  302.23  614.33  615.40  622.59  622.84  624.14\n [46]  624.82  626.34  626.89  633.15  636.60 1018.48 1023.21 1026.78 1029.09\n [55] 1029.26 1032.18 1032.46 1033.58 1041.98 1044.49 3366.00 3367.00 3391.00\n [64] 3371.00 3434.00 3443.00 3438.00 3456.00 3467.00 3476.00  119.91  122.10\n [73]  123.73  123.85  123.92  125.10  125.56  125.71  125.76  126.13   61.84\n [82]   63.28   63.51   63.91   64.16   64.19   64.65   64.66   64.77   64.94\n [91]  134.83  135.62  138.99  139.06  139.78  140.01  141.17  141.77  142.34\n[100]  142.83 3316.00 3332.00 3333.00 3323.00 3374.00 3364.00 3387.00 3402.00\n[109] 3407.00 3416.00  121.84  122.58  123.80  124.05  124.42  124.81  126.40\n[118]  127.12  127.33  127.42  120.69  123.59  123.79  124.74  125.41  126.82\n[127]  127.12  127.14  127.81  127.94 1389.00 1412.00 1413.00 1415.00 1407.00\n[136] 1411.00 1413.00 1418.00 1425.00 1427.00 3065.00 3067.00 3092.00 3079.00\n[145] 3087.00 3088.00 3089.00 3097.00 3105.00 3116.00  110.91  110.98  111.39\n[154]  111.41  111.56  111.64  111.95  112.53  112.78  113.04  255.73  267.18\n[163]  270.33  270.77  271.96  272.45  272.57  272.68  274.16  274.27 1594.00\n[172] 1582.00 1588.00 1617.00 1642.00 1650.00 1634.00 1634.00 1636.00 1637.00\n[181] 1713.00 1776.00 1745.00 1746.00 1749.00 1749.00 1764.00 1766.00 1786.00\n[190] 1795.00 1445.00 1468.00 1498.00 1499.00 1505.00 1525.00 1505.00 1508.00\n[199] 1524.00 1534.00 3305.00 3321.00 3331.00 3311.00 3313.00 3325.00 3327.00\n[208] 3345.00 3362.00 3381.00   61.10   62.88   62.89   63.67   64.10   64.16\n[217]   64.24   64.26   64.35   64.43 1238.00 1221.00 1222.00 1236.00 1251.00\n[226] 1265.00 1269.00 1271.00 1279.00 1282.00 2646.00 2661.00 2713.00 2734.00\n[235] 2724.00 2731.00 2732.00 2745.00 2750.00 2750.00   98.35   98.88   99.07\n[244]   99.35   99.63   99.80   99.82  100.30  100.31  100.50  265.67  268.11\n[253]  268.89  269.32  271.64  272.52  272.65  272.94  272.98  274.70  554.11\n[262]  564.43  575.78  576.64  579.27  580.02  581.48  585.72  586.63  587.09\n[271]  917.24  932.19  945.57  947.40  952.94  953.75  956.57  957.89  962.45\n[280]  963.38 2859.00 2877.00 2972.00 3037.00 3003.00 3029.00 3035.00 3041.00\n[289] 3051.00 3059.00  105.05  105.67  106.51  108.84  109.01  109.38  110.32\n[298]  110.43  111.07  111.57 3328.00 3380.00 3392.00 3363.00 3387.00 3395.00\n[307] 3396.00 3405.00 3409.00 3409.00  119.90  121.18  121.45  121.60  121.66\n[316]  121.77  121.78  122.89  123.19  123.23 2865.00 2876.00 2900.00 2954.00\n[325] 2971.00 2966.00 2971.00 2974.00 3008.00 3014.00  103.96  108.70  109.24\n[334]  109.95  109.96  110.34  110.47  110.49  110.51  110.76  106.97  108.74\n[343]  109.74  110.51  110.78  111.11  111.24  111.48  111.82  111.83 1187.00\n[352] 1203.00 1236.00 1208.00 1210.00 1214.00 1218.00 1222.00 1225.00 1228.00\n[361] 2608.00 2649.00 2654.00 2683.00 2697.00 2699.00 2721.00 2721.00 2723.00\n[370] 2727.00   97.98   98.49   99.09   99.19   99.66  100.21  100.22  100.44\n[379]  100.70  100.70  235.61  236.68  236.88  239.02  239.13  239.17  240.63\n[388]  241.14  242.38  242.99 1352.00 1370.00 1404.00 1380.00 1404.00 1425.00\n[397] 1452.00 1454.00 1465.00 1467.00 1513.00 1521.00 1528.00 1510.00 1520.00\n[406] 1547.00 1555.00 1563.00 1561.00 1565.00 1260.00 1298.00 1308.00 1318.00\n[415] 1320.00 1341.00 1343.00 1320.00 1326.00 1327.00 2821.00 2892.00 2919.00\n[424] 2930.00 2934.00 2962.00 2940.00 2985.00 2992.00 3000.00 3292.00 3315.00\n[433] 3321.00 3347.00 3362.00 3364.00 3373.00 3379.00 3395.00 3408.00\nattr(,\"na.action\")\n[1] 441\nattr(,\"class\")\n[1] \"omit\"\n\n\nAnd then get the length when NAs are omitted:\n\nlength(na.omit(c(DAT$time, NA)))\n\n[1] 440\n\n\nThis behavior is important because if you want to obtain the mean of a variable with NAs and the sample size using length(), your sample size will be inaccurate.\nIn order to see these operations on a data frame and in the context of dplyr::summarize(), let’s modify the data frame to include an additional row with some mission values. One simple approach is to use base R to use rbind() to bind a new row to the end of the data frame. In this case, the contents of that new row will be the same as the first row of the data frame (e.g., DAT[1,]). Then the name will be changed and some values will be made missing.\n\nDAT &lt;- rbind(DAT, \n             DAT[1,]\n             )\n\nModify the cells in the data frame using bracket notation from base R. When using brackets, the data frame can be referenced using row and column arguments.\nExamples:\nDAT[]       # all rows and columns\n\nDAT[,]      # all rows and columns (preferred separation with comma)\n\nDAT[1, ]    # row 1, all columns\n\nDAT[,1]     # all rows, column 1\n\nDAT[1:5, \"name\"]    # rows 1 through 5, \"name\" column\n\nDAT[, c(\"name\", \"year\"]    # all rows, \"name\" and \"year\" columns\n\nDAT[15, \"name\"]    # row 15 through 5, \"name\" column\nYou can also obtain the dimensions of a data frame using dim() from base R.\n\ndim(DAT)\n\n[1] 441   8\n\n\ndim() returns a vector with two elements: the number of rows and the number of columns. We can use this to reference the last row in the data frame in order to modify it for this example.\nFollowing from above, examine the last row, change the \"name\" to “Anonymous” and then put NAs in the \"sec\" and \"min\" columns for the same row. Remember, vectors are pure characters or numeric, they cannot contain a mixture of them. Because \"name\" is character vector and \"sec\" and \"min\" are numeric vectors, we need to fix them separately. There are other ways to accomplish this goal but this example illustrates the approach in base R so that you have some exposure.\n\nDAT[dim(DAT)[1], ]                              # the current row contents\n\n                name year   event   team time  sec      min      hour\n441 Jocelyn Crawford 2019 50 FREE Athena 1409 1409 23.48333 0.3913889\n\nDAT[dim(DAT)[1], \"name\"] &lt;- \"Anonymous\"         # make name anonymous\n\nDAT[dim(DAT)[1], c(\"sec\", \"min\")] &lt;- c(NA, NA)  # set these cells to NA\n\nAre NAs across the last row now?\n\nDAT %&gt;% tail()\n\n             name year               event   team time  sec      min      hour\n436 Aaron Lutzker 2019 100 BRST-Relay Spl.   Stag 3364 3364 56.06667 0.9344444\n437  Sean Hoerger 2020 100 BRST-Relay Spl.   Stag 3373 3373 56.21667 0.9369444\n438   Tyler Welty 2017 100 BRST-Relay Spl.   Stag 3379 3379 56.31667 0.9386111\n439  Brad Perfect 2013 100 BRST-Relay Spl.   Stag 3395 3395 56.58333 0.9430556\n440  Grant Murray 2018 100 BRST-Relay Spl.   Stag 3408 3408 56.80000 0.9466667\n441     Anonymous 2019             50 FREE Athena 1409   NA       NA 0.3913889\n\n\n\n\nComparing some functionality when passing lists to .cols in across()\nWhen functions do not contain argument for dealing with NAs, there is na.omit(), a function that takes an object and removes NAs. So you can just pass the variable to na.omit() and then wrap it in the metric function of interest. Also, because na.rm = T cannot be used for length(), na.omit() offers consistency across all functions and as a result, I believe, less confusion.\nUnfortunately, accomplishing this task can be rather tricky and requires some new syntax. This requires usage of what’s called a “lambda” technique. You will want to incorporate ~ and .x into your code. The ~ is used to indicate that you are supplying a lambda function and use of .x is to indicate where the variable in across() is used. Using this type of syntax, we can pass functions to the .fns argument that operate across a set of variables. The ?across() documentation calls this “a {purrr}-style lambda” in the arguments section. This approach can be a little bit confusing, so I’m going to show you an example, and then walk through it step by step. You can always create code snippets so you don’t have to rely on memory write complicated code like this.\nAnyway, we will precede the function with ~ and reference the vector using .x. Let’s do this and change the .fns argument slightly.\nHere is a general example:\nname = ~function(na.omit(.x))\nWe will summarize only time and sec because those variables are identical except for the row we added. We will also add dplyr::n() to see what’s going on with that function.\n\nDAT %&gt;%\n  summarise(., across(.cols = c(\"time\", \"sec\"), \n                      .fns  = list(mean = ~mean(na.omit(.x)),\n                                   #sd = ~sd(na.omit(.x)),\n                                   len = ~length(na.omit(.x)),\n                                   n = ~dplyr::n()\n                                   ),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n  time_mean time_len time_n sec_mean sec_len sec_n\n1  1309.614      441    441 1309.388     440   441\n\n\nSo what happened? The means and lengths for time and sec are not the same. Means differ because they are calculated by different values depending on the presence of NAs. But notice that the n’s are the same based on dplyr::n(). How can the means and differ if the n’s are the same?\nSo what’s the point of all of this? Well, you need to be careful not to apply functions and assume they are doing what you believe you are doing. You always need to be smarter than the code you use. Also, there is no single answer for dealing with data. Sometimes one approach will be appropriate and in other instances another approach will be. You as the data scientist need to know that there are different methods so that you an decide where to apply those different methods."
  },
  {
    "objectID": "modules/10_summarizing_data.html#summarize-by-groups-using-group_by",
    "href": "modules/10_summarizing_data.html#summarize-by-groups-using-group_by",
    "title": "Summarizing Data",
    "section": "Summarize by Groups Using group_by()",
    "text": "Summarize by Groups Using group_by()\n\nIdentifying how to group\nWhen you have subgroups in your data, you will often want to create summary statistics by those group levels. A typical grouping approach is by some categorical or factor variable present in a data frame. Using glympse(), we can view all variables to see what might be of interest.\n\nglimpse(DAT)\n\nRows: 441\nColumns: 8\n$ name  &lt;chr&gt; \"Jocelyn Crawford\", \"Ava Sealander\", \"Kelly Ngo\", \"Helen Liu\", \"…\n$ year  &lt;chr&gt; \"2019\", \"2022\", \"2016\", \"2014\", \"2014\", \"2020\", \"2020\", \"2010\", …\n$ event &lt;chr&gt; \"50 FREE\", \"50 FREE\", \"50 FREE\", \"50 FREE\", \"50 FREE\", \"50 FREE\"…\n$ team  &lt;chr&gt; \"Athena\", \"Athena\", \"Athena\", \"Athena\", \"Athena\", \"Athena\", \"Ath…\n$ time  &lt;dbl&gt; 1409.00, 1411.00, 1429.00, 1451.00, 1456.00, 1457.00, 1457.00, 1…\n$ sec   &lt;dbl&gt; 1409.00, 1411.00, 1429.00, 1451.00, 1456.00, 1457.00, 1457.00, 1…\n$ min   &lt;dbl&gt; 23.483333, 23.516667, 23.816667, 24.183333, 24.266667, 24.283333…\n$ hour  &lt;dbl&gt; 0.39138889, 0.39194444, 0.39694444, 0.40305556, 0.40444444, 0.40…\n\n\nLooks like some factor variables we can group by include name, year, event, and team."
  },
  {
    "objectID": "modules/10_summarizing_data.html#summarize-a-one-specific-variable-by-groups-using-group_by",
    "href": "modules/10_summarizing_data.html#summarize-a-one-specific-variable-by-groups-using-group_by",
    "title": "Summarizing Data",
    "section": "Summarize A (one) Specific Variable by Groups Using group_by()",
    "text": "Summarize A (one) Specific Variable by Groups Using group_by()\n\nA single summary metric\nPerhaps you only want to obtain the mean() or the sum() or the sd() for a variable. If so, this is easiest.\n\nGrouping by one variable:\nThe data in cms-top-all-time-2023-swim.xlsx contain the top records for swimming events. You might be curious what year was the best of all time or what swimmer (e.g., name) has attained the most records of all time. There are different ways to accomplish this goal.\nOne approach that might be the most straight forward to new programmers is to mutate a constant count variable on each row which can be used to sum the counts for different groups.\n\nDAT %&gt;%\n  mutate(., count = 1) %&gt;%         # mutate a new variable where all rows get a 1\n  group_by(., name) %&gt;%            # group by the swimmer name\n  summarise(., count = sum(count)) # sum the count and assign it the name count\n\n# A tibble: 142 × 2\n   name            count\n   &lt;chr&gt;           &lt;dbl&gt;\n 1 A Breazeale         8\n 2 A Roeseler          2\n 3 Aaron Lutzker       6\n 4 Abel Sapirstein     1\n 5 Alec Vercruysse     4\n 6 Alex Mendoza        2\n 7 Alex Poltash        6\n 8 Allyson Yao         3\n 9 Amy Fuller          1\n10 Andrew Cox          4\n# ℹ 132 more rows\n\n\nBy default, the data frame is arranged by the grouping variable (e.g., name). We can change the order of the rows by count using arrange() but this function by default sorts in an ascending manner. If you want a descending sorting, pass count to desc() to arrange the data frame in this way. We can also assign it to an object.\n\nNAME_count &lt;- DAT %&gt;%\n  mutate(., count = 1) %&gt;%\n  group_by(., name) %&gt;%\n  summarise(., count = sum(count)) %&gt;%\n  arrange(., desc(count))\n\n\nNAME_count\n\n# A tibble: 142 × 2\n   name          count\n   &lt;chr&gt;         &lt;dbl&gt;\n 1 Michele Kee      11\n 2 Augusta Lewis    10\n 3 Matt Williams    10\n 4 Kelly Ngo         9\n 5 A Breazeale       8\n 6 Ava Sealander     8\n 7 Gary Simon        8\n 8 Marco Conati      8\n 9 Nic Tekieli       7\n10 Aaron Lutzker     6\n# ℹ 132 more rows\n\n\nWe can see that the top counts of all time are by Michele Kee for a total of 11. Kudos to Michele!\n\nYEAR_count &lt;- DAT %&gt;%\n  mutate(., count = 1) %&gt;%\n  group_by(., year) %&gt;%\n  summarise(., count = sum(count)) %&gt;%\n  arrange(., desc(count))\n\n\nYEAR_count\n\n# A tibble: 32 × 2\n   year  count\n   &lt;chr&gt; &lt;dbl&gt;\n 1 2022     81\n 2 2023     59\n 3 2020     41\n 4 2017     38\n 5 2014     27\n 6 2019     23\n 7 2013     22\n 8 2015     20\n 9 2016     17\n10 2018     16\n# ℹ 22 more rows\n\n\nWe can see that the year with the most best are by 2022 for a total of 81. Hooray for 2022!\n\n\nGrouping by two or more variables:\nWe can also summarize both the teams as well in order to see the top swimmer by team. If you want to summarize more than one variable, pass them both in group_by():\n\nTEAM_NAME_count &lt;- DAT %&gt;%\n  mutate(., count = 1) %&gt;%\n  group_by(., team, name) %&gt;%\n  summarise(., count = sum(count)) %&gt;%\n  arrange(., desc(count))\n\n`summarise()` has grouped output by 'team'. You can override using the\n`.groups` argument.\n\n\n\nTEAM_NAME_count\n\n# A tibble: 142 × 3\n# Groups:   team [2]\n   team   name          count\n   &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;\n 1 Athena Michele Kee      11\n 2 Athena Augusta Lewis    10\n 3 Stag   Matt Williams    10\n 4 Athena Kelly Ngo         9\n 5 Athena Ava Sealander     8\n 6 Stag   A Breazeale       8\n 7 Stag   Gary Simon        8\n 8 Stag   Marco Conati      8\n 9 Stag   Nic Tekieli       7\n10 Athena Ella Blake        6\n# ℹ 132 more rows\n\n\n\n\nFiltering rows and then grouping by one variable:\nFor Athenas:\n\nATHENA_NAME_count &lt;- DAT %&gt;%\n  mutate(., count = 1) %&gt;%\n  filter(., team == \"Athena\") %&gt;%\n  group_by(., name) %&gt;%\n  summarise(., count = sum(count)) %&gt;%\n  arrange(., desc(count))\n\n\nATHENA_NAME_count\n\n# A tibble: 67 × 2\n   name               count\n   &lt;chr&gt;              &lt;dbl&gt;\n 1 Michele Kee           11\n 2 Augusta Lewis         10\n 3 Kelly Ngo              9\n 4 Ava Sealander          8\n 5 Ella Blake             6\n 6 Jamee Mitchum          6\n 7 Katie Bilotti          6\n 8 Mackenzie Mayfield     6\n 9 Annika Jessen          5\n10 Jocelyn Crawford       5\n# ℹ 57 more rows\n\n\nWe can see that the top counts of all time are by Michele Kee with a total of 11. Nice work Michele!\nAnd for Stags:\n\nSTAG_NAME_count &lt;- DAT %&gt;%\n  mutate(., count = 1) %&gt;%\n  filter(., team == \"Stag\") %&gt;%\n  group_by(., name) %&gt;%\n  summarise(., count = sum(count)) %&gt;%\n  arrange(., desc(count))\n\n\nSTAG_NAME_count\n\n# A tibble: 75 × 2\n   name          count\n   &lt;chr&gt;         &lt;dbl&gt;\n 1 Matt Williams    10\n 2 A Breazeale       8\n 3 Gary Simon        8\n 4 Marco Conati      8\n 5 Nic Tekieli       7\n 6 Aaron Lutzker     6\n 7 Alex Poltash      6\n 8 Blake Weber       6\n 9 Sam Willett       5\n10 Tom Harrison      5\n# ℹ 65 more rows\n\n\nWe can see that the top counts of all time are by Matt Williams with 10. Go Matt!\nTo wrap up this example, sometimes working with separate data frames using filter() can provide more useful or manageable summaries.Perhaps you only want to obtain the mean() or the sum() or the sd() for a single variable. If so, this approach may be easiest.\nIf you are curious, here is a story covering “How CMS teams became the Stags and Athenas”.\n\n\n\nMultiple summary metrics\nSometimes you need more than one summary statistic, for example, the mean() and the sd(). This is a little more complex to code.\nNote: In these code blocks, some arguments may be removed for readability.\n\nGrouping by one variable:\n\nDAT %&gt;%\n  group_by(., event) %&gt;%\n  summarise(., \n            sec_mean = mean(sec, na.rm = T),  \n            sec_median = median(sec, na.rm = T)\n            )\n\n# A tibble: 22 × 3\n   event               sec_mean sec_median\n   &lt;chr&gt;                  &lt;dbl&gt;      &lt;dbl&gt;\n 1 100 BACK               3209.      3212.\n 2 100 BREAST             1725.      1696.\n 3 100 BRST-Relay Spl.    1710.      1678.\n 4 100 FLY                3158.      3165 \n 5 100 FLY-Relay Spl.     3135.      3152.\n 6 100 FREE               2917.      2908.\n 7 100 FREE-Relay Spl.    2888.      2896 \n 8 1000 FREE               601.       601.\n 9 1650 FREE               990.       991.\n10 200 BACK                116.       116.\n# ℹ 12 more rows\n\n\nWe can also write the summary functions as a list inside across() along with passing .names = \"{.col}_{.fn}\" if you want the variables named automatically. This approach is more complex but is more flexible.\nWhen you want to summarize across multiple variables using a list of functions, you will want to make sure your .fns argument passes a function using a {purrr}-style lambda (e.g.,~) for that the function is applied across the variables. You will also want to edit .names = \"{.col}_{.fn}\" so that the naming is done automatically rather than hard coding the names.\n\nDAT %&gt;%\n  group_by(., event) %&gt;%\n  summarise(., across(.cols = \"sec\",\n                      .fns  = list(mean = ~mean(na.omit(.x)),\n                                   median = ~median(na.omit(.x))\n                                   ),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n# A tibble: 22 × 3\n   event               sec_mean sec_median\n   &lt;chr&gt;                  &lt;dbl&gt;      &lt;dbl&gt;\n 1 100 BACK               3209.      3212.\n 2 100 BREAST             1725.      1696.\n 3 100 BRST-Relay Spl.    1710.      1678.\n 4 100 FLY                3158.      3165 \n 5 100 FLY-Relay Spl.     3135.      3152.\n 6 100 FREE               2917.      2908.\n 7 100 FREE-Relay Spl.    2888.      2896 \n 8 1000 FREE               601.       601.\n 9 1650 FREE               990.       991.\n10 200 BACK                116.       116.\n# ℹ 12 more rows\n\n\n\n\nGrouping by two or more variables:\n\nDAT %&gt;%\n  group_by(., event, team) %&gt;%\n  summarise(., \n            sec_mean = mean(sec, na.rm = T),  \n            sec_median = median(sec, na.rm = T)\n            )\n\n`summarise()` has grouped output by 'event'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 44 × 4\n# Groups:   event [22]\n   event               team   sec_mean sec_median\n   &lt;chr&gt;               &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 100 BACK            Athena   3421.      3436  \n 2 100 BACK            Stag     2996.      3032  \n 3 100 BREAST          Athena     64.0       64.2\n 4 100 BREAST          Stag     3386.      3394. \n 5 100 BRST-Relay Spl. Athena     63.6       64.1\n 6 100 BRST-Relay Spl. Stag     3356.      3363  \n 7 100 FLY             Athena   3365.      3369  \n 8 100 FLY             Stag     2950.      2968. \n 9 100 FLY-Relay Spl.  Athena   3332.      3326  \n10 100 FLY-Relay Spl.  Stag     2938.      2937  \n# ℹ 34 more rows\n\n\nOr pass the list:\n\nDAT %&gt;%\n  group_by(., event, team) %&gt;%\n  summarise(., across(.cols = \"sec\",\n                      .fns  = list(mean = ~mean(na.omit(.x)),\n                                   median = ~median(na.omit(.x))\n                                   ),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n`summarise()` has grouped output by 'event'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 44 × 4\n# Groups:   event [22]\n   event               team   sec_mean sec_median\n   &lt;chr&gt;               &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 100 BACK            Athena   3421.      3436  \n 2 100 BACK            Stag     2996.      3032  \n 3 100 BREAST          Athena     64.0       64.2\n 4 100 BREAST          Stag     3386.      3394. \n 5 100 BRST-Relay Spl. Athena     63.6       64.1\n 6 100 BRST-Relay Spl. Stag     3356.      3363  \n 7 100 FLY             Athena   3365.      3369  \n 8 100 FLY             Stag     2950.      2968. \n 9 100 FLY-Relay Spl.  Athena   3332.      3326  \n10 100 FLY-Relay Spl.  Stag     2938.      2937  \n# ℹ 34 more rows"
  },
  {
    "objectID": "modules/10_summarizing_data.html#summarizing-multiple-variables-by-groups-using-group_by",
    "href": "modules/10_summarizing_data.html#summarizing-multiple-variables-by-groups-using-group_by",
    "title": "Summarizing Data",
    "section": "Summarizing Multiple Variables by Groups Using group_by()",
    "text": "Summarizing Multiple Variables by Groups Using group_by()\nSo far, we have shown how to summarize a single variable either with or without grouping by levels of another variable. Summaries, however, are often done for multiple variables in data frame. For example, you might want to obtain the mean() for multiple variables or obtain the mean() and the max() (or some other summary statistic) for multiple variables. The following examples prepare you for such tasks.\n\nA single summary metric\n\nGrouping by one variable:\n\nDAT %&gt;%\n  group_by(., event) %&gt;%\n  summarise(., across(.cols = c(\"sec\", \"min\"),\n                      .fns = ~mean(.x, na.rm = T),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n# A tibble: 22 × 3\n   event               sec_1 min_1\n   &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt;\n 1 100 BACK            3209. 53.5 \n 2 100 BREAST          1725. 28.8 \n 3 100 BRST-Relay Spl. 1710. 28.5 \n 4 100 FLY             3158. 52.6 \n 5 100 FLY-Relay Spl.  3135. 52.2 \n 6 100 FREE            2917. 48.6 \n 7 100 FREE-Relay Spl. 2888. 48.1 \n 8 1000 FREE            601. 10.0 \n 9 1650 FREE            990. 16.5 \n10 200 BACK             116.  1.94\n# ℹ 12 more rows\n\n\n\n\nGrouping by two or more variables:\n\nDAT %&gt;%\n  group_by(., event, team) %&gt;%\n  summarise(., across(.cols = c(\"sec\", \"min\"),\n                      .fns = ~mean(.x, na.rm = T),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n`summarise()` has grouped output by 'event'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 44 × 4\n# Groups:   event [22]\n   event               team    sec_1 min_1\n   &lt;chr&gt;               &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 100 BACK            Athena 3421.  57.0 \n 2 100 BACK            Stag   2996.  49.9 \n 3 100 BREAST          Athena   64.0  1.07\n 4 100 BREAST          Stag   3386.  56.4 \n 5 100 BRST-Relay Spl. Athena   63.6  1.06\n 6 100 BRST-Relay Spl. Stag   3356.  55.9 \n 7 100 FLY             Athena 3365.  56.1 \n 8 100 FLY             Stag   2950.  49.2 \n 9 100 FLY-Relay Spl.  Athena 3332.  55.5 \n10 100 FLY-Relay Spl.  Stag   2938.  49.0 \n# ℹ 34 more rows\n\n\n\n\n\nMultiple summary metrics\nAnd if you need to summarize using multiple metrics, then pass the list into .fns:\n\nGrouping by one variable:\n\nDAT %&gt;%\n  group_by(., event) %&gt;%\n  summarise(., across(.cols = c(\"sec\", \"min\"),\n                      .fns  = list(mean = ~mean(na.omit(.x)),\n                                   median = ~median(na.omit(.x))\n                                   ),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n# A tibble: 22 × 5\n   event               sec_mean sec_median min_mean min_median\n   &lt;chr&gt;                  &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 100 BACK               3209.      3212.    53.5       53.5 \n 2 100 BREAST             1725.      1696.    28.8       28.3 \n 3 100 BRST-Relay Spl.    1710.      1678.    28.5       28.0 \n 4 100 FLY                3158.      3165     52.6       52.8 \n 5 100 FLY-Relay Spl.     3135.      3152.    52.2       52.5 \n 6 100 FREE               2917.      2908.    48.6       48.5 \n 7 100 FREE-Relay Spl.    2888.      2896     48.1       48.3 \n 8 1000 FREE               601.       601.    10.0       10.0 \n 9 1650 FREE               990.       991.    16.5       16.5 \n10 200 BACK                116.       116.     1.94       1.93\n# ℹ 12 more rows\n\n\n\n\nGrouping by two or more variables:\n\nDAT %&gt;%\n  group_by(., event, team) %&gt;%\n  summarise(., across(.cols = c(\"sec\", \"min\"),\n                      .fns  = list(mean = ~mean(na.omit(.x)),\n                                   median = ~median(na.omit(.x))\n                                   ),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n`summarise()` has grouped output by 'event'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 44 × 6\n# Groups:   event [22]\n   event               team   sec_mean sec_median min_mean min_median\n   &lt;chr&gt;               &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 100 BACK            Athena   3421.      3436      57.0       57.3 \n 2 100 BACK            Stag     2996.      3032      49.9       50.5 \n 3 100 BREAST          Athena     64.0       64.2     1.07       1.07\n 4 100 BREAST          Stag     3386.      3394.     56.4       56.6 \n 5 100 BRST-Relay Spl. Athena     63.6       64.1     1.06       1.07\n 6 100 BRST-Relay Spl. Stag     3356.      3363      55.9       56.0 \n 7 100 FLY             Athena   3365.      3369      56.1       56.2 \n 8 100 FLY             Stag     2950.      2968.     49.2       49.5 \n 9 100 FLY-Relay Spl.  Athena   3332.      3326      55.5       55.4 \n10 100 FLY-Relay Spl.  Stag     2938.      2937      49.0       49.0 \n# ℹ 34 more rows\n\n\nDepends on the order in group_by(), so change the order:\n\nDAT %&gt;%\n  group_by(., team, event) %&gt;%\n  summarise(., across(.cols = \"sec\",\n                      .fns  = list(mean = ~mean(na.omit(.x)),\n                                   n = ~length(na.omit(.x))\n                                   ),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n`summarise()` has grouped output by 'team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 44 × 4\n# Groups:   team [2]\n   team   event               sec_mean sec_n\n   &lt;chr&gt;  &lt;chr&gt;                  &lt;dbl&gt; &lt;int&gt;\n 1 Athena 100 BACK              3421.     10\n 2 Athena 100 BREAST              64.0    10\n 3 Athena 100 BRST-Relay Spl.     63.6    10\n 4 Athena 100 FLY               3365.     10\n 5 Athena 100 FLY-Relay Spl.    3332.     10\n 6 Athena 100 FREE              3115.     10\n 7 Athena 100 FREE-Relay Spl.   3088.     10\n 8 Athena 1000 FREE              625.     10\n 9 Athena 1650 FREE             1031.     10\n10 Athena 200 BACK               124.     10\n# ℹ 34 more rows\n\n\nNotice the change in the order of the column variables. But remember, you can change the order later using select() and/or relocate()."
  },
  {
    "objectID": "modules/10_summarizing_data.html#summarizing-multiple-variables-with-reference-by-name",
    "href": "modules/10_summarizing_data.html#summarizing-multiple-variables-with-reference-by-name",
    "title": "Summarizing Data",
    "section": "Summarizing Multiple Variables With Reference by Name`",
    "text": "Summarizing Multiple Variables With Reference by Name`\n\nVariables that are numeric\nYou can also pass variables that are a certain type, like numeric.\n\nDAT %&gt;%\n  group_by(., team, event) %&gt;%\n  summarise(., across(.cols = where(is.numeric), \n                      .fns = ~mean(.x, na.rm = TRUE), \n                      .names = \"{.col}\")\n            )\n\n`summarise()` has grouped output by 'team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 44 × 6\n# Groups:   team [2]\n   team   event                 time    sec   min   hour\n   &lt;chr&gt;  &lt;chr&gt;                &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 Athena 100 BACK            3421.  3421.  57.0  0.950 \n 2 Athena 100 BREAST            64.0   64.0  1.07 0.0178\n 3 Athena 100 BRST-Relay Spl.   63.6   63.6  1.06 0.0177\n 4 Athena 100 FLY             3365.  3365.  56.1  0.935 \n 5 Athena 100 FLY-Relay Spl.  3332.  3332.  55.5  0.926 \n 6 Athena 100 FREE            3115.  3115.  51.9  0.865 \n 7 Athena 100 FREE-Relay Spl. 3088.  3088.  51.5  0.858 \n 8 Athena 1000 FREE            625.   625.  10.4  0.174 \n 9 Athena 1650 FREE           1031.  1031.  17.2  0.286 \n10 Athena 200 BACK             124.   124.   2.07 0.0345\n# ℹ 34 more rows\n\n\n\n\nVariables by pattern match\nThis approach is fun, especially if you have already named variables in ways that make selection really useful. This data frame is constrained a bit so the examples may be silly.\n\nUsing starts_with()\n\nDAT %&gt;%\n  group_by(., team, event) %&gt;%\n  summarise(., across(.cols = starts_with(\"t\"),\n                      .fns  = list(mean = ~mean(na.omit(.x)),\n                                   n = ~length(na.omit(.x))\n                                   ),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n`summarise()` has grouped output by 'team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 44 × 4\n# Groups:   team [2]\n   team   event               time_mean time_n\n   &lt;chr&gt;  &lt;chr&gt;                   &lt;dbl&gt;  &lt;int&gt;\n 1 Athena 100 BACK               3421.      10\n 2 Athena 100 BREAST               64.0     10\n 3 Athena 100 BRST-Relay Spl.      63.6     10\n 4 Athena 100 FLY                3365.      10\n 5 Athena 100 FLY-Relay Spl.     3332.      10\n 6 Athena 100 FREE               3115.      10\n 7 Athena 100 FREE-Relay Spl.    3088.      10\n 8 Athena 1000 FREE               625.      10\n 9 Athena 1650 FREE              1031.      10\n10 Athena 200 BACK                124.      10\n# ℹ 34 more rows\n\n\n\n\nUsing & for complex selection\nYou obviously cannot calculate numeric metrics for character variables. But how might you select variables that contain a certain character pattern but are also numeric? You cannot nest these functions (e.g., where(is.numeric(contains(\"pattern\")))). You can, however, pass the functions separately.\n\nDAT %&gt;%\n  group_by(., team, event) %&gt;%\n  summarise(., across(.cols = contains(\"e\") & where(is.numeric),\n                      .fns  = list(mean = ~mean(na.omit(.x)),\n                                   n = ~length(na.omit(.x))\n                                   ),\n                      .names = \"{.col}_{.fn}\"\n                      )\n            ) \n\n`summarise()` has grouped output by 'team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 44 × 6\n# Groups:   team [2]\n   team   event               time_mean time_n sec_mean sec_n\n   &lt;chr&gt;  &lt;chr&gt;                   &lt;dbl&gt;  &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 Athena 100 BACK               3421.      10   3421.     10\n 2 Athena 100 BREAST               64.0     10     64.0    10\n 3 Athena 100 BRST-Relay Spl.      63.6     10     63.6    10\n 4 Athena 100 FLY                3365.      10   3365.     10\n 5 Athena 100 FLY-Relay Spl.     3332.      10   3332.     10\n 6 Athena 100 FREE               3115.      10   3115.     10\n 7 Athena 100 FREE-Relay Spl.    3088.      10   3088.     10\n 8 Athena 1000 FREE               625.      10    625.     10\n 9 Athena 1650 FREE              1031.      10   1031.     10\n10 Athena 200 BACK                124.      10    124.     10\n# ℹ 34 more rows"
  },
  {
    "objectID": "modules/10_summarizing_data.html#a-functional-approach",
    "href": "modules/10_summarizing_data.html#a-functional-approach",
    "title": "Summarizing Data",
    "section": "A Functional Approach",
    "text": "A Functional Approach\nYou can also throw your summaries into functions if you wish. We will create a new object that is a function object. We need to give it a name and we need to define arguments to make the function operate. We will want to make sure we have numeric variables.\n\nsummarizer &lt;- function(data, \n                       cols = NULL, \n                       ...\n                       ) {\n  data %&gt;%\n    group_by(...) %&gt;%\n    summarise(., across(.cols = {{cols}} & where(is.numeric),\n                     .fns = list(\n                          mean = ~mean(.x, na.rm = TRUE),\n                          sd   = ~sd(.x, na.rm = TRUE)\n                          ), \n                     .names = \"{col}_{fn}\")\n              )\n}\n\nTest the function:\nWithout grouping:\n\nsummarizer(DAT, cols = contains(\"e\"))\n\n# A tibble: 1 × 4\n  time_mean time_sd sec_mean sec_sd\n      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n1     1310.   1225.    1309.  1226.\n\n\nWith grouping:\n\nsummarizer(DAT, cols = c(min, hour), event)\n\n# A tibble: 22 × 5\n   event               min_mean min_sd hour_mean hour_sd\n   &lt;chr&gt;                  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 100 BACK               53.5   3.76     0.891  0.0626 \n 2 100 BREAST             28.8  28.4      0.479  0.473  \n 3 100 BRST-Relay Spl.    28.5  28.1      0.475  0.469  \n 4 100 FLY                52.6   3.63     0.877  0.0605 \n 5 100 FLY-Relay Spl.     52.2   3.44     0.871  0.0573 \n 6 100 FREE               48.6   3.43     0.810  0.0571 \n 7 100 FREE-Relay Spl.    48.1   3.46     0.802  0.0576 \n 8 1000 FREE              10.0   0.432    0.167  0.00719\n 9 1650 FREE              16.5   0.728    0.275  0.0121 \n10 200 BACK                1.94  0.136    0.0324 0.00227\n# ℹ 12 more rows\n\n\nAnd of course, when you really get excited, you could add functions so that you can perform different metrics. When you are done, you can save your favorite function to a file you can source()."
  },
  {
    "objectID": "modules/08_transforming_data.html",
    "href": "modules/08_transforming_data.html",
    "title": "Transforming Data",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/08_transforming_data.html#readings-and-preparation",
    "href": "modules/08_transforming_data.html#readings-and-preparation",
    "title": "Transforming Data",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/08_transforming_data.html#supplementary-readings",
    "href": "modules/08_transforming_data.html#supplementary-readings",
    "title": "Transforming Data",
    "section": "Supplementary Readings",
    "text": "Supplementary Readings\n\nData Transformation"
  },
  {
    "objectID": "modules/08_transforming_data.html#libraries",
    "href": "modules/08_transforming_data.html#libraries",
    "title": "Transforming Data",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management\n\nRelated:"
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html",
    "href": "modules/06_importing_and_exporting_data.html",
    "title": "Importing and exporting data",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#readings-and-preparation",
    "href": "modules/06_importing_and_exporting_data.html#readings-and-preparation",
    "title": "Importing and exporting data",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#supplementary-readings",
    "href": "modules/06_importing_and_exporting_data.html#supplementary-readings",
    "title": "Importing and exporting data",
    "section": "Supplementary Readings",
    "text": "Supplementary Readings\n\nData ImportR"
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#tidy-files",
    "href": "modules/06_importing_and_exporting_data.html#tidy-files",
    "title": "Importing and exporting data",
    "section": "Tidy Files",
    "text": "Tidy Files\nThere are many sources of data files and data files take many forms and are structured in different ways. They can be tidy or they can be messy. Data that are tidy are generally structures as two-dimensional flat files of data neatly arranged in rows and columns. Even though data are tidy, the file containing the data can take many forms depending the software creating it or depending on the person using the software to create the file. However the file is created, the file is saved to disk and the format is recognized by a filename extension. Before addressing more about file names, let’s first get the look and feel of different arrangements of data.\nFor example:\nname age iq\nBill 28  130\nJane 35  145\nSal  55  125\nAlthough we will discuss data frames and tibbles later, we can create data frames in base R using the data.frame() function. We would name a variable and then assign the observations/cases as elements of a vector using the combine function, c().\n\ndata.frame(\n  name = c(\"Bill\", \"Jane\", \"Sal\"),\n  age  = c(28, 35, 55), \n  iq   = c(130, 145, 125)\n)\n\n  name age  iq\n1 Bill  28 130\n2 Jane  35 145\n3  Sal  55 125\n\n\nUsing the tribble() function from the {tibble} library, we can also create a special type of data frame known as a tibble. For tibbles, the arrangement of data is similar to how the data would appear in a file – variables as columns and cases as rows.\n\ntibble::tribble(\n  ~name, ~age, ~iq,\n  \"Bill\", 28, 130,\n  \"Jane\", 35, 145,\n  \"Sal\", 55, 125\n  )\n\n# A tibble: 3 × 3\n  name    age    iq\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Bill     28   130\n2 Jane     35   145\n3 Sal      55   125\n\n\n\nWide-Format Tidy Files\nThe organization of those variables and observations, however, can change based on the person or system creating them or based on an analytics software’s expectations for working with those values. In many instances, columns of data sets represent variables and the rows represent the cases/observations. SPSS for example, works with data sets organized in wide-format.\nLet’s work through an example of a wide-format data file. Weight could be an interesting property to measure for tracking a weight-loss program or a body-building program. Weight could be measured weekly or monthly (repeated measures). Let’s say you have measured weight for three or more individuals on three different occasions. In wide-format, the cases correspond to rows and the variables as columns but each measurement is treated as a separate variable combination of weight and time.\n\ntibble::tribble(\n  ~name, ~weight_time1, ~weight_time2, ~weight_time3,\n  \"Bill\", 175, 172, 160,\n  \"Jane\", 135, 130, 131,\n  \"Sal\", 160, 158, 150\n  )\n\n# A tibble: 3 × 4\n  name  weight_time1 weight_time2 weight_time3\n  &lt;chr&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 Bill           175          172          160\n2 Jane           135          130          131\n3 Sal            160          158          150\n\n\n\n\nLong-Format Tidy Files\nR and R libraries generally prefer with data sets organized in long-format. In long-format, the cases still correspond to rows and the variables as columns. The difference is that the repeated measurements of weight are organize as separate rows. Because weight is measure at different time, each measurement of weight is associated explicitly with a new column variable time.\n\ntibble::tribble(\n  ~name, ~time, ~weight, \n  \"Bill\", 1, 175,\n  \"Bill\", 2, 172, \n  \"Bill\", 3, 160,\n  \"Jane\", 1, 135, \n  \"Jane\", 2, 130, \n  \"Jane\", 3, 131,\n  \"Sal\", 1, 160, \n  \"Sal\", 2, 158, \n  \"Sal\", 3, 150\n  ) \n\n# A tibble: 9 × 3\n  name   time weight\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 Bill      1    175\n2 Bill      2    172\n3 Bill      3    160\n4 Jane      1    135\n5 Jane      2    130\n6 Jane      3    131\n7 Sal       1    160\n8 Sal       2    158\n9 Sal       3    150\n\n\nBoth long- and wide-format data files, however, are considered tidy because the data are neatly structured as rows and columns.\n\n\nRearranging Data Files\nDepending on the source of data or the requirement by a client or piece of software, you may sometimes need to rearrange data. For example, you may need to change a wide-formatted file to a long-formatted file or vice versa. For such instances, we will use pivoting functions from {tidyr}."
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#filename-extensions",
    "href": "modules/06_importing_and_exporting_data.html#filename-extensions",
    "title": "Importing and exporting data",
    "section": "Filename Extensions",
    "text": "Filename Extensions\nA filename extension is the suffix of the filename following the dot/period. For example, .txt is used for text files, .csv for comma-separated values files, .jpg or .png for image files, and .xls or xlsx for MS Excel files among many file types. The extension is used to help understand how the file should be opened (or read) using a program that can understand that file format. To some extent, extensions are arbitrary; you can change the extension of myfile.xlsx to myfile.txt. Changing the extension does not, however, change the format. Thus, extensions are not arbitrary to the extent that you will need a program that reads the file appropriately. The program that tries to read your newly named myfile.txt will assume the file is in a text format because of its new extension and will fail to open the file correctly. Using MS Excel to read the file will open it just fine because Excel understand the saved format.\nSo why does any of this matter? You may have never thought too much about filenames and extensions before. In fact, your computer may not even be set up to display extensions for common file types. Because data scientists deal with files of all different types, knowing these extensions is necessary for reading and writing data files appropriately. If your computer does not show file extensions, I recommend you change your computer settings so that you can see them by following these links for Mac or Windows PC computers.\n\nFilename Extensions for Tidy Files\nTidy data files are often associated with .csv, .tsv, and .xlsx file extensions. If you have worked with various statistics software, you may be familiar with other formats like .sav for SPSS data files, .dta for Stata data files, or .sas7bdat for SAS data files. Knowing the file format will prove exceptionally helpful when trying to read data files. In fact, libraries like {haven} and more extensively {foreign} are dedicated specifically to reading data files into R that have been saved by data analytics software packages such as SPSS, Stata, SAS, Minitab, etc.\n\nComma-Separated Files, .csv\nEven for tidy data arranged neatly in rows and columns, one must know the structure of the data file in order to read the file and make sense of its contents.\nExample 1:\nAssume the following data were saved as a file with a .txt extension. The extension is not very diagnostic of the data structure.\n134 66 2000\n128 60 1985\nDo the two rows of data in the above example represent a single column corresponding to social security numbers or do they represent three columns corresponding to variables like weight, height, and year of birth? Both could be true.\nExample 2a, as comma-separated:\nWhen column values of data are separated by a comma ',', the file type is referred to as comma-separated values:\n134, 66, 2000\n128, 60, 1985\nAssuming the commas separate the variables, R would read the file and assign variable names to the columns. In this example, R tells you that there are 3 variables, which it automatically names, V1, V2, and V3.\n\n\n   V1 V2   V3\n1 134 66 2000\n2 128 60 1985\n\n\nExample 2b, as comma-separated:\n134 66 2000,\n128 60 1985,\nReading the data and telling R that commas separate the variables, R would read the file as:\n\n\n           V1 V2\n1 134 66 2000 NA\n2 128 60 1985 NA\n\n\nR is telling you that there are 2 variables, which it automatically names, V1 and V2. The first variable contains the numbers and the second variable contains NA values (missing values). Two variables are specified because the comma splits the row into two pieces representing two variable columns.\nJust because there are commas in a data file, this does not require that you read the file that way. By reading the same data but now telling R that spaces separate the variables rather than commas, R would read the same file as:\n\n\n   V1 V2    V3\n1 134 66 2000,\n2 128 60 1985,\n\n\nR now tells you that there are 3 variables but the last variable contains the comma. A comma is likely not relevant and would need to be removed as part of data cleaning.\nExample 3, comma-separated with variable headers:\nSome data files can include variable names (also separated by columns) at the top of the file. These are helpful with reading in the columns. The next example show what the file might look like.\nname, age, iq\nBill, 28, 130\nJane, 35, 145\nSal, 55, 125\nWhen R reads the file, useful variable names are displayed.\n\n\n  name age  iq\n1 Bill  28 130\n2 Jane  35 145\n3  Sal  55 125"
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#writing-.csv-files",
    "href": "modules/06_importing_and_exporting_data.html#writing-.csv-files",
    "title": "Importing and exporting data",
    "section": "Writing .csv Files",
    "text": "Writing .csv Files\n\nWriting with write.table()\nTo understand what arguments you need to supply to the function parameters, check the help documentation, help(write.table). This step is relevant if you are trying to understand what a function is doing – don’t just assume you know how a function works.\nArguments:\n\nx: we need an argument for the object to be written\nfile: we need a character string argument naming a file or a connection open for writing (aka the filepath)\nsep: we need a field separator string argument specifying how columns should be separated\n\nThe data frame is DAT3 and the file is the file name along with the file path. How to get the file path? Use {here}. To show that the file extension is not strictly important, we can name the file \"example3.txt\" even though the file format is comma-separated based on passing a comma for the separator parameter, sep = \",\".\n\nwrite.table(x = DAT3,                                  # data frame object\n            file = here::here(\"data\", \"example3.txt\"), # project path + data + filename\n            sep = \",\"                                  # delimiter\n)\n\nWarning: If you specify name only of the file (e.g., file = \"example3.txt\"), the data frame will be written to a default location because no file path was provided along with the file name. So where is that default location? Well it depends and it’s complicated depending on whether you are writing code inside files that are .R or .Rmd. By default, .Rmd files will assume the directory from which the .Rmd file is saved and opened. An .Rmd file, however, if not a data file; it’s an R Markdown file for the default directory will likely be someplace other than /data.\nIf you are organized, you (a) save your .R and .Rmd files in a code directory (e.g., /r) or a report directory (e.g., /reports), (b) save your data files in a /data directory, and (c) are using an RStudio Project. The TLDR is that the default is a problem. The solution is to specify the file path using file = the full file path, which is easy to do using here::here(), so just make this a habit now and save yourself from future headaches.\n\n\nWriting with write.csv()\nLet’s do the same using write.csv(). Again, check the help documentation, help(write.csv).\nArguments:\n\nx: we need an argument for the data frame object to be written\nfile: we need a character string argument naming a file or a connection open for writing (aka the filepath)\nsep: the default is \",\", so we don’t need to supply it\n\nThe data frame is DAT and the file is file name along with the file path Let’s just change the filename extension to \".csv\" so that we don’t overwrite the previous example.\n\nwrite.csv(x = DAT3,\n          file = here::here(\"data\", \"example3.csv\")\n)\n\nNote: If you open this file with an editor on your computer, you will see a new column is added to it by default. This column has no name and each row of the file will contain a number reflecting the row number. Adding row names is the default before for the function. To omit these row numbers when writing your data, add row.names = FALSE. This is a recommendation and I believe good practice if using write.csv().\nExample:\nwrite.csv(x = DAT3,\n          file = here::here(\"data\", \"example3.csv\"),\n          row.names = FALSE\n)\n\n\nWriting with readr::write_csv()\nDespite it’s name, the {readr} library can save data frames too. Interestingly, at least at the time of this writing, {readr} allows you to write files in excel format even though you cannot open them.\nArguments:\n\nx: we need an argument for the data frame object to be written\nfile: we need a character string argument naming a file or a connection open for writing (aka the filepath)\nsep: the default is \",\", so we don’t need to supply it\n\nLet’s now save DAT2a.\n\nreadr::write_csv(x = DAT2a,\n                 file = here::here(\"data\", \"example2a_readr.csv\")\n                 )\n\nNote: Unlike write.csv(), readr::write_csv() does not append the row number to a column."
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#writing-compressed-.rds-files",
    "href": "modules/06_importing_and_exporting_data.html#writing-compressed-.rds-files",
    "title": "Importing and exporting data",
    "section": "Writing Compressed .rds Files",
    "text": "Writing Compressed .rds Files\nSometimes you are dealing with large data sets. Saving large files will take up a lot of disk space. Larger files typically take longer to read as well. A solution is to compress the files. The base R function saveRDS() will be the go-to here. By default, saveRDS() compresses the file. Compression will matter for larger data files.\nAlso, when you manipulate data frames, you may change variable types, create new variables of a certain type, etc. Writing you data out as a .csv file will not preserve these characteristics.\nBecause we have not yet addressed how to create or modify variable columns in data frames, we won’t actually change the data type of the data frame. However, if we modified a data frame and wanted to preserve the data types of the columns, saveRDS() would take care so this for us. When you have many variables to manage, you certainly don’t want to specify whether they are factors, ordered factors, numeric, etc. every time you read the file.\nSome key details of .rds files:\n\ndata are compressed\nread/restore quickly\nspecific characteristics are store in the data (e.g., attributes, variable types, etc).\n\nGive these advantages, we will rely heavily on .rds files once wrangling and cleaning occurs.\nArguments:\n\nobject: we need an argument for the data frame to write\nfile: we need an argument for the data frame to write\n\n\nsaveRDS(object = DAT3,\n        file = here::here(\"data\", \"example3.rds\")\n        )"
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#writing-.xlsx-files",
    "href": "modules/06_importing_and_exporting_data.html#writing-.xlsx-files",
    "title": "Importing and exporting data",
    "section": "Writing .xlsx Files",
    "text": "Writing .xlsx Files\nWe will use {openxlsx} to write Excel files. - openxlsx::write.xlsx()\nArguments:\n\nx: we need an argument for the data frame object to be written\nfile: we need a character string argument naming a file or a connection open for writing (aka the filepath)\n\n\nopenxlsx::write.xlsx(\n  x = DAT3,\n  file = here::here(\"data\", \"example3.xlsx\")\n  )\n\nThis is the simple usage of writing Excel files. You can do more with {openxlsx} like adding worksheets, writing data to certain rows, etc. but this is beyond the scope of these examples. You can find more here."
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#reading-.csv-files",
    "href": "modules/06_importing_and_exporting_data.html#reading-.csv-files",
    "title": "Importing and exporting data",
    "section": "Reading .csv Files",
    "text": "Reading .csv Files\nReading .csv files can be accomplished in a variety of ways, most typically using base R functions or those from {readr}.\n\nBase R:\n\nread.table(file = \"my_filename.csv\", sep = \",\") is a flexible function requiring setting the separator character argument for sep\nread.csv(file = \"my_filename.csv\") is the same as above except that sep = \",\" is * {readr}:\nreadr::read_csv(file = \"my_filename.csv\")\n\n\nNOTE: Another term for the separator is delimiter, so you may see this used in documentation.\n\nReading with read.table()\nArguments:\n\nfile: we need a character string argument naming a file or a connection open for writing (aka the filepath)\nsep: we need an argument for the character used to separate column variables (e.g., \" \", \",\", \"|\", \"\\t\", etc.)\n\nBecause the columns are separated by a comma, set sep = \",\":\n\nread.table(file = here::here(\"data\", \"example3.txt\"),\n           sep = \",\"\n           )\n\n  name age  iq\n1 Bill  28 130\n2 Jane  35 145\n3  Sal  55 125\n\n\n\n\nReading with read.csv()\nThis function is the same as read.table() except the separator has already been set to a comma.\nArguments:\n\nfile: we need a character string argument naming a file or a connection open for writing (aka the filepath)\nsep: already predefined by default\n\n\nread.csv(file = here::here(\"data\", \"example3.txt\"))\n\n  name age  iq\n1 Bill  28 130\n2 Jane  35 145\n3  Sal  55 125\n\n\n\n\nReading with readr::read_csv()\nArgument:\n\nfile: we need a character string argument naming a file or a connection open for writing (aka the filepath)\n\nBecause the columns are separated by a comma, set sep = \",\":\n\nreadr::read_csv(file = here::here(\"data\", \"example2a_readr.csv\"))\n\nRows: 2 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): wt_lbs, ht_in, yob\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 2 × 3\n  wt_lbs ht_in   yob\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1    134    66  2000\n2    128    60  1985\n\n\n\nHandling messages`\nWhen reading with this function, there will be some messaging in the console. One is to examine the column specifications using spec() or specifically readr::spec(). We can .\nspec() has one parameter x, which stands for the data frame. Because the file read is a data frame, we can just wrap the function in spec().\n\nreadr::spec(readr::read_csv(file = here::here(\"data\", \"example2a_readr.csv\")))\n\nRows: 2 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): wt_lbs, ht_in, yob\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\ncols(\n  wt_lbs = col_double(),\n  ht_in = col_double(),\n  yob = col_double()\n)\n\n\nAlternatively, if you read in the data frame and assigned it to an object name, you could call the object name itself as seen here.\n\nexample2a_readr &lt;- readr::read_csv(file = here::here(\"data\", \"example2a_readr.csv\"))\n\nRows: 2 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): wt_lbs, ht_in, yob\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCall the data frame:\n\nexample2a_readr\n\n# A tibble: 2 × 3\n  wt_lbs ht_in   yob\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1    134    66  2000\n2    128    60  1985\n\n\nExamine the column types of example2a_readr with spec():\n\nreadr::spec(example2a_readr)\n\ncols(\n  wt_lbs = col_double(),\n  ht_in = col_double(),\n  yob = col_double()\n)\n\n\nWe now see the column types are all numeric, doubles.\n\n\nChanging column variable types\nIf your column variables were not all numeric and you wanted to change them, you could specify the data types in the order the variables appear in the data set (e.g., from left to right). To do this, we need to pass an argument for col_types. Although all the columns are numbers, to illustrate, we will declare one a \"double\", one a \"factor\", and one a \"character\" that is not a factor.\ncol_types = list(\"double\", \"factor\", \"character\")\n\nexample2a_readr &lt;- readr::read_csv(file = here::here(\"data\", \"example2a_readr.csv\"),\n                                   col_types = list(\"double\", \"factor\", \"character\")\n                                   )\n\nCall the data frame:\n\nexample2a_readr\n\n# A tibble: 2 × 3\n  wt_lbs ht_in yob  \n   &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt;\n1    134 66    2000 \n2    128 60    1985 \n\n\nThe tibble now lists the three different data types below the variable names. Remember, you cannot perform math on factors and character variables. Just to solidify just how the variables changed when read in, we can examine each variable to see what the vectors look like.\nThe \"double\" variable reveals numeric values:\n\nexample2a_readr$wt_lbs\n\n[1] 134 128\n\n\nThe \"factor\" variable reveals levels:\n\nexample2a_readr$ht_in\n\n[1] 66 60\nLevels: 66 60\n\n\nThe \"character\" variable reveals the years as strings:\n\nexample2a_readr$yob\n\n[1] \"2000\" \"1985\"\n\n\n\n\nQuieting the message\nThe other part of the message suggested quieting the message, which we can do when reading by setting show_col_types = FALSE:\n\nexample2a_readr &lt;- readr::read_csv(file = here::here(\"data\", \"example2a_readr.csv\"),\n                                   show_col_types = FALSE\n                                   )\n\nCall the data frame object:\n\nexample2a_readr\n\n# A tibble: 2 × 3\n  wt_lbs ht_in   yob\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1    134    66  2000\n2    128    60  1985"
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#reading-.rds-files",
    "href": "modules/06_importing_and_exporting_data.html#reading-.rds-files",
    "title": "Importing and exporting data",
    "section": "Reading .rds Files",
    "text": "Reading .rds Files\n\nBase R:\n\nreadRDS(file = \"my_filename.Rds\") for modified data frames\n\n\nYou can specify datatypes upon reading if using readr::read_csv() but you have to do this every time you read a file. If datatypes for variables change, you would need to track those changes so that you can return the data frame to its last state. An alternative is saveRDS() saves datatypes, file encoding, and also compresses the file. Thus, saveRDS() and readRDS() will be go to functions.\nArgument:\n\nfile: we need a character string argument naming a file or a connection open for writing (aka the filepath)\n\n\nreadRDS(file = here::here(\"data\", \"example3.rds\"))\n\n# A tibble: 3 × 3\n  name    age    iq\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Bill     28   130\n2 Jane     35   145\n3 Sal      55   125\n\n\n\nTab-Separated Files, .tsv\nWhen column values of data are separated by a TAB, the file type is referred to as tab-separated values:\nColumns of data are separated by a tab \"\\t\":\nname    age   iq\nBill    28    130\nJane    35    145\nSal   55    125\nLet’s say these files are all simple text files and unlike the previous .csv example are not saved with extension .tsv that would flag the file format. To provide more detail about opening data files, instead assume that the file is saved as a .txt file. Technically speaking, a csv file is also just a raw text file for which the text is separated by commas. In some instances, you will encounter csv files with extensions like .txt, .dat, .raw, etc.\n\nBase R:\n\nread.table(file = \"my_filename.txt\", sep = \"\\t\") is a flexible function requiring setting the separator character argument for sep\nread.tsv(file = \"my_filename.txt\") is the same as above except that sep = \"\\t\" is the default\n\n{readr}:\n\nreadr::read_tsv(file = \"my_filename.txt\")\n\n\nWe likely won’t be dealing with .tsv files, so we won’t work through an example here.\n\n\nReading Excel Data Files, .xlsx\nFirst, we need an .xlsx data file. You can obtain one locally or online from a URL. If you don’t not have one locally, we need to get one.\nWe will first create a character object containing the URL to an .xlsx file online:\n\nurl_file &lt;- \"https://github.com/slicesofdata/fods24/raw/main/data/swim/cms-top-all-time-2023-swim.xlsx\""
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#reading-with-rioimport",
    "href": "modules/06_importing_and_exporting_data.html#reading-with-rioimport",
    "title": "Importing and exporting data",
    "section": "Reading with rio::import()",
    "text": "Reading with rio::import()\nThen using {rio}, we will import the binary file from the URL using rio::import(). Pass the URL as the argument to the file parameter.\n\nrio::import(file = url_file)\n\n    score              name year          event   team\n1  525.35       Maia Presti 2015 1-Meter Diving Athena\n2  514.70 Makenna Parkinson 2023 1-Meter Diving Athena\n3  512.05      Emma Ng Pack 2023 1-Meter Diving Athena\n4  494.95         Izzy Doud 2023 1-Meter Diving Athena\n5  462.15     Carli Lessard 2015 1-Meter Diving Athena\n6  447.70     Alexis Romero 2023 1-Meter Diving Athena\n7  426.15        Pam Tanase 1987 1-Meter Diving Athena\n8  422.90    Jacque Desmond 2019 1-Meter Diving Athena\n9  419.60    Monica Emanuel 2008 1-Meter Diving Athena\n10 413.25    Carmen Lundell 2012 1-Meter Diving Athena\n11 527.60 Makenna Parkinson 2023 3-Meter Diving Athena\n12 526.90         Izzy Doud 2023 3-Meter Diving Athena\n13 525.30      Emma Ng Pack 2023 3-Meter Diving Athena\n14 474.20     Carli Lessard 2016 3-Meter Diving Athena\n15 441.40    Jacque Desmond 2020 3-Meter Diving Athena\n16 439.95        Elena Goss 1996 3-Meter Diving Athena\n17 428.05    Carmen Lundell 2013 3-Meter Diving Athena\n18 423.05       Maia Presti 2018 3-Meter Diving Athena\n19 414.30        Nia Cooper 2017 3-Meter Diving Athena\n20 412.00        Pam Tanase 1987 3-Meter Diving Athena\n21 628.60     James Stevick 2015 1-Meter Diving   Stag\n22 594.05  Kendall Hollimon 2017 1-Meter Diving   Stag\n23 557.80     Cyrus Gaylord 2023 1-Meter Diving   Stag\n24 538.00     Jack Griffith 2023 1-Meter Diving   Stag\n25 499.35  Patrick Quarberg 2016 1-Meter Diving   Stag\n26 493.10         Ben Smith 2023 1-Meter Diving   Stag\n27 489.75      Mark Emanuel 2006 1-Meter Diving   Stag\n28 477.70  Bennet Matazzoni 2023 1-Meter Diving   Stag\n29 477.25     Ethan Sattley 2023 1-Meter Diving   Stag\n30 471.05   Derek Eberhardt 1984 1-Meter Diving   Stag\n31 627.60     James Stevick 2015 3-Meter Diving   Stag\n32 624.50  Kendall Hollimon 2018 3-Meter Diving   Stag\n33 588.45     Cyrus Gaylord 2023 3-Meter Diving   Stag\n34 566.20     Jack Griffith 2023 3-Meter Diving   Stag\n35 514.20      Mark Emanuel 2007 3-Meter Diving   Stag\n36 499.60  Patrick Quarberg 2016 3-Meter Diving   Stag\n37 459.70      Brian Weaver 1989 3-Meter Diving   Stag\n38 450.05     Andrew Fevery 2010 3-Meter Diving   Stag\n39 444.40     Eric Moorhead 2008 3-Meter Diving   Stag\n40 415.20     Ethan Sattley 2023 3-Meter Diving   Stag"
  },
  {
    "objectID": "modules/06_importing_and_exporting_data.html#reading-with-openxlsxread.xlsx",
    "href": "modules/06_importing_and_exporting_data.html#reading-with-openxlsxread.xlsx",
    "title": "Importing and exporting data",
    "section": "Reading with openxlsx::read.xlsx()",
    "text": "Reading with openxlsx::read.xlsx()\nWe can also use functions from {openxlsx} to read Excel files. The problem is that by default, you will only be able to read the first sheet of a workbook file. If the first sheet is all you need, this can work. Pass the URL as the argument to the xlsxFile parameter and assign its contents to an object named DAT using the assignment operator &lt;-.\n\nDAT &lt;- openxlsx::read.xlsx(xlsxFile = url_file, sheet = 1)\n\nNow that we have an object holding the data frame, we can examine it. Let’s say we want to examine only the head of the data file?\n\nhead(DAT)\n\n   score              name year          event   team\n1 525.35       Maia Presti 2015 1-Meter Diving Athena\n2 514.70 Makenna Parkinson 2023 1-Meter Diving Athena\n3 512.05      Emma Ng Pack 2023 1-Meter Diving Athena\n4 494.95         Izzy Doud 2023 1-Meter Diving Athena\n5 462.15     Carli Lessard 2015 1-Meter Diving Athena\n6 447.70     Alexis Romero 2023 1-Meter Diving Athena\n\n\nNote: When you want a different worksheet you will need to pass a sheet name argument to the sheet parameter. Let’s pass the sheet by its name, sheet = \"swim\".\n\nhead(\n  openxlsx::read.xlsx(xlsxFile = url_file, sheet = \"swim\")\n)\n\n   time             name year   event   team\n1 23.29 Jocelyn Crawford 2019 50 FREE Athena\n2 23.31    Ava Sealander 2022 50 FREE Athena\n3 23.49        Kelly Ngo 2016 50 FREE Athena\n4 23.71        Helen Liu 2014 50 FREE Athena\n5 23.76      Michele Kee 2014 50 FREE Athena\n6 23.77 Natalia Orbach-M 2020 50 FREE Athena\n\n\nExcel workbooks are more complicated than simple csv files. The can contain numerous worksheets or contain written text on rows that need to be skipped or excluded. The examples here do not address the complexity of reading such files. On one hand, you might consider rejecting them as a file format for saving data files. On the other hand, their worksheet capability make them convenient file types for storing data for annual or regional reporting when those files will be examined by and toggled through by the typical office employee who has not data science experience.\nConsequently, there are"
  },
  {
    "objectID": "modules/04_functions_and_scripts.html",
    "href": "modules/04_functions_and_scripts.html",
    "title": "Functions, arguments, and R scripts",
    "section": "",
    "text": "A good friend of mine was once tried using R to summarize data. He couldn’t figure out why he could not use a function called mean() to calculate the mean of variables in his data set. Yes, mean() does compute a mean but he did not understand the object for which he was trying to compute a mean. When I explained the issue to him, he told me that he would often try to ‘brute force’ his way into obtaining results. He did not understand how the function worked and was not very concerned with learning. Without knowing how functions work, you limit yourself to troubleshoot answers and you spend a lot of time troubleshooting errors. You cannot just brute force yourself into data science or running models without getting yourself into trouble.\nAlthough the R language differs from other languages like Python, JavaScript, or HTML, the concepts covered is this section may be redundant for student who have taken a computer-science class. For beginners, the concepts may initially be challenging or confusing. You may even question why we cannot just jump into data manipulation and why all of this matters. In order to code in R so that you can be comfortable using it and with communicating with other users, a very basic understanding of programming concepts is important. This way, when someone asks you about an object, function, or assignment, you will know what they are taking about. And, well, you cannot communicate with R without knowing how functions work at a basic level.\n\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises.\n\n\n\n\nR Workflow Basics\n\n\n\nRead through the module. You can use the R console or open up an R Markdown (e.g., .Rmd) file to follow along interactively. If you instead prefer to simply read through the content so that you can understand the concepts without coding, that is fine too. Concepts will be applied in class in order to complete activities, however. Reading the module will provide you with confidence working on those activities and prevent you from feeling lost. Testing out some code may provide you more confidence.\n\n\n\n\nProvided in class:\nview_html(): for viewing data frames in html format, from /r/my_functions.R\n\nsource(here::here(\"r\", \"my_functions.R\"))\n\nYou can access remotely using this code, though you do not need to do so now.\n\nsource(\"https://raw.githubusercontent.com/slicesofdata/fods24/main/r/functions/view_html.R\")"
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#readings-and-preparation",
    "href": "modules/04_functions_and_scripts.html#readings-and-preparation",
    "title": "Functions, arguments, and R scripts",
    "section": "",
    "text": "Before Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#supplementary-readings",
    "href": "modules/04_functions_and_scripts.html#supplementary-readings",
    "title": "Functions, arguments, and R scripts",
    "section": "",
    "text": "R Workflow Basics\n\n\n\nRead through the module. You can use the R console or open up an R Markdown (e.g., .Rmd) file to follow along interactively. If you instead prefer to simply read through the content so that you can understand the concepts without coding, that is fine too. Concepts will be applied in class in order to complete activities, however. Reading the module will provide you with confidence working on those activities and prevent you from feeling lost. Testing out some code may provide you more confidence."
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#external-functions",
    "href": "modules/04_functions_and_scripts.html#external-functions",
    "title": "Functions, arguments, and R scripts",
    "section": "",
    "text": "Provided in class:\nview_html(): for viewing data frames in html format, from /r/my_functions.R\n\nsource(here::here(\"r\", \"my_functions.R\"))\n\nYou can access remotely using this code, though you do not need to do so now.\n\nsource(\"https://raw.githubusercontent.com/slicesofdata/fods24/main/r/functions/view_html.R\")"
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#examples-of-objects",
    "href": "modules/04_functions_and_scripts.html#examples-of-objects",
    "title": "Functions, arguments, and R scripts",
    "section": "Examples of objects",
    "text": "Examples of objects\nYou can also think of an object as a sort of container that holds something. Containers of different types hold different things and so is true in computer programming. A container for holding water may look different from a container for holding books. In computer speak, one type of container can hold numbers, another can hold characters, another can hold a data frame, etc. The container object is holding whatever you have assigned it to hold.\nWe will deal with different types of objects in data science. Without providing too complicated or technical of a description, some are describe below.\n\nnumeric objects: representing numeric information (e.g., one’s age)\ncharacter objects: representing character information (e.g., one’s name or race)\nvector objects: representing more than one numeric object (e.g., ages of participants)\ndata frame objects: containing vectors of data (e.g., column variables and row instances of data)\nfunction objects: that accept one object and return an other object (e.g., the mean of numeric vector)\n\nThere are other type of objects that you will learn about and encounter but for now, those are the most relevant."
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#a-character-example",
    "href": "modules/04_functions_and_scripts.html#a-character-example",
    "title": "Functions, arguments, and R scripts",
    "section": "A character example",
    "text": "A character example\nLet’s start with an example of an object called name, which we would like to assign a set of characters, like Jim Bob.\nIn order to create such an object, we would need to place the characters within quotation marks (e.g., single or double, does not matter). The quotes let R know the contents of name are characters (aka strings).\n\"Jim Bob\"\nWhen dealing with data, you will encounter many character objects as they often represent factor variables (e.g., race, ethnicity, favorite game, etc.) but you will also see lots of objects that are numeric in some form (e.g., age, rating, cognitive performance, etc.)."
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#assignment-provides-meaning-or-definition",
    "href": "modules/04_functions_and_scripts.html#assignment-provides-meaning-or-definition",
    "title": "Functions, arguments, and R scripts",
    "section": "Assignment provides meaning or definition",
    "text": "Assignment provides meaning or definition\nAssignment is akin to creating a new word and assigning a meaning to it. You could also think of an assignment statement as a way to tell R to “create this thing and set it equal to something” so that the computer understand what association represents."
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#a-character-object-a-silly-example",
    "href": "modules/04_functions_and_scripts.html#a-character-object-a-silly-example",
    "title": "Functions, arguments, and R scripts",
    "section": "A character object: A silly example",
    "text": "A character object: A silly example\nIf objects are like containers holding things, we can use name of the object (e.g., container) and then assign \"things\" to it using &lt;-. In order to create a character object, we would need to place the characters within quotation marks (e.g., single or double, does not matter). The quotes let R know the contents of container are characters (aka strings).\n\"things\"\nWhen dealing with data, you will encounter many character objects as they often represent factor variables (e.g., race, ethnicity, favorite game, etc.) but you will also see lots of objects that are numeric in some form (e.g., age, rating, cognitive performance, etc.).\nSilly Example:\n\n\"something\" assigned to container\ncontainer &lt;- \"something\"\n\n\ncontainer &lt;- \"things\"\n\nAnd to see its contents, use print() to return the objects content:\n\nprint(container)\n\n[1] \"things\"\n\n\nOr just type the name of the object and you will see the returned object is \"things\".\n\ncontainer\n\n[1] \"things\"\n\n\nFor another example, we could also create an object called name, which we could assign a set of characters, like Jim Bob, making the object a character object.\n\nname &lt;- \"Jim Bob\"\n\nTo see what is returned:\n\nname\n\n[1] \"Jim Bob\"\n\n\nWhether you name is or is not Jim Bob, you can see that name contains the characters that represent the name of someone named “Jim Bob”. Although we assigned \"Jim Bob\" to name, we could have assigned it a given name. The assignment process simply stores the assigned information as an object using of whatever name you decided to call it (e.g., name, Name, NAME, xyz, etc.). We will discuss more on these letter casing differences later.\nYou could also assign the character to the object this way.\n\n\"things\" -&gt; container\n\nHowever, we won’t use much of this approach for different reasons. One reason is that doing so does not follow the R Style Guide. The style guide defines a set of guidelines for coding in R. Rather than memorize all of the styling, pay careful attention to the way code appears in the examples provided and try your best to model your code after the examples. For example, don’t do something this container&lt;-\"things\" just so you save space as doing so makes the code more difficult for you and others to read and understand.\nOK, back to Jim Bob. Of course, there are different people other than Jim Bob who exist in the world but when coding, they do not exist unless you create them. So, let’s create an object that holds the name of \"Jim Bob\".\nname &lt;- \"Jim Bob\"\n\nname &lt;- \"Jim Bob\"     # assign string to object named name\n\n\nName &lt;- \"Jim Bob\"     # we could have assigned it a different name, say Name\n\n\nNAME &lt;- \"Jim Bob\"     # or assigned it in all caps\n\nWhenever you reference the object name (or Name), R will return the contents of the object to you, which in this case will be a character or string object containing a single person’s name because that’s how we assigned it.\n\nname               # call object to return contents of \"name\"\n\n[1] \"Jim Bob\"\n\n\nAnd again, we can use print() to do the same thing:\n\nprint(name)\n\n[1] \"Jim Bob\"\n\n\n\nBeing mindful of case sensitivity\nA word of warning is needed here. Although name, Name, and NAME all contain the same four characters, n a m and e all arranged it he same order, the objects are all different. They just happen to hold the same content. The reason for there being three different object is because R is a case-sensitive language, which means that the letter case matters. In some programming languages, the case is ignored.\nTo illustrate, consider an example for which you assign different names to the object.\nname &lt;- \"Jim Bob\"     # create the object\n\n\nName &lt;- \"Bob\"         # then change it\n\n\nNAME &lt;- \"Jim\"         # then change it again\nIn those languages, if you asked what the name object contained, the program would return \"Jim\" because these characters were assigned last, even though they were assigned to an uppercase version, NAME. With R, you will need to be mindful of the letter case. This is by design, perhaps an advantage rather than a disadvantage."
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#a-numeric-object",
    "href": "modules/04_functions_and_scripts.html#a-numeric-object",
    "title": "Functions, arguments, and R scripts",
    "section": "A numeric object",
    "text": "A numeric object\nWhat about numeric information? We can create an object called year and assign the current year to it; let’s have this object contain the current year in numeric form, not as a string. Remember to use &lt;- for assignment.\n\nyear &lt;- 2024    # assign a number to year ; notice no quotes\n\nIn order to know whether this year object now contains the year, we can check by typing the name of the object or use print() to print the returned value.\n\nyear\n\n[1] 2024\n\nprint(year)\n\n[1] 2024"
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#inspecting-vectors-with-some-functions",
    "href": "modules/04_functions_and_scripts.html#inspecting-vectors-with-some-functions",
    "title": "Functions, arguments, and R scripts",
    "section": "Inspecting vectors with some functions",
    "text": "Inspecting vectors with some functions\nname and year are very simple objects. name is a simple character/string object we created, which contains only the name of 1 person and year only holds the current year. There is something else important about how R treats them that you cannot see on the surface. Both of these objects are also vectors. Vectors are one-dimensional arrays containing n pieces of information. You might also think of a vector so a variable (e.g., IQs of people). Both the name and year vectors contain only one piece of information, however. If you don’t believe me, we can use some functions that will answer this for us.\n\nis.vector() is a function that returns a logical (T or F) about whether the object is a vector\nlength() is a function that returns a non-negative numeric integer representing the number of elements contained\ntypeof() is a function that returns the object’s type\n\nLet’s try them by passing the object name inside the function.\n\nis.vector(name)   # is it a vector?\n\n[1] TRUE\n\n#?length\nlength(name)      # how many elements?\n\n[1] 1\n\ntypeof(name)      # what is it's type?\n\n[1] \"character\"\n\n\nIf name contained more than one object, it would still be a vector having a different length. But in order to create such vectors, each element of the vector needs to be separated by a comma and each elements needs to be wrapped by quotes.\nIf you do not separate strings by a comma…\n\nname &lt;- \"Jim Bob Kendra\"\n\n\nname                                # return object; also print(name)\n\n[1] \"Jim Bob Kendra\"\n\nis.character(name)                  # is it a character?\n\n[1] TRUE\n\nlength(name)                        # what is its length?\n\n[1] 1\n\n\nIf you do use quotes for each element and separate each by a comma, you need to use a function to combine them, which is c().\n\nname &lt;- c(\"Jim Bob\", \"Kendra\")  # two names, combine with c()\n\n\n\nis.character(name)        \n\n[1] TRUE\n\nlength(name)                   # vector with length 2\n\n[1] 2\n\n\nThe more you work with character vector, the more you way want to avoid some annoyances of creating them.\nThe {Hmisc} library has a function called Cs() that obviates the inclusion of the quotes.\n\nHmisc::Cs(Jim, Kendra, Bill, Sandy)\n\n[1] \"Jim\"    \"Kendra\" \"Bill\"   \"Sandy\" \n\n\nBeware of vectors containing elements with space like this:\nHmisc::Cs(Jim Bob, Kendra)\nR will throw an error to inform you that something is wrong. For example: Error: unexpected symbol in \"Hmisc::Cs(Jim Bob\"."
  },
  {
    "objectID": "modules/04_functions_and_scripts.html#elements-of-vectors",
    "href": "modules/04_functions_and_scripts.html#elements-of-vectors",
    "title": "Functions, arguments, and R scripts",
    "section": "Elements of vectors",
    "text": "Elements of vectors\nAs a side note, the pieces/values of a vector are referred to as elements. You can reference elements by number representing their position in the vector.\n\nname[1]   # first element\n\n[1] \"Jim Bob\"\n\nname[2]   # second element\n\n[1] \"Kendra\"\n\nname[3]   # a third element? No. It only has length 2\n\n[1] NA\n\n\nObjects in R, however, can take on many forms other than strings or numbers just illustrated. Objects can be strings/characters, numeric values, character strings, functions, data frames, vectors, lists, matrices, plots, etc. If you use typeof() on a data frame object, the function will return \"list\" because a data frame is also a list. More on this later."
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html",
    "href": "modules/02_installing_and_setting_up_git_and_github.html",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "",
    "text": "We will perform all the necessary tasks for using Git with RStudio and managing files at the remote repository at GitHub.\n\n\n\nCreate a GitHub account\nCreate GitHub repository: “fods-exercises”\nInstall Git on your computer (if not already installed)\nConfigure Git for R, within R/RStudio (a familiar context)\n\nCreate a Personal Access Token (PAT)\nSet your Git Credentials (using your PAT)"
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#overview",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#overview",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "",
    "text": "We will perform all the necessary tasks for using Git with RStudio and managing files at the remote repository at GitHub.\n\n\n\nCreate a GitHub account\nCreate GitHub repository: “fods-exercises”\nInstall Git on your computer (if not already installed)\nConfigure Git for R, within R/RStudio (a familiar context)\n\nCreate a Personal Access Token (PAT)\nSet your Git Credentials (using your PAT)"
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#libraries-used",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#libraries-used",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Libraries Used",
    "text": "Libraries Used\n\n{usethis}: 2.2.2: for project workflow automation\n{gitcreds}: 0.1.2: for querying git credentials"
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#git-why-go-through-the-trouble",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#git-why-go-through-the-trouble",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Git: Why Go Through the Trouble?",
    "text": "Git: Why Go Through the Trouble?\nProjects are rarely done without collaborators. Teams collaborate, leveraging team members’ work and accomplishments. Using R in conjunction with the a distributed version control system, like Git, will facilitate that collaboration process. Writing flexible R code that does not hard-code objects will allow your research project to be reproducible, for example, when variables and data change (e.g., new data added, a new year added, etc.). Git long with GitHub will allow you to track your edits (the version control) and share your code with your collaborators or interested scholars.\nSome benefits of using version control:\n\nFacilitates project sharing (once it’s setup, you’ll get there)\nFacilitates collaboration. Others can also report errors or suggest features to your project.\nMakes reverting back to previous states easy. You can easily revert back to a previous version of your code in the event you discover errors or you delete critical details accidentally.\nServes as a memory for edits when memory fails. All changes across different versions of your code or written content is available.\n\nRStudio integrates support for Git but this interface is a little clunky. You can use it but RStudio also allows for communication via the command line Terminal, which will be the preferred method shared here."
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#creating-a-github-account",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#creating-a-github-account",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Creating a GitHub Account",
    "text": "Creating a GitHub Account\n\nGo to GitHub and create a free GitHub account. Make note of your username and your associated e-mail as you will need those for configuring Git with R.\n\nConsider this brief 15-minute TryGit Tutorial.\n\nStay logged in so that you can complete a later step.\nSend your PM your GitHub username. Your PM will send those to me and I will add you to a private repo. Once you are added to the repo, you can do the next step."
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#creating-a-repository-on-github",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#creating-a-repository-on-github",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Creating a Repository on GitHub",
    "text": "Creating a Repository on GitHub\nYou will need to create a repository by following the option to do so using the GitHub UI. Use that link if necessary but the images below should suffice.\n\nOnce logged into your GitHub account, you will see a + along the top of your account earn your profile icon. Click the option to create a “New Repository”.\n\n\n\n\n\n\n\nName the repository fods-exercises and provide a description like “for fods class exercises and homework”.\n\n\n\n\n\n\n\nSelect the option to make the repository Private, check to add a README file, and add a .gitignore file by scrolling to find R:\n\n\n\n\n\n\n\nClick Create Repository"
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#installing-git",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#installing-git",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Installing Git",
    "text": "Installing Git\n\nDo I need to install Git?\n\nMac OS Users can check whether Git is already installed by typing git --version at the Mac Terminal. If a version number is returned, then Git is installed.\nWindows Users can press the Windows key (or click the Start button) and type Git in the search bar. If you see Git or Git Bash listed, then Git is installed. At the R console, you can also type system(\"git --version\") and if it is installed, the function should return the version number.\n\nDownload and Install Git (if necessary)\n\nMac OS Users may experience problems with instructions listed at the Git download site to install Homebrew and set the PATH variable. Instead, I recommend downloading the binary version here and download it to install.\nWindows Users can download the latest version of Git here. Download and install Git, making a note of where on your computer you are install it as you may need to locate the path for RStudio, especially if you use a portable version of Git."
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#checking-git-setup-in-rstudio",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#checking-git-setup-in-rstudio",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Checking Git Setup in RStudio",
    "text": "Checking Git Setup in RStudio\nYou will need to tell RStudio where to find the Git program as this may not be recognize automatically.\n\nFind the path to the Git program executable that was installed in an earlier step.\n\nIn the Terminal in RStudio (not the R console), type: where git on Windows or which git on Mac/Linux and you might find the path easily. If there are more than one paths listed, just make note of one of them.\nIf for some reason you don’t see a path listed using that approach, type: Sys.which(\"git\") in your R console. The path here will likely be truncated so you will have to fill in the gaps when performing the step to set the path.\n\nIn RStudio, go to Tools &gt; Global Options and click on left side bar menu item Git/SVN.\nSelect the option at the top to Enable version control interface for RStudio projects if it is not selected.\nSet the path to the Git executable if it is not already there. Browse to the path to where Git.exe installed on your computer. Windows Users should make note that this path should be a path containing Git.exe and not a path containing git-bash.exe.\nClick Apply and click OK."
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#configuring-git-and-github",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#configuring-git-and-github",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Configuring Git and GitHub",
    "text": "Configuring Git and GitHub\nThere are two ways you can set up, either using R (console) or the command line (terminal). My recommendation is to use R because that is where you are likely most familiar. We will use the {usethis} library to help you.\nThe {usethis} library will make connecting your R project to your github account simple. This library should be installed as part of the packages from the start of the course. You will use usethis::use_git_config() to configure your GitHub account (see earlier) with Git on your computer.\nIn the below example, you need to pass two arguments, your user.name and your user.email which is the e-mail attached to your GitHub account. Add your arguments and then execute your modified R code:\nusethis::use_git_config(user.name = \"github_username\", \n                        user.email = \"github_email@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#creating-a-personal-access-token-pat-for-github",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#creating-a-personal-access-token-pat-for-github",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Creating a Personal Access Token (PAT) for GitHub",
    "text": "Creating a Personal Access Token (PAT) for GitHub\nBefore completing this step, log into your GitHub account to facilitate the communication between RStudio and GitHub.\nYou will need a personal access token (PAT) for making remote changes to GitHub. A first step then is to create a PAT using usethis::create_github_token(). Second, you will register your PAT with the Git credential manager used by your computers operating system using gitcreds::gitcreds_set(). Keep in mind that if you use a different computer (e.g., you get a new one), you’ll need to register the PAT on that computer following the same steps described here.\nTo create your personal access token (PAT), type the following at your R console:\nusethis::create_github_token()\nAfter executing the code, you will be taken to your GitHub account (if you remained logged in). Go to the bottom of the page and click generate token. You should add a description for it so that you can understand its use case. For example, describe it based the computer you are using it on, “my computer make and model”. You may also describe it based on a project you are working on, “token-for-project-xyz”. If you do not add a description, you will likely become overwhelmed and/or confused when you have multiple tokens. When you need to regenerate or delete a token that expires, you will not be able to determine what they are for if you do not add a description.\nAfter creating your token, Copy it to your computer’s clipboard and save it someplace safe. Do not share your token with anyone because anyone who has it can access your public or private GitHub repositories.\nWarning: Your PAT will expire after some duration, usually 30 days unless you change it. For this project, I suggest you change the expiration to a date after the semester ends to ensure you don’t have to go through this process again during the semester. Getting a new PAT is not difficult, however. If your PAT will soon expire, GitHub will send you an e-mail alerting you also. You can regenerate a PAT from a link in your e-mail, so make sure your associated e-mail is one you check."
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#setting-your-git-credentials-using-pat",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#setting-your-git-credentials-using-pat",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Setting your Git Credentials (using PAT)",
    "text": "Setting your Git Credentials (using PAT)\nNow that you have a PAT, we now need to set those credentials for RStudio to communicate with your GitHub account.\nExecute the following R code to set your credentials:\ngitcreds::gitcreds_set()\nYou may see a set of number options with corresponding descriptions. If you see them, enter the number corresponding to the option that makes the most sense for what you are trying to accomplish, for example, something like “set or replace your credentials”.\nWhen should then see a prompt like ? Enter new password or token. At this point, paste your PAT here and press return/enter. Then remove the PAT from your clipboard so that you don’t paste them someplace.\nYou can check that your credentials are stored by typing the following R code in the console:\ngh::gh_whoami()\n\nUpdating your Personal Access Token (PAT)\nAt some point, your PAT will expire and you will need to update it. When it’s about to expire or if it has expired, you can go to https://github.com/settings/tokens while logged into your GitHub account and regenerate the token and change the expiration date. Then, copy the PAT to the clipboard and set your credentials again using gitcreds::gitcreds_set()."
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#summary",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#summary",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Summary",
    "text": "Summary\nYou have now created your GitHub account, created a repository, created a PAT, and installed and/or set up Git with RStudio. The next step will be to connect the remote GitHub repository with your R/RStudio setup."
  },
  {
    "objectID": "modules/02_installing_and_setting_up_git_and_github.html#other-resources",
    "href": "modules/02_installing_and_setting_up_git_and_github.html#other-resources",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Other Resources",
    "text": "Other Resources\n\nGit Client: Git clients work like the RStudio Gui option described above but likely much better. If you find the Terminal command line daunting or limiting, I might recommend a Git Client to use as I am not a big fan of the RStudio interface.\n\nGitKraken is a good option and they have lots of tutorials on their website. GitKraken is seamless to set up. Install, connect your GitHub account, select your repo to add, and voilà. You can stage, commit, and push from there.\nGitHub Desktop is another common option. Install, connect your GitHub account and select your repo to add, and voilà. You can stage, commit, and push from there.\n\nTroubleshooting: happygitwithr is a resource for troubleshooting Git issues specifically with R."
  },
  {
    "objectID": "index.html#psyc-166-foundations-of-data-science-human-cognition",
    "href": "index.html#psyc-166-foundations-of-data-science-human-cognition",
    "title": "**PSYC166**",
    "section": "PSYC 166: Foundations of Data Science (Human Cognition)",
    "text": "PSYC 166: Foundations of Data Science (Human Cognition)\nThis is the course website for PSYC 166: Foundations of Data Science (Human Cognition), taught by Prof. Gabriel I. Cook; 1 credit\nDescription\nThis course introduces students to R, a programming language for statistical computing and graphics. Students will learn how to clean, manipulate, transform, join, and tidy data sets to prepare for statistical modeling. Supervised (e.g., regression) and unsupervised (e.g., clustering) approaches will be applied to understand simple and complex relationships between cognitive and non-cognitive variables (e.g., biology, aging, education, socioeconomic, health, etc.). Students will apply their skills to wrangle, explore, and model relevant data sets for a hands-on project for local scholars, offices, organizations, or industry participants. Data sets and relevant readings will change depending on semester."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Nothing to see here"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html",
    "href": "modules/01_installing_r_and_rstudio.html",
    "title": "Installing R & RStudio",
    "section": "",
    "text": "For this course, we will use the R programming language and the RStudio IDE for manipulating data and creating data visualizations."
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#tasks",
    "href": "modules/01_installing_r_and_rstudio.html#tasks",
    "title": "Installing R & RStudio",
    "section": "Tasks",
    "text": "Tasks\nThe first step is to install these pieces of software so that you can use them.\n\nDownload and Install R\nDownload and Install RStudio\nConfigure RStudio"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#readings",
    "href": "modules/01_installing_r_and_rstudio.html#readings",
    "title": "Installing R & RStudio",
    "section": "Readings",
    "text": "Readings\n\nIntro to R\nWorking with RMarkdown"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#install-r-first-and-then-install-rstudio.",
    "href": "modules/01_installing_r_and_rstudio.html#install-r-first-and-then-install-rstudio.",
    "title": "Installing R & RStudio",
    "section": "Install R first and then install RStudio.",
    "text": "Install R first and then install RStudio.\nInstalling should be easy and you can accept all of the defaults although the desktop icons are not needed, especially for R because you will never need it; RStudio will find R for you. You can follow these videos for simple installing.\nPC: How to Install R and R Studio on Windows 10/11\nMac: Installing R and RStudio on a Mac\nNote: If you leave the desktop icon for R, you can remove that later. You will never need it because RStudio will find R for you."
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#additional-step-for-mac-users",
    "href": "modules/01_installing_r_and_rstudio.html#additional-step-for-mac-users",
    "title": "Installing R & RStudio",
    "section": "Additional Step for Mac Users:",
    "text": "Additional Step for Mac Users:\nDownload and Install XQuartz\nSome functions in R require an “X11 Server” and/or libraries associated with an X11 server. Apple does not provide this software with OS X anymore so unfortunately you have to do it on your own via a third-party application called XQuartz for OS X 10.9 or later.\nUse the url below to download the XQuartz file and save it to your computer. Follow the same install instructions as above for installing the XQuartz file.\nFor macOS 10.9 or later, download this XQuartz file and save it to your computer and install: https://github.com/XQuartz/XQuartz/releases/download/XQuartz-2.8.5/XQuartz-2.8.5.pkg"
  },
  {
    "objectID": "modules/03_using_git_and_github.html",
    "href": "modules/03_using_git_and_github.html",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "",
    "text": "In order to maintain organization, you will set up a class folder/directory on your computer. You will then create an RStudio project and connect it to GitHub. Finally, you will create directories within your new project directory so that you have an organized directory structure for storing your files. This process will also ensure that all student’s computers are configured in the same manner.\nIn class, we will use Git to interact with a remote repository connected to a Project in RStudio. Reading through these steps, however, will facilitate your ability to apply the concepts and run the associated functions in class. in order to create project for class exercises (and homework) as well as your team project.\n\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises.\n\n\n\n\nSet up your class space\n\n\nCreate top-level /fods24 directory\n\n\nCreate Version Control Projects in RStudio\n\n\nExercises\n\nTeam Project (will do in class)\n\n\nMake file edits, stage the, and commit them\nPush commits to GitHub\n\nClass Activity:\nWhen you collaborate with others, you have to be more mindful of the changes you make and those that others make, ensuring that the repository can incorporate the changes. Thus, we will interact with Git in class in a slightly different way.\nThings we will do:\n\nCreate a new project and connect to a remote repository\nCreate a branch\nMake file edits, stage them, and commit them\nPush commits to GitHub\nMerge your branch with the main brain"
  },
  {
    "objectID": "modules/03_using_git_and_github.html#overview",
    "href": "modules/03_using_git_and_github.html#overview",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "",
    "text": "In order to maintain organization, you will set up a class folder/directory on your computer. You will then create an RStudio project and connect it to GitHub. Finally, you will create directories within your new project directory so that you have an organized directory structure for storing your files. This process will also ensure that all student’s computers are configured in the same manner.\nIn class, we will use Git to interact with a remote repository connected to a Project in RStudio. Reading through these steps, however, will facilitate your ability to apply the concepts and run the associated functions in class. in order to create project for class exercises (and homework) as well as your team project.\n\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises.\n\n\n\n\nSet up your class space\n\n\nCreate top-level /fods24 directory\n\n\nCreate Version Control Projects in RStudio\n\n\nExercises\n\nTeam Project (will do in class)\n\n\nMake file edits, stage the, and commit them\nPush commits to GitHub\n\nClass Activity:\nWhen you collaborate with others, you have to be more mindful of the changes you make and those that others make, ensuring that the repository can incorporate the changes. Thus, we will interact with Git in class in a slightly different way.\nThings we will do:\n\nCreate a new project and connect to a remote repository\nCreate a branch\nMake file edits, stage them, and commit them\nPush commits to GitHub\nMerge your branch with the main brain"
  },
  {
    "objectID": "modules/03_using_git_and_github.html#libraries-used",
    "href": "modules/03_using_git_and_github.html#libraries-used",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Libraries Used",
    "text": "Libraries Used\n\n{usethis}: 2.2.2: for project workflow automation\n{gitcreds}: 0.1.2: for querying git credentials"
  },
  {
    "objectID": "modules/03_using_git_and_github.html#creating-a-local-directory-for-class",
    "href": "modules/03_using_git_and_github.html#creating-a-local-directory-for-class",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Creating a Local Directory for Class",
    "text": "Creating a Local Directory for Class\nCreate a folder (aka directory) named \"fods24\" on your computer. I recommend creating the directory someplace where you might not accidentally delete it."
  },
  {
    "objectID": "modules/03_using_git_and_github.html#connecting-the-repository-to-an-rstudio-project",
    "href": "modules/03_using_git_and_github.html#connecting-the-repository-to-an-rstudio-project",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Connecting the Repository to an RStudio Project",
    "text": "Connecting the Repository to an RStudio Project\n\nIn RStudio, File &gt; New Project &gt; Version Control &gt; Git.\nIn the pop-up, you will see a request for the “repository URL”. Paste the URL of the GitHub repository. This URL will be the same as what you see on your GitHub account. However, we need to add .git to the end of it.\n\n    https://github.com/&lt;your_github_username&gt;/fods-exercises.git\n\nWhen you create the project, a directory will be created as a sub-directory of /fods24 and its name should auto populate (e.g., 'fods-exercises').\n\nWARNING: Do not create the project inside of an existing project’s directory.\n* Note: I recommend that you also select *\"Open in new session\"* in order to compartmentalize projects. When you work on the team project, open the project. When you work on your homework or other class exercises, open your *homework* project.\n\nClick “Create Project” to create the new project directory, which will create:\n\na project directory on your computer\na project file with file extension .Rproj\na Git repository or link to the remote GitHub repository for the project (also an RStudio Project)\n\n\nIf the repository already exists on GitHub (and it does in this instance) you should see RStudio flash a connection to GitHub and likely pull the repo contents down to your newly-created project directory. In this case, however, your repository will contain few files."
  },
  {
    "objectID": "modules/03_using_git_and_github.html#creating-project-relevant-directories",
    "href": "modules/03_using_git_and_github.html#creating-project-relevant-directories",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Creating Project Relevant Directories",
    "text": "Creating Project Relevant Directories\nNow, inside the /fods24/fods-exercises directory, create directories named:\n\ndata\ndocs\nfigs\nr\nrefs\nreport\n\nYou will now see the directory structure, though all your directories will be empty. Moving forward, save all data to /data, create all .R files in /r, and create all exercise or homework R Markdown files (e.g., .Rmd) in /report. Any readings or references can can saved in /refs and any other document files can be saved in /docs. Finally, reserve /figs for saving plots or figures."
  },
  {
    "objectID": "modules/03_using_git_and_github.html#understanding-git-workflow-basics",
    "href": "modules/03_using_git_and_github.html#understanding-git-workflow-basics",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Understanding Git Workflow Basics",
    "text": "Understanding Git Workflow Basics\nThere are three main parts to Git Workflow:\n\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)"
  },
  {
    "objectID": "modules/03_using_git_and_github.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "modules/03_using_git_and_github.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\nMaking a local change\n\nCreate a .R script and name it something like yourname.R. Where should you save it? You guessed it: /r.\n\nChecking the status of local file changes\n\nCheck for the local changes you have made at the Terminal by typing git status and press return/enter\n\n$ git status\n\nIf you made changes, Git will tell you what those changes are. For example, there will be a new file, a deleted file, a modified file, etc.\n\nStaging Changes (Add Changes)\n\nStage a specific change: If you made multiple changes and all you want to do is commit a single change and no others, you can specify the change you want to add. For example, if you want only to add a specific file, like yourname.R, you will use git add &lt;file&gt;... such that &lt;file&gt; refers to the file name.\n\nAt the Terminal prompt, type git add followed by &lt;file&gt; to include in what will be committed)\n$ git add r/yourname.R\n\nStage all change(s): When you make numerous changes, you may wish not to specify each file individually as that could be tedious. In this case, you may wish to stage all of your changes. Assuming everything you are doing is relevant to the project, one of the easiest ways to add changes is to just add all of your file changes. Note, your changes should not be done inside data files (e.g., .csv, .xlsx). Changes should only be done using R code. If not, your project will not be reproducible.\n\nAt the Terminal, you can type git add . which tells Git that you are adding all of those changes to commit them.\n$ git add .\n\n\nCommitting the change(s)\n\nNow that you made a change, you will commit it and assign a useful message to remind your future self and collaborators what you just did.\n\nAt the Terminal, type git commit to commit the changes, add -m to tell git you want a message, and then type the message as a string, \"my message here\" and then press enter/return to commit the changes.\n$ git commit -m \"added my first .R file\"\n\n\nPush the change to the remote repository\n\nWe need to push the changes to the remote GitHub repository for version control and for collaborators to access\n\nAt the Terminal, you will push those changes using git push and press enter/return to push.\n$ git push\n\nIf you navigate to your GitHub account in your web browser, you will see the changes there as soon as they arrive. Congrats!\n\nPractice (Yes, seriously): Changing, Committing, and Pushing Again\n\nYou know that file with your name is not needed for the project. Delete it from the project as you normally would delete a file (no need to use the Terminal) and then add the change, commit the change with message “deleted my silly file”, and push changes.\nIf for some reason, your push did not work, you may need to specify the project branch. Branching is beyond the scope of this course. If team members are working on separate tasks, their code will be compartmentalized so you can use the main branch.\n\nYou can set the branch to the main branch at the Terminal using git branch -M main.\n$ git branch -M main\n\n\nPushing Specific File Changes\n\nYou should not push all of your edits. For example, if you edit a file and save it but it is incomplete (e.g., it contains errors) that will create problems for your team members, you do not want to push them to the repo. If you do, your team member’s code will also break if they are sourcing (e.g., source()) your script file. Similarly, if the data file you write out contains errors, a teammate cannot read that file in successfully. So make sure that what you push is correct and accurate before pushing.\n\nPulling Changes from the Remote\n\nThe opposite of push is pull. When your teammates push their changes (e.g., data cleaning, file creation, etc.) to the repo and your code depends on those files, you will want to make sure their edits are in your local project so that you can use them.\n\nTo pull the changes down to your project, at the Terminal, type git pull.\n$ git pull\n\nYou should find the changes appear in your local project directory."
  },
  {
    "objectID": "modules/03_using_git_and_github.html#using-the-git-tab-in-your-rstudio-pane",
    "href": "modules/03_using_git_and_github.html#using-the-git-tab-in-your-rstudio-pane",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Using the Git Tab in your RStudio Pane",
    "text": "Using the Git Tab in your RStudio Pane\nIf you do not use the Terminal to run Git commands (e.g., add, commit, and push), you can also use Git with RStudio, though I tend to find this process creates an annoying lag when there are many files.\nWhen you edit files (e.g., made changes and saved the file), the file will be detected in the project if you have set up Git. The changes detected will be listed in the window for this tab. You can then stage, commit the changes, push the changes using this RStudio GUI.\n\nClick the Git tab\nCheck the box under Staged next to the file\n\nNote: There may be a delay.\n\nClick the Commit icon on the toolbar directly above Status\n\nA window will pop up showing some of the edits to the file\nA window for Commit message will also appear for adding your message. This window is where you want to be.\n\nType your commit message in that window\n\nYour message should be clear and useful to remind your future self or colleagues of the edits but not be overly wordy.\n\nClick Commit to commit the change\nClick the Green Arrow to Push your committed change up to the remote repository.\n\nNote: You will click the Blue Arrow to Pull the changes down from the remote repository what were pushed there by your collaborators"
  },
  {
    "objectID": "modules/03_using_git_and_github.html#creating-a-version-control-project-in-rstudio-for-the-team-project",
    "href": "modules/03_using_git_and_github.html#creating-a-version-control-project-in-rstudio-for-the-team-project",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Creating a Version Control Project in RStudio for the Team Project",
    "text": "Creating a Version Control Project in RStudio for the Team Project\n\nIn RStudio, File &gt; New Project &gt; Version Control &gt; Git.\nIn the pop-up, you will see a request for the “repository URL”. Paste the URL of the GitHub repository based on your liaison name. This URL will be the same as what you see on your GitHub account. However, we need to add .git to the end.\n\n    https://github.com/slicesofdata/fods24-&lt;to_be_announced&gt;.git\n\nWhen you create the project, a directory will be created, a name will auto populate (e.g., ‘fods24-liaison’). If you change the name, name it something that you will know as your team project. In order to keep the class organized, I might suggest you create the project in your FODS course directory. You should already have a R project for you homework called something like homework.Rproj in that course directory. WARNING: Do not create the project inside of an existing project’s directory.\n\nNote: I recommend that you also select “Open in new session” in order to compartmentalize projects. When you work on the team project, open the project. When you work on your homework or other class exercises, open your homework project.\n\nClick “Create Project” to create the new project directory, which will create:\n\na project directory on your computer\na project file with file extension .Rproj\na Git repository or link to the remote GitHub repository for the project (also an RStudio Project)\n\n\nIf the repository already exists (and it does in this instance) you should see RStudio flash a connection to GitHub and likely pull the repo contents down to your newly-created project directory. You will see the directory structure and corresponding files. Your code files should be saved to /r, the data you read or save to /data, your RMarkdown report files to /report, etc.\nThese directories are there for project management purposes. Also, to maintain a clean project, create sub-directories within those directories as needed; create new directories if and only if its contents differ qualitatively from what is in the existing directories. Because the project report will need to be reproduced, don’t complicate your code by creating RMarkdown files for code used to perform some task when only code is needed. In those cases, use .R code script files. Use .Rmd files only for a report containing text and minor code. You cannot easily source() .Rmd files and creating them will be a a hassle to deal with later. Project organization is an element of the project."
  },
  {
    "objectID": "modules/03_using_git_and_github.html#summary",
    "href": "modules/03_using_git_and_github.html#summary",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Summary",
    "text": "Summary\nYou now understand how to create projects in R, how to connect projects to remote GitHub repositories, and how to use Git to track your work in your local repository and a remote one. These simple commands are basic but provide you some exposure to and confidence with using Git for version control."
  },
  {
    "objectID": "modules/03_using_git_and_github.html#other-resources",
    "href": "modules/03_using_git_and_github.html#other-resources",
    "title": "Installing and Setting Up Git and GitHub for R",
    "section": "Other Resources",
    "text": "Other Resources\n\nGit Client:\n\nGit clients work like the RStudio Gui option described above but likely much better. One client is GitKraken. * If you find the Terminal command line daunting or limiting, I might recommend a Git Client to use as I am not a big fan of the RStudio interface. * GitKraken is a good option and they have lots of tutorials on their website. GitKraken is seamless to set up. Install, connect your GitHub account, select your repo to add, and voilà. You can stage, commit, and push from there.\n\nhappygitwithr"
  },
  {
    "objectID": "modules/05_vectors_and_data_frame_basics.html",
    "href": "modules/05_vectors_and_data_frame_basics.html",
    "title": "Vectors and Fata Frame Basics",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/05_vectors_and_data_frame_basics.html#readings-and-preparation",
    "href": "modules/05_vectors_and_data_frame_basics.html#readings-and-preparation",
    "title": "Vectors and Fata Frame Basics",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/05_vectors_and_data_frame_basics.html#libraries",
    "href": "modules/05_vectors_and_data_frame_basics.html#libraries",
    "title": "Vectors and Fata Frame Basics",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management\n\nRelated:\n\n{readxl} 1.4.3: for reading Excel spreadsheets"
  },
  {
    "objectID": "modules/07_variables_and_measures_of_cognition.html",
    "href": "modules/07_variables_and_measures_of_cognition.html",
    "title": "Variables and Measures of Cognition.qmd",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/07_variables_and_measures_of_cognition.html#readings-and-preparation",
    "href": "modules/07_variables_and_measures_of_cognition.html#readings-and-preparation",
    "title": "Variables and Measures of Cognition.qmd",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/07_variables_and_measures_of_cognition.html#libraries",
    "href": "modules/07_variables_and_measures_of_cognition.html#libraries",
    "title": "Variables and Measures of Cognition.qmd",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management"
  },
  {
    "objectID": "modules/09_working_with_cognitive_task_data.html",
    "href": "modules/09_working_with_cognitive_task_data.html",
    "title": "Working with Cognitive Task Data",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/09_working_with_cognitive_task_data.html#readings-and-preparation",
    "href": "modules/09_working_with_cognitive_task_data.html#readings-and-preparation",
    "title": "Working with Cognitive Task Data",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/09_working_with_cognitive_task_data.html#libraries",
    "href": "modules/09_working_with_cognitive_task_data.html#libraries",
    "title": "Working with Cognitive Task Data",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management"
  },
  {
    "objectID": "modules/11_summarizing_cognitive_task_data.html",
    "href": "modules/11_summarizing_cognitive_task_data.html",
    "title": "Summarizing Cognitive Task Data",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/11_summarizing_cognitive_task_data.html#supplementary-readings",
    "href": "modules/11_summarizing_cognitive_task_data.html#supplementary-readings",
    "title": "Summarizing Cognitive Task Data",
    "section": "Supplementary Readings",
    "text": "Supplementary Readings\n\nR Workflow Basics"
  },
  {
    "objectID": "modules/11_summarizing_cognitive_task_data.html#task",
    "href": "modules/11_summarizing_cognitive_task_data.html#task",
    "title": "Summarizing Cognitive Task Data",
    "section": "Task",
    "text": "Task"
  },
  {
    "objectID": "modules/11_summarizing_cognitive_task_data.html#libraries",
    "href": "modules/11_summarizing_cognitive_task_data.html#libraries",
    "title": "Summarizing Cognitive Task Data",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management\n{readr} 2.1.4: for reading .csv, .tsv, and .fwf files\n{openxlsx} 4.2.5.2: for reading Excel spreadsheets from a URL and writing Excel files\n{haven} 2.5.4: for reading SPSS, Stata, and SAS files (e.g., .sav, .dta, .sas7bdat, etc. )\n{rio} 1.0.1: a Swiss-Army knife for data I/O\n\nRelated:\n\n{readxl} 1.4.3: for reading Excel spreadsheets"
  },
  {
    "objectID": "modules/13_examining_relationships_in_variables_of_cognition.html",
    "href": "modules/13_examining_relationships_in_variables_of_cognition.html",
    "title": "Examining Relationships in Variables of Cognition",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/13_examining_relationships_in_variables_of_cognition.html#readings-and-preparation",
    "href": "modules/13_examining_relationships_in_variables_of_cognition.html#readings-and-preparation",
    "title": "Examining Relationships in Variables of Cognition",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/13_examining_relationships_in_variables_of_cognition.html#task",
    "href": "modules/13_examining_relationships_in_variables_of_cognition.html#task",
    "title": "Examining Relationships in Variables of Cognition",
    "section": "Task",
    "text": "Task"
  },
  {
    "objectID": "modules/13_examining_relationships_in_variables_of_cognition.html#libraries",
    "href": "modules/13_examining_relationships_in_variables_of_cognition.html#libraries",
    "title": "Examining Relationships in Variables of Cognition",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management"
  },
  {
    "objectID": "modules/15_joining_relational_data.html",
    "href": "modules/15_joining_relational_data.html",
    "title": "Joining Relational Data",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/15_joining_relational_data.html#readings-and-preparation",
    "href": "modules/15_joining_relational_data.html#readings-and-preparation",
    "title": "Joining Relational Data",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises.\n\nJoining Data"
  },
  {
    "objectID": "modules/15_joining_relational_data.html#libraries",
    "href": "modules/15_joining_relational_data.html#libraries",
    "title": "Joining Relational Data",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management\n{tidyr} 1.3.0: for joining and tidying data (e.g., pivot)\n\nMore generally: - {tidyverse} 2.0.0: the tidyverse ecosystem\nRelated:\n\n{readxl} 1.4.3: for reading Excel spreadsheets"
  },
  {
    "objectID": "modules/17_linear_models.html",
    "href": "modules/17_linear_models.html",
    "title": "Linear Models",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/17_linear_models.html#readings-and-preparation",
    "href": "modules/17_linear_models.html#readings-and-preparation",
    "title": "Linear Models",
    "section": "Readings and Preparation",
    "text": "Readings and Preparation\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. I will assume that you attend class with some level of basic understanding of concepts and working of functions. The goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. This cannot happen if you just read the content without interacting with it, however reading is absolutely essential to being successful during class time. Work through some examples so that you have a good idea of your level of understanding and confidence.\nClass: In class, some functions and concepts will be introduced and we will practice implementing code through exercises."
  },
  {
    "objectID": "modules/17_linear_models.html#libraries",
    "href": "modules/17_linear_models.html#libraries",
    "title": "Linear Models",
    "section": "Libraries",
    "text": "Libraries\n\n{here} 1.0.1: for file path management"
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Modules",
    "section": "",
    "text": "This course introduces students to R, a programming language for statistical computing and graphics. Students will learn how to clean, manipulate, transform, join, and tidy data sets to prepare for statistical modeling. Supervised (e.g., regression) and unsupervised (e.g., clustering) approaches will be applied to understand simple and complex relationships between cognitive and non-cognitive variables (e.g., biology, aging, education, socioeconomic, health, etc.). Students will apply their skills to wrangle, explore, and model relevant data sets for a hands-on project for local scholars, offices, organizations, or industry participants. Data sets and relevant readings will change depending on semester."
  },
  {
    "objectID": "modules/index.html#module-structure",
    "href": "modules/index.html#module-structure",
    "title": "Modules",
    "section": "Module structure",
    "text": "Module structure\nIn general, modules will contain readings, additional resources, and weekly assignments.\nThe modules will be updated across the semester as needed. There are more modules on this course site because some modules provide other useful information. The names of the modules listed in the syllabus, however, do match the names in the module listing."
  },
  {
    "objectID": "project/04_project_midterm.html",
    "href": "project/04_project_midterm.html",
    "title": "Midterm presentation",
    "section": "",
    "text": "After having several weeks to investigate and examine your data, brainstorm potential key items to address, identify potential story lines, and create some data visualizations, the next step is to present to the class. You goal for the midterm presentation will be to present and discuss data visualizations, or variants thereof, that could find their way into the end-of-semester final presentation and report deliverable.\nYou will be evaluated on you and your team’s ability to convey the steps taken to clean up the data in service of creating some plots as well as share a decision-making journey of plot creation. Any variables that needed to be fixed or modified, factorized, computed anew, or summarized in some way can resulted in one single starting data frame/tibble and likely some smaller data summaries. Teams taking different approaches, or who are guided by liaisons who have different interests, will end up with different data, different data visualizations, and different stories. Include code where appropriate to communicate how you achieved your goals.\nAt this stage in the project, the important point is that all team members should be working with data, challenge themselves to think about data, and practice using {ggplot} for creating data visualizations. Thus, all team members must have two plots, even if those plots communicate detailed variants of the same performance metric. By plot variants, mean Same Data, Different Stories. Variant plots use the same data but are visualized differently in order to facilitate different comparisons, use additional date to provide a more nuanced or detailed interpretation, use different levels/grouping of exiting variables, or use a different scaling structures, etc. Alternatively, the two plots could visualize different metrics obtained from the data, different calculations of a metric, compare different calculations, etc. to represent depths to data inquiry.\nAn example of looking at the data in different ways is illustrated in Nathan Yau’s post One Dataset, Visualized 25 Ways. If you struggle to think about data, you can also check out his post on how to think like a statistician without the math. I believe that the most valuable comment is this post to in the Ask Why section. He explains that “…the most important thing I’ve learned, [is to] always ask why. When you see a blip in a graph, you should wonder why it’s there. If you find some correlation, you should think about whether or not it makes any sense. If it does make sense, then cool, but if not, dig deeper. Numbers are great, but you have to remember that when humans are involved, errors are always a possibility.” Asking why data are they way they are is important because patterns in data can happen by chance or for some systematic reason. Any systematic influence has to have a reason, an explanation for its presence. Although you may be able to describe a pattern or influence, if you cannot provide an explanation for it, there is no useful way to make that information actionable."
  },
  {
    "objectID": "project/04_project_midterm.html#data-cleaning-and-variable-creation",
    "href": "project/04_project_midterm.html#data-cleaning-and-variable-creation",
    "title": "Midterm presentation",
    "section": "Data Cleaning and Variable Creation",
    "text": "Data Cleaning and Variable Creation\nYou should communicate steps taken to clean data to fulfill sub-goals for different plots. I recommend sharing your code. The audience should understand the code and may have the capacity to identify errors.\n\nGeneral Data Cleaning\n\nCommunicate steps taken to clean data to fulfill sub-goals\nCommunicate how you modified variables and/or computed variables of interest\nCommunicate any usage of {dplyr} functions like group_by(), mutate(), filter(), ungroup(), or other functions from {stringr}, {tidyr} or otherwise for merging/joining, adding new variables, etc.\n\n\n\nData Summaries for Plots\n\nCommunicate how you calculated and/or obtained summary metrics\nCommunicate any usage of functions like group_by(), summarize(), filter(), or ungroup() to ensure your data are computed correctly"
  },
  {
    "objectID": "project/04_project_midterm.html#data-visualizations-story-telling-with-pictures",
    "href": "project/04_project_midterm.html#data-visualizations-story-telling-with-pictures",
    "title": "Midterm presentation",
    "section": "Data Visualizations: Story Telling with Pictures",
    "text": "Data Visualizations: Story Telling with Pictures\n\nConvey performance metrics using data visualizations\nWalk audience through an explanation of the visualizations\nConvey why you chose the data to plot and why you chose the plot to convey the data\nCommunicate plot limitations and intended amendments along with reasons why\n\nA plot is chosen as a visual aid for a talk, paper, news article, etc. for various reasons:\n\nwas the only plot created\nwas the only plot known how to create\nwas the best of several plots created\n\nEach data visualization must serve a goal for your audience. You should consider how you intend to talk about the visualization to your audience when you create it. If there are different ways to talk about the same data and more than one variant facilitates that communications, you may consider creating more than one.\nYou should stumble upon neither that goal nor the the geom type used to communicate that goal. Are you trying to communicate comparisons of some sort? If so, does the plot make that particular comparison easy?\n\nPlot Introduction\nBefore revealing your plot, set the stage for its intent. Use words. In your final report, you will be telling a story about the data. You will not just present plots and talk about them. For example, you make introduce a research question that the plot will either help answer or provide information about examining further. After walking the reader through the problem, you will reference a figure containing the plot. For the midterm presentation, you will similarly introduce a question that the plot will help address. Mention the data that the plot visualizes. Are these data minimums, maximums, means, medians, measures of variability, etc. Do the data represent groups of people? Do they include dates? Think of this step as a topic slide before presenting the plot. Your topic title should be brief and clear and you should fill in any more detail with words. This step will set the stage for the audience to understand what data you would be presenting before you throw a plot in their face.\n\n\nPlot Reveal and Explanation\nYou should make sure that you walk the reader through the data visualization. Be explicit about what the axes represent and what any aesthetics represent so that the audience does not have to figure this out. In other words, do not just present the plot and say “we can see there are differences in metric X across time”. Instead, say something more clear like: “This plot visualizes data about Event X for Group/Person/year Y. Along the horizontal axis is… a long the y axis is…. You can see that the average range of times/distances for Event X decreases as athletes’ move through class ranks (e.g, FR to SR). This pattern in the data suggests that…”. You get the point.\n\n\nPlot Discussion\nFor each plot you should:\n\nexplain why you selected this plot as the data visualization of choice to communicate the element of data being communicated\nincorporate information from readings about why you have chosen this plot type\nexplain what modifications you made to the plot (feel free to share code)\nexplain limitations that the plot contains\nshare your future goals to:\n\nreplace the plot with a completely new plot for reason X\nmodify it in one or various ways to solve limitation X, Y, and X\nleave plot as is/explain why the plot needs no work"
  },
  {
    "objectID": "project/04_project_midterm.html#data-cleaning-and-variable-creation-30-pts",
    "href": "project/04_project_midterm.html#data-cleaning-and-variable-creation-30-pts",
    "title": "Midterm presentation",
    "section": "Data Cleaning and Variable Creation (30 pts)",
    "text": "Data Cleaning and Variable Creation (30 pts)\n\nCommunicate steps taken to clean data to fulfill sub-goals\nCommunicate how you modified variables and/or computed variables of interest\nCommunicate any usage of functions to ensure your data are computed correctly\nCommunicate any aggregation methods and summary data frames per plot"
  },
  {
    "objectID": "project/04_project_midterm.html#data-visualizations-story-telling-with-pictures-40-pts",
    "href": "project/04_project_midterm.html#data-visualizations-story-telling-with-pictures-40-pts",
    "title": "Midterm presentation",
    "section": "Data Visualizations: Story Telling with Pictures (40 pts)",
    "text": "Data Visualizations: Story Telling with Pictures (40 pts)\n\nPlot Introduction (5 pts)\nPlot Reveal and Explanation (20 pts)\nPlot Discussion (15 pts)"
  },
  {
    "objectID": "project/04_project_midterm.html#presentation-characteristics-20-pts",
    "href": "project/04_project_midterm.html#presentation-characteristics-20-pts",
    "title": "Midterm presentation",
    "section": "Presentation Characteristics (20 pts)",
    "text": "Presentation Characteristics (20 pts)\n\nClarity (5pts): well-explained; easy to follow/understand; ability to communicate points effectively\nOrganization (5pts): structured logically; ability to walk audience through some story line or the a story about plot decision processes\nThoroughness (5pts): all relevant issues discussed thoroughly\nPresentation Style (5pts): degree of preparedness and polish in presentation; smooth and rehearsed; minimum of reading; well-paced; slide quality"
  },
  {
    "objectID": "project/04_project_midterm.html#team-and-team-member-evaluation-5-pts",
    "href": "project/04_project_midterm.html#team-and-team-member-evaluation-5-pts",
    "title": "Midterm presentation",
    "section": "Team and Team Member Evaluation (5 pts)",
    "text": "Team and Team Member Evaluation (5 pts)\n\nEvaluation of personal contributions toward the project as evaluated by other team members (claims partially validated using on-time weekly report submissions).\nThe audience (your client) will also provide an overall review for the team and individual team members."
  },
  {
    "objectID": "project/04_project_midterm.html#self-evaluation-5-pts",
    "href": "project/04_project_midterm.html#self-evaluation-5-pts",
    "title": "Midterm presentation",
    "section": "Self Evaluation (5 pts)",
    "text": "Self Evaluation (5 pts)\nEvaluation of your personal contributions toward the project as evaluated by yourself (claims partially validated using on-time weekly report submissions)."
  },
  {
    "objectID": "project/10_project_report.html",
    "href": "project/10_project_report.html",
    "title": "Final report",
    "section": "",
    "text": "The final written report for the project will be delivered to me and to your liaison. I can provide a color-printed copy for you to distribute to the liaison and for their offices.\nThe final report is to be created in R Markdown and knit as a Pdf or Word document. An example starter file will be provided in the project repository. When working with a report file on GitHub, I recommend that you first pull down the fill from the repo, then add your content, push the changed file to the repo, and then close your file. If you leave the file open in RStudio and you pull down the changes made by your peers, you will wan to ensure that you reload/refresh the file so that when you push the changed file, it contains the previous changes.\nIf someone is familiar with LaTeX coding, Overleaf.com provides a way for collaborating without having to pull and push from GitHub."
  },
  {
    "objectID": "project/10_project_report.html#abstract",
    "href": "project/10_project_report.html#abstract",
    "title": "Final report",
    "section": "Abstract",
    "text": "Abstract\nThe abstract provides a main summary of data, problem, methods, and key findings."
  },
  {
    "objectID": "project/10_project_report.html#contents",
    "href": "project/10_project_report.html#contents",
    "title": "Final report",
    "section": "Contents",
    "text": "Contents\nA contents pages, or table of contents, provides a listing of the document sections and subsections as we as a page for location.\n\nTitle Page\nAbstract\nTable of Contents\nAcknowledgments\n\nChapters:\n\nIntroduction\nData\nResults/Findings\nDiscussion\nConclusion\nReferences"
  },
  {
    "objectID": "project/10_project_report.html#sources-of-data",
    "href": "project/10_project_report.html#sources-of-data",
    "title": "Final report",
    "section": "Sources of Data",
    "text": "Sources of Data\nWhat was the data source/where did you obtain it from? Include the source URL of the website from which you accessed the data.The data were obtained from https://www.tfrrs.org/. Include information about where and how the data were collected or obtained. Specify whether the data were obtained from internal databases, external sources, or gathered through specific methods (surveys, sensors, web scraping, etc.)."
  },
  {
    "objectID": "project/10_project_report.html#data-characteristics",
    "href": "project/10_project_report.html#data-characteristics",
    "title": "Final report",
    "section": "Data Characteristics",
    "text": "Data Characteristics\nDiscuss the data in detail. In which format was the data stored? How many cases were there in total? How many variables were contained? What variables were contained? What were the key variables you used?\nDescribe the types of variables present in the data set (numerical, categorical, text, etc.). When discussing variables of the visualization in the results chapter, make sure to provide clarity about the variable, its metric, and reason for using that variable (e.g., mean, max, median, mean of max values, median of max values, dispersion measures, etc.).\nList and briefly describe each attribute, feature, or variable in the data set, paying special attention to those used for the project."
  },
  {
    "objectID": "project/10_project_report.html#data-quality-and-data-preprocessing",
    "href": "project/10_project_report.html#data-quality-and-data-preprocessing",
    "title": "Final report",
    "section": "Data Quality and Data Preprocessing",
    "text": "Data Quality and Data Preprocessing\nDescribe the steps taken to clean and prepare the data for investigation. This description may include removing duplicates, standardizing formats, trimming, correcting inconsistencies, etc. Explain any criteria used to select variables or features for visualization, focusing on those with the greatest impact or insight for the organization’s understanding.\nSome key details to address include:\n\nMissing Values: Explain the presence and treatment of any missing data. Explain how missing values were handled during analysis (removal, replacement, etc.).\nOutliers and Anomalies: Mention any identified outliers or anomalies and how they were addressed (treatment or exclusion).\nVariables Created: Describe the variables created, their units of measurement, etc. Explain if any normalization or scaling procedures applied to create the variables and to ensure data consistency and comparability across measures.\n\nAlso, specify where the cleaned data may be obtained."
  },
  {
    "objectID": "project/10_project_report.html#data-limitations",
    "href": "project/10_project_report.html#data-limitations",
    "title": "Final report",
    "section": "Data Limitations",
    "text": "Data Limitations\nHighlight any limitations or constraints of the data set that affected the team’s ability to address the initial problem. Similarly, describe how any limitations might affect the interpretation of the findings."
  },
  {
    "objectID": "resources/tools.html#websites",
    "href": "resources/tools.html#websites",
    "title": "Tools for Foundations of Data Science",
    "section": "Websites",
    "text": "Websites\n\nPractice Coding in R on Posit Cloud\n\nhttps://posit.cloud/learn/primers/"
  },
  {
    "objectID": "resources/tools.html#books",
    "href": "resources/tools.html#books",
    "title": "Tools for Foundations of Data Science",
    "section": "Books",
    "text": "Books\n\nLots of alternative books https://www.bigbookofr.com/data-visualization.html"
  },
  {
    "objectID": "slides/02_git.html#version-control",
    "href": "slides/02_git.html#version-control",
    "title": "Git and GitHub",
    "section": "Version Control",
    "text": "Version Control\n\n\nWhat is version control?\n\nProject backup\nSee specific changes inside files\nUndo changes (time machine)\n\nVersion Control Summary Video"
  },
  {
    "objectID": "slides/02_git.html#version-control-git-workflow-basics",
    "href": "slides/02_git.html#version-control-git-workflow-basics",
    "title": "Git and GitHub",
    "section": "Version Control: Git Workflow Basics",
    "text": "Version Control: Git Workflow Basics\nThere are three main parts to Git Workflow:\n\n\nVersion control for files (not empty directories)\nMake local changes (in your working directory)\nStage changes (in your staging directory)\nCommit changes (to apply them for pushing to your remote repository)\nVersion Control Workflow Basics\nOther Parts\n\nPush for sending commits to GitHub\nMerge for merging branches (i.e., to incorporate your edits into main)"
  },
  {
    "objectID": "slides/02_git.html#git-image-version",
    "href": "slides/02_git.html#git-image-version",
    "title": "Git and GitHub",
    "section": "Git: Image Version",
    "text": "Git: Image Version\nunderstanding git through images"
  },
  {
    "objectID": "slides/02_git.html#connecting-git-to-github-the-rstudio-terminal",
    "href": "slides/02_git.html#connecting-git-to-github-the-rstudio-terminal",
    "title": "Git and GitHub",
    "section": "Connecting Git to GitHub: The RStudio Terminal",
    "text": "Connecting Git to GitHub: The RStudio Terminal\n\n\nConfigure Git and GitHub in RStudio Terminal\nCreate token\nSet token\nCan use the RStudio Gui (clunky though)"
  },
  {
    "objectID": "slides/02_git.html#configuring-git-and-github-with-usethis",
    "href": "slides/02_git.html#configuring-git-and-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Configuring Git and GitHub with {usethis}",
    "text": "Configuring Git and GitHub with {usethis}\n\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )"
  },
  {
    "objectID": "slides/02_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "href": "slides/02_git.html#creating-a-personal-access-token-pat-for-github-with-usethis",
    "title": "Git and GitHub",
    "section": "Creating a Personal Access Token (PAT) for GitHub with {usethis}",
    "text": "Creating a Personal Access Token (PAT) for GitHub with {usethis}\n\n\nusethis::create_github_token()\nCreate token and copy to your clipboard"
  },
  {
    "objectID": "slides/02_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "href": "slides/02_git.html#setting-your-git-credentials-using-pat-with-gitcreds",
    "title": "Git and GitHub",
    "section": "Setting your Git Credentials (using PAT) with {gitcreds}",
    "text": "Setting your Git Credentials (using PAT) with {gitcreds}\n\n\ngitcreds::gitcreds_set()\nChoose option to either set or replace\nAt ? Enter new password or token, paste PAT to set\ngh::gh_whoami() to check if set"
  },
  {
    "objectID": "slides/02_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "href": "slides/02_git.html#making-local-file-changes-committing-and-pushing-to-github",
    "title": "Git and GitHub",
    "section": "Making Local File Changes, Committing, and Pushing to GitHub",
    "text": "Making Local File Changes, Committing, and Pushing to GitHub\n\n\nMake a change to a file\nCheck status of project for changes\nStage change\nCommit all changes\nPush changes\nCommit a specific change\nPull changes down from repo (downloads and integrates changes)\nFetch downloads new data (does not change your working copy)"
  },
  {
    "objectID": "slides/02_git.html#checking-the-status-of-local-file-changes",
    "href": "slides/02_git.html#checking-the-status-of-local-file-changes",
    "title": "Git and GitHub",
    "section": "Checking the Status of Local File Changes",
    "text": "Checking the Status of Local File Changes\nAt the Terminal in RStudio\n\n$ git status"
  },
  {
    "objectID": "slides/02_git.html#shared-repository-workflow",
    "href": "slides/02_git.html#shared-repository-workflow",
    "title": "Git and GitHub",
    "section": "Shared Repository Workflow",
    "text": "Shared Repository Workflow\n\nupdate your local repo\n\ngit pull origin master\n\nensure you are on main branch\n\n`git checkout\n\ncreate a working branch\n\ngit checkout -b yourBranchName\n\nmake your changes on your branch and stage them\n\ngit add\n\ncommit changes locally\n\ngit commit -m \"description of changes\"\n\nupload the changes (including your new branch) to GitHub\n\ngit push origin yourBranchName\n\nVisit main repo on GitHub where you should now see your new branch click on your branch name click on “Pull Request” button (URC) click on “Send Pull Request”"
  },
  {
    "objectID": "slides/02_git.html#some-basic-commands",
    "href": "slides/02_git.html#some-basic-commands",
    "title": "Git and GitHub",
    "section": "Some Basic Commands",
    "text": "Some Basic Commands\nBASIC COMMANDS/ACTIONS Term Explanation * Fork: to make a copy of a repo in your own GitHub account * Clone: make a copy of the your GitHub repo on your local computer. * In CLI: ‘git clone’ copies a remote repo to create a local repo with a remote called origin automatically set up. Pull: incorporate changes into your repo Add: Adding snapshots of your changes to the “Staging” area. Commit: akes the files as they are in your staging area and stores a snap shot of your files (changes) permanently in your Git directory. Push: You “push” your files (changes) to the remote repo Merge: Incorporate changes into the branch you are on. Pull Request: Term used in collaboration. By “issuing a pull request” to the owner of the upstream repo, you are requesting that your changes be pulled into their repo (accept your changes/work)."
  },
  {
    "objectID": "slides/02_git.html#the-process-in-library-form",
    "href": "slides/02_git.html#the-process-in-library-form",
    "title": "Git and GitHub",
    "section": "The Process in Library Form",
    "text": "The Process in Library Form\n\ncheck out original (checkout main)\nmake a copy of the original (checkout )\nmake edits to the copy\nadd the edits (add)\ncommit to those changes (commit)\npush the edits to the copy (push) - optional\nswitch/check out the original (checkout main)\nmerge edits to the original (merge)"
  },
  {
    "objectID": "slides/02_git.html#main-branch-your-branch-merging-your-branch-to-main",
    "href": "slides/02_git.html#main-branch-your-branch-merging-your-branch-to-main",
    "title": "Git and GitHub",
    "section": "Main Branch, Your Branch, Merging Your Branch to Main",
    "text": "Main Branch, Your Branch, Merging Your Branch to Main\n\nSwitch to the main branch:\n\ngit checkout main\n\nMerge the branch into main:\n\ngit merge &lt;branch&gt;\n\nConfirm\nDelete the branch:\n\ngit branch -d &lt;branch&gt;\n\nConfirm branch removal:\n\ngit branch\n\nRepeat with new issue\n\n\nSteps 1, 2, 3, 4, 5"
  },
  {
    "objectID": "slides/02_git.html#staging-changes-adding-changes",
    "href": "slides/02_git.html#staging-changes-adding-changes",
    "title": "Git and GitHub",
    "section": "Staging Changes (Adding Changes)",
    "text": "Staging Changes (Adding Changes)\n\n\nStaging and Committing\n\nUntracked vs. tracked files\nTo have tracked by Git, you need to add"
  },
  {
    "objectID": "slides/02_git.html#staging-a-specific-change",
    "href": "slides/02_git.html#staging-a-specific-change",
    "title": "Git and GitHub",
    "section": "Staging a Specific Change",
    "text": "Staging a Specific Change\n\n\n$ git add &lt;file&gt;... such that &lt;file&gt; refers to the file name\nfile might be in a directory, e.g., r/\n$ git add r/yourname.R\nTab to auto-complete, e.g., git add r/you{TAB}"
  },
  {
    "objectID": "slides/02_git.html#staging-all-changes",
    "href": "slides/02_git.html#staging-all-changes",
    "title": "Git and GitHub",
    "section": "Staging All Changes",
    "text": "Staging All Changes\n\n$ git add ."
  },
  {
    "objectID": "slides/02_git.html#committing-the-changes",
    "href": "slides/02_git.html#committing-the-changes",
    "title": "Git and GitHub",
    "section": "Committing the Change(s)",
    "text": "Committing the Change(s)\n\n\ngit commit is used to commit the changes\nadd -m to tell git you want a message (e.g., \"my message here\")\n\n$ git commit -m \"added my first .R file\""
  },
  {
    "objectID": "slides/02_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "href": "slides/02_git.html#push-publish-the-changes-from-your-branch-to-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Push (publish) the change(s) from your branch to the remote repository",
    "text": "Push (publish) the change(s) from your branch to the remote repository\n\n\n$ git push\nPushing changes"
  },
  {
    "objectID": "slides/02_git.html#pulls-changes-from-the-remote-repository",
    "href": "slides/02_git.html#pulls-changes-from-the-remote-repository",
    "title": "Git and GitHub",
    "section": "Pulls change(s) from the remote repository",
    "text": "Pulls change(s) from the remote repository\n\n\n$ git pull\nIf you make changes that other will need, let them know to pull"
  },
  {
    "objectID": "slides/02_git.html#fetch-changes",
    "href": "slides/02_git.html#fetch-changes",
    "title": "Git and GitHub",
    "section": "Fetch changes",
    "text": "Fetch changes"
  },
  {
    "objectID": "slides/02_git.html#video-tutorials",
    "href": "slides/02_git.html#video-tutorials",
    "title": "Git and GitHub",
    "section": "Video Tutorials",
    "text": "Video Tutorials\n\n\nGitKraken Git Client examples\nfor more, see: this video"
  },
  {
    "objectID": "slides/02_git.html#videos-of-many-things-you-can-do",
    "href": "slides/02_git.html#videos-of-many-things-you-can-do",
    "title": "Git and GitHub",
    "section": "Videos of many things you can do",
    "text": "Videos of many things you can do\nIf interested, see gittower YouTube"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#step-1",
    "href": "slides/sample_quarto_presentation.html#step-1",
    "title": "Sample Presentation",
    "section": "Step 1",
    "text": "Step 1\n\nSplit slides up with level 2 headers: ## Heading 2\nAdd some markdown + text and/or some R/Python code"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#some-r-code",
    "href": "slides/sample_quarto_presentation.html#some-r-code",
    "title": "Sample Presentation",
    "section": "Some R Code",
    "text": "Some R Code\n\n2 + 2\n\n[1] 4\n\n# comment"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#slide-title",
    "href": "slides/sample_quarto_presentation.html#slide-title",
    "title": "Sample Presentation",
    "section": "Slide Title",
    "text": "Slide Title\n\none\ntwo"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#make-this-slide-red",
    "href": "slides/sample_quarto_presentation.html#make-this-slide-red",
    "title": "Sample Presentation",
    "section": "Make this slide Red",
    "text": "Make this slide Red"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#making-a-slide-incremental",
    "href": "slides/sample_quarto_presentation.html#making-a-slide-incremental",
    "title": "Sample Presentation",
    "section": "Making a Slide Incremental",
    "text": "Making a Slide Incremental\nSay you want to reveal the content of slide piecemeal without rewriting separate slides with previous content.\n\nThen add some content…\n\n\nThen some more content"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#omit-this-slide-visibility-hidden",
    "href": "slides/sample_quarto_presentation.html#omit-this-slide-visibility-hidden",
    "title": "Sample Presentation",
    "section": "Omit This Slide {visibility = “hidden”}",
    "text": "Omit This Slide {visibility = “hidden”}"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#add-links",
    "href": "slides/sample_quarto_presentation.html#add-links",
    "title": "Sample Presentation",
    "section": "Add links",
    "text": "Add links\n\ncmc\n\n\n\nFirst item\nSecond item"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#fragments",
    "href": "slides/sample_quarto_presentation.html#fragments",
    "title": "Sample Presentation",
    "section": "Fragments",
    "text": "Fragments\n\nFade in\n\n\nFade out\n\n\nHighlight red\n\n\nFade in, then out"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#fragments-nesting",
    "href": "slides/sample_quarto_presentation.html#fragments-nesting",
    "title": "Sample Presentation",
    "section": "Fragments, nesting",
    "text": "Fragments, nesting\n\n\n\nFade in &gt; Turn red &gt; Semi fade out"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#fragments-spans",
    "href": "slides/sample_quarto_presentation.html#fragments-spans",
    "title": "Sample Presentation",
    "section": "Fragments, spans",
    "text": "Fragments, spans\nThis is an important sentence!\nMind the gap when riding the rail!"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#column-layout",
    "href": "slides/sample_quarto_presentation.html#column-layout",
    "title": "Sample Presentation",
    "section": "Column layout",
    "text": "Column layout\n\n\ncontents…s\n\ncontents…"
  },
  {
    "objectID": "slides/sample_quarto_presentation.html#output-location",
    "href": "slides/sample_quarto_presentation.html#output-location",
    "title": "Sample Presentation",
    "section": "Output Location",
    "text": "Output Location\n\n\nlibrary(ggplot2)\n\nmtcars |&gt; \n  ggplot(aes(x = disp, y = mpg)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", formula = \"y~x\")"
  }
]