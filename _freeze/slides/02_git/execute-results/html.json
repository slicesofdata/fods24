{
  "hash": "30d7da88b4cab70cd36c02a0f9be4c4f",
  "result": {
    "markdown": "---\ntitle: \"Git and GitHub\"\nformat: \n  revealjs:\n    theme: dark\nslide-number: c/t #h/v\n#  width: 1600\n#  height: 900\n#logo: \"images/??.jpg\"\n#logo: \"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png\"\n#footer: \"[](https://rstudio-conf-2022.github.io/get-started-quarto/)\"\n#css: [\"css/styles.css\"]\n#theme: simple\necho: true  # for code echo\n\n#editor: visual\n\nexecute:\n  #enabled: false\n  freeze: auto\n---\n\n\n\n## **Version Control**\n\n::: {.incremental}\n* What is version control? \n  * Project backup\n  * See specific changes inside files\n  * Undo changes (time machine)\n  \n* [Version Control Summary Video](https://www.youtube.com/watch?v=M-O8ZNW9icQ)\n:::\n\n## **Version Control: Git Workflow Basics**\n\nThere are three main parts to Git Workflow:\n\n::: {.incremental}\n- Version control for files (not empty directories)\n- Make local changes (in your working directory) \n- **Stage** changes (in your staging directory) \n- **Commit** changes (to apply them for pushing to your remote repository)\n- [Version Control Workflow Basics](https://www.youtube.com/watch?v=e8PGuOyZ3YU)\n:::\n\n## **Connecting Git to GitHub: The RStudio Terminal**\n\n::: {.incremental}\n- **Configure** Git and GitHub in RStudio Terminal\n- **Create** token\n- **Set** token\n- Can use the RStudio Gui (clunky though)\n:::\n\n\n## **Configuring Git and GitHub with {usethis}**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_config(user.name = \"janegit\", \n                        user.email = \"jane_git@gitrdone.com\"\n                        )\n```\n:::\n\n\n\n## **Creating a Personal Access Token (PAT) for GitHub with {usethis}**\n\n::: {.incremental} \n- `usethis::create_github_token()`\n- Create token and **copy to your clipboard**\n:::\n\n## **Setting your Git Credentials (using PAT) with {gitcreds}**\n\n::: {.incremental}\n- `gitcreds::gitcreds_set()`\n- Choose option to either *set* or *replace* \n- At `? Enter new password or token`, **paste** PAT to set\n- `gh::gh_whoami()` to check if set\n:::\n\n## **Making Local File Changes, Committing, and Pushing to GitHub**\n\n::: {.incremental}\n- Make a change to a file\n- Check **status** of project for changes\n- **Stage** change\n- **Commit** all changes\n- **Push** changes\n- **Commit** a specific change\n- **Pull** changes down from repo (downloads and integrates changes)\n- **Fetch** downloads new data (does not change your working copy)\n:::\n\n\n## **Checking the status of local file changes**\n\nAt the **Terminal** in RStudio\n\n- `$ git status`\n\n## **Staging Changes (Adding Changes)**\n\n::: {.incremental}\n* [Staging and Committing](https://www.youtube.com/watch?v=7exFDGHgQcw)\n  * Untracked vs. tracked files \n  * To have tracked by Git, you need to **add**\n:::\n\n## **Staging a *Specific* Change**\n\n::: {.incremental}\n* `$ git add <file>...` such that `<file>` refers to the file name\n\n* file might be in a directory, e.g., `r/`\n\n* `$ git add r/yourname.R`\n\n* Tab to auto-complete, e.g., `git add r/you{TAB}`\n:::\n\n\n## **Staging *All* Changes**\n\n\n* `$ git add .`\n\n\n## **Committing the Change(s)** \n\n::: {.incremental}\n-  `git commit` is used to commit the changes\n- add `-m` to tell git you want a message (e.g., `\"my message here\"`)  \n- `$ git commit -m \"added my first .R file\"`\n:::\n\n## **Push (publish) the change(s) from your branch to the remote repository**\n\n::: {.incremental}\n- `$ git push`\n\n- [Pushing changes](https://www.youtube.com/watch?v=lqw7ipXmc-4)\n:::\n\n## **Pulls change(s) from the remote repository**\n\n::: {.incremental}\n- `$ git pull`\n- If you make changes that other will need, let them know to pull\n:::\n\n## **Fetch changes**\n\n\n## **Video Tutorials**\n\n::: {.incremental}\n- [GitKraken Git Client examples](https://www.gitkraken.com/learn/git)\n- for more, see: this [video](https://www.youtube.com/watch?v=A4rIs-6c98s)\n:::\n\n## **Videos of many things you can do**\n\nIf interested, see [gittower YouTube](https://www.youtube.com/@gittower)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}