---
title: "Git and GitHub"
format: 
  revealjs:
    theme: dark
    preview-links: auto
    embed-resources: true # needed to allow for showing slides on a website (otherwise link is blank)
    # slide-tone: true # play sound on change - blind users
    
slide-number: c/t #h/v
#  width: 1600
#  height: 900
#logo: "images/??.jpg"
#logo: "https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png"
#footer: "[](https://rstudio-conf-2022.github.io/get-started-quarto/)"
#css: ["css/styles.css"]
#theme: simple
echo: true  # for code echo

#editor: visual

execute:
  #enabled: false
  freeze: auto
---


## **Version Control**

::: {.incremental}
* What is version control? 
  * Project backup
  * See specific changes inside files
  * Undo changes (time machine)
  
* [Version Control Summary Video](https://www.youtube.com/watch?v=M-O8ZNW9icQ)
:::


## **Version Control: Git Workflow Basics**

There are three main parts to Git Workflow:

::: {.incremental}
- Version control for files (not empty directories)
- Make local changes (in your working directory) 
- **Stage** changes (in your staging directory) 
- **Commit** changes (to apply them for pushing to your remote repository)
- [Version Control Workflow Basics](https://www.youtube.com/watch?v=e8PGuOyZ3YU)
* Other Parts 
  * **Push** for sending commits to GitHub 
  * **Merge** for merging branches (i.e., to incorporate your edits into main)
:::


## **Git: Image Version**

[understanding git through images](https://dev.to/nopenoshishi/understanding-git-through-images-4an1)


## **Connecting Git to GitHub: The RStudio Terminal**

::: {.incremental}
- **Configure** Git and GitHub in RStudio Terminal
- **Create** token
- **Set** token
- Can use the RStudio Gui (clunky though)
:::


## **Configuring Git and GitHub with {usethis}**

```{r message=FALSE, warning=FALSE, eval=FALSE}
usethis::use_git_config(user.name = "janegit", 
                        user.email = "jane_git@gitrdone.com"
                        )
```


## **Creating a Personal Access Token (PAT) for GitHub with {usethis}**

::: {.incremental} 
- `usethis::create_github_token()`
- Create token and **copy to your clipboard**
:::


## **Setting your Git Credentials (using PAT) with {gitcreds}**

::: {.incremental}
- `gitcreds::gitcreds_set()`
- Choose option to either *set* or *replace* 
- At `? Enter new password or token`, **paste** PAT to set
- `gh::gh_whoami()` to check if set
:::


## **Some Basic Commands**

::: {.incremental}
`Fork`: to make a copy of a repo in your own GitHub account

`Clone`: make a copy of the your GitHub repo on your local computer. 
  * copies a remote repo to create a local repo with a remote called origin automatically set up.
:::


## **Some Basic Commands (Cont.)**

::: {.incremental}
`Pull`:	incorporate changes into your repo

`Add`:	Adding snapshots of your changes to the "Staging" area.

`Commit`:	takes the files as they are in your staging area and stores a snap shot of your files (changes) permanently in your Git directory

`Push`:	You "push" your files (changes) to the remote repo

`Merge`: Incorporate changes into the branch you are on.

`Status`: check the status of a repo changes, etc.

`Pull Request`: By "issuing a pull request" to the owner of the upstream repo, you are requesting that your changes be pulled into their repo (accept your changes/work).
:::


## **Making Local File Changes, Committing, and Pushing to GitHub**

::: {.incremental}
- Make a change to a file
- Check ***status*** of project for changes
- ***Stage*** change
- ***Commit*** change(s)
- ***Push*** changes
- ***Pull*** changes down from repo (downloads and integrates changes)
- ***Fetch*** downloads new data (does not change your working copy)
:::


## **Checking the Status of Local File Changes**

At the **Terminal** in RStudio

- `$ git status`


## **Shared Repository Workflow: Book Analogy**

::: {.incremental}
* ***check out*** original (checkout main)
* make a ***copy*** of the original (checkout <branch>)
* ***make edits*** to the copy
* ***add*** the edits (add)
* ***commit*** to those changes (commit)
* ***push*** the edits to the copy (push) - optional 
* ***switch/check out*** the original (checkout main)
* ***merge edits*** to the original (merge)
:::


## **Shared Repository Workflow**

::: {.incremental}
1. Pull recent changes of main: `git pull`
2. Create a working branch (**IMPORTANT!**): `git checkout -b yourBranchName`
3. Verify new branch: `git checkout` 
4. Make changes, then Stage your changes: `git add`
5. Commit changes locally: `git commit -m "description of changes"`
6. Upload your new the changes to GitHub: `git push`
:::


## **Merging Your Branch to Main**

::: {.incremental}
1. Get main branch: `git checkout main`
2. Verify main: `git checkout`
3. Pull recent changes: `git pull`
4. Merge into main branch: `git merge <branch_name>`
5. Tag the change (optional): `git tag`
6. Delete the branch (optional): `git branch -d <branch_name>`
7. Confirm branch removal (optional): `git branch`
:::


## **Collaboration Process Review**

::: {.incremental}
1. `git checkout main`, then `git pull` 
2. `git checkout -b <branch_name>` 
3. `git` `add`, `commit`, `push` changes
5. `git checkout main`, then `git pull` recent changes
6. `git merge <branch_name>` into main
7. `git tag` to add a tag
8. For new issue/task: Repeat Steps 1, 2, 3, 4, 5, (6)
:::



## **Staging Changes (Adding Changes)**

::: {.incremental}
* [Staging and Committing](https://www.youtube.com/watch?v=7exFDGHgQcw)
  * Untracked vs. tracked files 
  * To have tracked by Git, you need to **add**
:::


## **Staging a *Specific* Change**

::: {.incremental}
* `$ git add <file>...` such that `<file>` refers to the file name

* file might be in a directory, e.g., `r/`

* `$ git add r/yourname.R`

* Tab to auto-complete, e.g., `git add r/you{TAB}`
:::


## **Staging *All* Changes**

* `$ git add .`


## **Committing the Change(s)** 

::: {.incremental}
-  `git commit` is used to commit the changes
- add `-m` to tell git you want a message (e.g., `"my message here"`)  
- `$ git commit -m "added my first .R file"`
:::

## **Push (publish) the change(s) from your branch to the remote repository**

::: {.incremental}
- `$ git push`

- [Pushing changes](https://www.youtube.com/watch?v=lqw7ipXmc-4)
:::

## **Pulls change(s) from the remote repository**

::: {.incremental}
- `$ git pull`
- If you make changes that other will need, let them know to pull
:::


## **Fetch changes**


## **Video Tutorials**

::: {.incremental}
- [GitKraken Git Client examples](https://www.gitkraken.com/learn/git)
- for more, see: this [video](https://www.youtube.com/watch?v=A4rIs-6c98s)
:::

## **Videos of many things you can do**

If interested, see [gittower YouTube](https://www.youtube.com/@gittower)
